%
% Standard Model - unitary and t'Hooft-Feynman gauges.
%
option chepPDWidth=200.

keys gauge_fixing=Feynman.
keys CKMdim=1.
use SM_2HDM_tex.


do_if gauge_fixing==Feynman.
    model 'i2HDM'/7.
do_else_if gauge_fixing==unitary.
    model 'SM+HAA+HGG(UG)'/3.
do_else.
    write('Error: the key "gauge" should be either "Feynman" or "unitary".').
    quit.
end_if.

option ReduceGamma5=0.
let g5=gamma5.

%%%%%%%%%%%%%% INDEPNDENT PARAMETERS %%%%%%%%%%%%%%

parameter  	pi=acos(-1),
 		alphaSMZ=0.1184:'Srtong alpha(MZ) for running mass calculation',
 		EE =0.31343:    'elecromagnetic constant',
  		Q  = 100:       'QCD scale'.

parameter   	Mm = 0.1057:	'muon mass',
 		Mtau = 1.777:	'tau-lepton mass',
		Ms = 0.200,
   		McMc =1.23:	'Mc(Mc)  MS-BAR',
		MbMb =4.25:	'Mb(Mb)  MS-BAR',
 		Mtop = 172.5:	't-quark pole mass',
 		MH   = 125:	'higgs mass',
 		MZ = 91.188:    'Z-boson mass',
 		MW = 80.385:    'W-boson mass',
 		wtop = 1.59:	't-quark width (tree level 1->2x)',
 		wZ = 2.49444:   'Z-boson width        (tree level 1->2x)',
 		wW = 2.08895:   'W-boson width        (tree level 1->2x)'.
		
		
parameter       s12 = 0.221: 	'Parameter of C-K-M matrix (PDG-94)',
	   	s23 = 0.040: 	'Parameter of C-K-M matrix (PDG-94)',
           	s13 = 0.0035  : 'Parameter of C-K-M matrix (PDG-94)'.


%%%%%%%%%%%%%% DEPNDENT PARAMETERS %%%%%%%%%%%%%%%%%%%


external_func(alphaQCD,1).

parameter GG=sqrt(4*pi*alphaQCD(Q)).
 
parameter Maux=1.

parameter  	Mcp 	= McMc*(1+4/3*alphaQCD(McMc)/pi):'1 loop formula like in Hdecay',
	   	Mbp 	= MbMb*(1+4/3*alphaQCD(MbMb)/pi):'1 loop formula like in Hdecay',
		alphaE0	=1/137.036:'electromagnetic constant at zero energy',
		CW = MW/MZ:  		'on-shell cos of the Weinberg angle',
		SW = sqrt(1-CW**2): 	'sin of the Weinberg angle',
		GF = EE**2/(2*SW*MW)**2/Sqrt2: 'Fermi Constant',
		vv=2*MW/EE*SW.


parameter  	c12  = sqrt(1-s12**2): 	'parameter  of C-K-M matrix',
           	c23  = sqrt(1-s23**2): 	'parameter  of C-K-M matrix',
           	c13  = sqrt(1-s13**2): 	'parameter  of C-K-M matrix'.
           	
			  
external_func(initQCD5,4). 
parameter LamQCD=initQCD5(alphaSMZ,McMc,MbMb,Mtop).

external_func(MbEff,1). 
external_func(MtEff,1). 
external_func(McEff,1). 

parameter	Mb=MbEff(Q),
		Mt=MtEff(Q),
		Mc=McEff(Q).

		   
do_if CKMdim==3.
parameter  Vud = c12*c13                : 'C-K-M matrix element',
           Vus = s12*c13                : 'C-K-M matrix element',
           Vub = s13     	            : 'C-K-M matrix element',
           Vcd = (-s12*c23-c12*s23*s13) : 'C-K-M matrix element',
           Vcs = (c12*c23-s12*s23*s13)  : 'C-K-M matrix element',
           Vcb = s23*c13                : 'C-K-M matrix element',
           Vtd = (s12*s23-c12*c23*s13) 	: 'C-K-M matrix element',
           Vts = (-c12*s23-s12*c23*s13)	: 'C-K-M matrix element',
           Vtb = c23*c13  	            : 'C-K-M matrix element'.
OrthMatrix( { {Vud,Vus,Vub}, {Vcd,Vcs,Vcb}, {Vtd,Vts,Vtb}} ).

alias ckm(1,1)=Vud, ckm(2,1)=Vus, ckm(3,1)=Vub,
      ckm(1,2)=Vcd, ckm(2,2)=Vcs, ckm(3,2)=Vcb,
      ckm(1,3)=Vtd, ckm(2,3)=Vts, ckm(3,3)=Vtb.

do_else_if CKMdim==2.
parameter  Vud = c12            : 'C-K-M matrix element',
           Vus = s12    	    : 'C-K-M matrix element',
           Vcs = Vud     	    : 'C-K-M matrix element',
           Vcd = -Vus           : 'C-K-M matrix element'.
let        Vub = 0, Vcb = 0, Vtd = 0, Vts = 0, Vtb = 1.
OrthMatrix({{Vud,Vus}, {Vcd,Vcs}}).

do_else_if CKMdim==1.
let  Vub=0, Vcb=0, Vtd=0, Vts=0, Vtb=1, Vud=1, Vus=0, Vcs=1, Vcd=0.
end_if.

%%%%%%%%%%%%%%%% Dark Matter Independent Parameters  %%%%%%%%%%%%%%%%%
           	
parameter    	Mh1 = 100:  'Mass of Dark Matter',
		Mh2 = 120:  'Mass od odd neutral particle',
		Mhc = 130:  'Mass of charged odd scalar particle',
		ld345 = -0.2: 'Combination of cuartic coupling constant ld3+ld3+ld5',
		ld = 1: 'Quartic coupling Dark Matter'.
				

%%%%%%%%%%%%%%%% Dark Matter  Dependent Parameters  %%%%%%%%%%%%%%%%%


parameter   	md2 = (1/2)*ld345*vv**2 - Mh1**2: 'mass parameter of the dark matter lagrangian sector',
		ld3 = (2/vv**2)*(Mhc**2 + (1/2)*ld345*vv**2 - Mh1**2): 'ld3 quartic coupling constant between odd particle and higgs',
		ld4 = (1/vv**2)*(Mh2**2 + Mh1**2 - 2*Mhc**2): 'ld4 quartic coupling constant between odd particle and higgs',
		ld5 = (1/vv**2)*(Mh1**2 - Mh2**2): 'ld5 quartic coupling constant between odd particle and higgs'.

%%%%%%%%%%%%%%%% Particles of the model %%%%%%%%%%%%%%%%%%%%%


do_if gauge_fixing==Feynman.

vector  
	A/A: (photon, gauge),
	Z/Z:('Z boson', mass MZ, width wZ, gauge),
	G/G: (gluon, color c8, gauge),
	'W+'/'W-': ('W boson', mass MW , width wW , gauge).

do_else.

vector  
	A/A: (photon, gauge),
	Z/Z:('Z boson', mass MZ, width wZ),
	G/G: (gluon, color c8, gauge),
	'W+'/'W-': ('W boson', mass MW, width wW).

end_if.

spinor 		ne/Ne:(neutrino,left), 	   e:(electron),
		nm/Nm:('mu-neutrino',left),   m:(muon, mass Mm),
		nl/Nl:('tau-neutrino',left),  l:('tau-lepton', mass Mtau).

spinor		u:('u-quark',color c3, mass Mu=0.003),
		d:('d-quark',color c3, mass Md=0.005),
		c:('c-quark',color c3, mass Mcp),
		s:('s-quark',color c3, mass Ms),
		t:('t-quark',color c3, mass Mtop, width wtop),
		b:('b-quark',color c3, mass Mbp).

let l1={ne,e}, L1={Ne,E}.
let l2={nm,m}, L2={Nm,M}.
let l3={nl,l}, L3={Nl,L}.

let q1={u,d}, Q1={U,D}, q1a={u,Vud*d+Vus*s+Vub*b}, Q1a={U,Vud*D+Vus*S+Vub*B}.
let q2={c,s}, Q2={C,S}, q2a={c,Vcd*d+Vcs*s+Vcb*b}, Q2a={C,Vcd*D+Vcs*S+Vcb*B}. 
let q3={t,b}, Q3={T,B}, q3a={t,Vtd*d+Vts*s+Vtb*b}, Q3a={T,Vtd*D+Vts*S+Vtb*B}.

	
scalar 		H/H: (Higgs, mass MH, width wH = auto),    
	        '~h1'/'~h1': ('Dark Matter', mass Mh1, width wh1=0),  %odd particle
	        '~h2'/'~h2': ('Neut Odd Higgs', mass Mh2, width wh2=auto), %odd particle
	        '~h+'/'~h-': ('Charged higgs', mass Mhc, width wHC=auto).  % odd particle 
		
% in case of mh1=mh2 one should introduce just one complex scalar
% ~h/~H		
% and the respective indert doublet
% let vphi = {-i*'~h+', '~h'}, Vphi = {i*'~h-', '~H'}.
%

prtcproperty pdg:(H=25, '~h1'=3000022, '~h+'=3000025, '~h-'=3000026, '~h2'=3000027).



%%%% Flavor eigenstates in function of mass eigenstates %%%%%

let B1 = CW*A - SW*Z.
let W3 = CW*Z + SW*A.
let W1 = ('W+'+'W-')/Sqrt2, W2 = i*('W+'-'W-')/Sqrt2.

do_if gauge_fixing==Feynman.

let gh3 = CW*'Z.c'+SW*'A.c'.
let gh1 = ('W+.c'+'W-.c')/Sqrt2, gh2= i*('W+.c'-'W-.c')/Sqrt2.
let gh = {gh1,gh2,gh3}.
		
let Gh3 = CW*'Z.C'+SW*'A.C'.
let Gh1 = ('W+.C'+'W-.C')/Sqrt2, Gh2=i*('W+.C'-'W-.C')/Sqrt2.
let Gh = {Gh1,Gh2,Gh3}. 

end_if.

let WW = {W1, W2 , W3}, WW1 = {'W+',W3,'W-'}, WW2 = {'W-',W3,'W+'}.


%%%%%%% Coupling constants %%%%%%

let gw = EE/SW.    %Weak coupling constant
let gy = EE/CW.   %U(1)Y coupling constant


% Self-interaction of gauge bosons %

lterm -F**2/4  where 	F=deriv^mu*B1^nu-deriv^nu*B1^mu.

lterm -F**2/4  where 	F=deriv^mu*G^nu^a-deriv^nu*G^mu^a+i*GG*f_SU3^a^b^c*G^mu^b*G^nu^c.

lterm -F**2/4  where    F=deriv^mu*WW^nu^a-deriv^nu*WW^mu^a -gw*eps^a^b^c*WW^mu^b*WW^nu^c.


%%%%% left fermion interaction with gauge fields %%%%%

lterm  	anti(psi)*gamma*(1-g5)/2*(i*deriv-gw*taupm*WW1/2-Y*gy*B1)*psi
		where 
			psi=l1,  Y=-1/2;
			psi=l2,  Y=-1/2;
			psi=l3,  Y=-1/2;
			psi=q1a, Y= 1/6;
			psi=q2a, Y= 1/6;
			psi=q3a, Y= 1/6.


%%%%% right fermion interaction with gauge fields %%%%%

lterm  	anti(psi)*gamma*(1+g5)/2*(i*deriv - Y*gy*B1)*psi
		where 
			psi=e,Y= -1;
			psi=m,Y= -1;
			psi=l,Y= -1;
			psi=u, Y=  2/3;
			psi=c, Y=  2/3;
			psi=t, Y=  2/3;
			psi=d, Y= -1/3;
			psi=s, Y= -1/3;
			psi=b, Y= -1/3.


%%%%%%% quark-gluon interaction %%%%%%

lterm  GG*anti(psi)*lambda*gamma*G*psi  where  psi=q1; psi=q2; psi=q3.


%%%%%%% Definition of the higgs doublet %%%%%%
	
do_if gauge_fixing==Feynman.

let pp = { -i*'W+.f',  (vev(2*MW/EE*SW)+H+i*'Z.f')/Sqrt2 }, 
    PP = {  i*'W-.f',  (vev(2*MW/EE*SW)+H-i*'Z.f')/Sqrt2 }.

do_else.

let pp = { 0,  (vev(2*MW/EE*SW)+H)/Sqrt2 }, 
    PP = { 0,  (vev(2*MW/EE*SW)+H)/Sqrt2 }.
    
end_if.


%%%%%%% Yukawa interactions for quarks %%%%%%%

lterm  -M/MW/Sqrt2*gw*(anti(pl)*(1+g5)/2*pr*pp + anti(pr)*(1-g5)/2*pl*PP )
    where
	M=Vud*Md, pl=q1a, pr=d;          % 0 stands for Md 
	M=Vus*Ms, pl=q1a, pr=s;
	M=Vub*Mb, pl=q1a, pr=b;
	
	M=Vcd*Md, pl=q2a, pr=d;
	M=Vcs*Ms, pl=q2a, pr=s;
	M=Vcb*Mb, pl=q2a, pr=b;
	
	M=Vtd*Md, pl=q3a, pr=d;
	M=Vts*Ms, pl=q3a, pr=s;
	M=Vtb*Mb, pl=q3a, pr=b.


lterm  -M/MW/Sqrt2*gw*(anti(pl)*(1+g5)/2*i*tau2*pr*PP + anti(pr)*(1-g5)/2*i*pl*tau2*pp ) 
    where
	M=Mu , pl=q1a, pr=u;
	M=Mc,  pl=q2a, pr=c;
	M=Mtop,pl=q3a, pr=t.

	
%%%%%%% Yukawa interactions for leptons %%%%%%%

lterm  -M/MW/Sqrt2*gw*(anti(pl)*(1+g5)/2*pr*pp + anti(pr)*(1-g5)/2*pl*PP )
    where
	M=Mm,  pl=l2,  pr=m;
	M=Mtau,  pl=l3,  pr=l.
	

%%%%%% Higgs sector %%%%%%

parameter    	lam=(EE/SW*MH/MW)**2/8 : 'lambda_phi parameter'.

lterm -lam*(pp*PP-v**2/2)**2   where  v=2*MW*SW/EE.

let Dpp^mu^a = (deriv^mu + i*gy/2*B1^mu)*pp^a + i*gw/2*taupm^a^b^c*WW1^mu^c*pp^b.

let DPP^mu^a = (deriv^mu - i*gy/2*B1^mu)*PP^a - i*gw/2*taupm^a^b^c*WW2^mu^c*PP^b.

lterm DPP*Dpp.


lterm -i*GG*f_SU3*ccghost(G)*G^mu*deriv^mu*ghost(G).
lterm  -1/2*(deriv*G)**2.


do_if gauge_fixing==Feynman.

lterm -gw*eps*gh*WW*deriv*Gh.

lterm gw*eps*deriv*Gh*gh*WW.


lterm  -1/2*(deriv*A)**2.


lterm  -1/2*(2*(deriv*'W+'+MW*'W+.f')*(deriv*'W-'+MW*'W-.f') +	(deriv*Z+MW/CW*'Z.f')**2).


lterm -MW*EE/2/SW*((H+i*'Z.f')*('W-.C'*'W+.c' + 'W+.C'*'W-.c') + H*'Z.C'*'Z.c'/CW**2-2*i*'Z.f'*'W+.C'*'W-.c').

lterm i*EE*MW/2/CW/SW*('W+.f'*('W-.C'*'Z.c'*(1-2*SW**2)+'W-.c'*'Z.C'+2*CW*SW*'W-.C'*'A.c') - 'W-.f'*('W+.C'*'Z.c'*(1-2*SW**2)+'W+.c'*'Z.C'+2*CW*SW*'W+.C'*'A.c')).

end_if.


%%%%%%%%%%%% Dark Matter sector %%%%%%%%%%%%

let vphi = {-i*'~h+', ('~h1' + i*'~h2')/Sqrt2}, Vphi = {i*'~h-', ('~h1'-i*'~h2')/Sqrt2}.

let Dvphi^mu^a = (deriv^mu + i*gy/2*B1^mu)*vphi^a + i*gw/2*taupm^a^b^c*WW1^mu^c*vphi^b.

let DVphi^mu^a = (deriv^mu - i*gy/2*B1^mu)*Vphi^a - i*gw/2*taupm^a^b^c*WW2^mu^c*Vphi^b.

lterm (DVphi*Dvphi) + md2*(Vphi*vphi) - ld*(Vphi*vphi)**2.  


%%%%%%%%% Coupling between Dark Matter and higgs %%%%%%%%

lterm  -ld3*(Vphi*vphi)*(PP*pp).
lterm  -ld4*(Vphi*pp)*(PP*vphi).
lterm  -(ld5/2)*((PP*vphi)*(PP*vphi) + (Vphi*pp)*(Vphi*pp)).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%% HGG + HAA PART %%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

external_func(McRun,1).
external_func(MbRun,1).
external_func(MtRun,1).
external_func(HggF,1).
external_func(HggV,1).
external_func(HggS,1).
external_func(Hgam1F,1).
external_func(alphaQCD,1).

external_func(hGGeven,*).
external_func(hAAeven,*).
external_func(hGGodd,*).
external_func(hAAodd,*).

parameter	aQCD =alphaQCD(MH)/pi.
	
	
% Amplitudes 
			  
_p=[c,b,t,l] in   parameter ahF__p=CoefVrt([anti(_p),_p,H]) /(mass _p).

     parameter a_hV_W=CoefVrt(['W+','W-', H]) /MW**2,
               a_hS_Hc=CoefVrt(['~h+','~h-', H], [abbr]) /Mhc**2.
        


parameter aQCD_h =alphaQCD(MH)/pi, Rqcd_h=sqrt(1+ aQCD_h*(149/12+ aQCD_h*(68.6482-aQCD_h*212.447))).
parameter Quq=4/9, Qdq=1/9.

parameter LGGH=-cabs( hGGeven(MH,aQCD_h,3, 1,3,Mbp, ahF_b, 1,3,Mcp, ahF_c, 1,3,Mtop,ahF_t)).
   
parameter LAAH=-cabs( 
   Qdq*hAAeven(MH,aQCD_h,1, 1,3,Mbp,ahF_b) +Quq*hAAeven(MH,aQCD_h, 2, 1,3,Mtop,ahF_t,1,3,Mcp,ahF_c)+
   hAAeven(MH,aQCD_h,3, 
     1,1,Mtau, ahF_l,
     2,1,MW, a_hV_W,
     0,1,Mhc,a_hS_Hc)).

let F_A^mu^nu=deriv^mu*A^nu-deriv^nu*A^mu.
let F_G^mu^nu^a=deriv^mu*G^nu^a-deriv^nu*G^mu^a.
let dF_G^mu^nu^a=i*GG*f_SU3^a^b^c*G^mu^b*G^nu^c.


%lterm  Rqcd_h*LGGH*h*F_G*(F_G+2*dF_G).
%lterm  LAAH*h*F_A**2.

lterm  1/vv*Rqcd_h*LGGH*pp*PP*F_G*(F_G+2*dF_G).
lterm  1/vv*LAAH*pp*PP*F_A**2.

clear F_G,F_A,dF_G.

	

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	
SetAngle(1-SW**2=CW**2).
SetEM(A,EE).
CheckHerm.
CheckMasses.




