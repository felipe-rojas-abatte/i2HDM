%!PS-Adobe-3.1
%ADO_DSC_Encoding: MacOS Roman
%%Title: Omega_Mh1_new_gray.pdf
%%Creator: Adobe Acrobat 9.5.3
%%For: belyaev
%%CreationDate: 26/11/16, 23:07:10
%%BoundingBox: 90 234 522 558
%%HiResBoundingBox: 90 234 522 558
%%CropBox: 90 234 522 558
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq{pop}{setblackgeneration}ifelse
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq{pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 489 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-13:18:53        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xmp:CreateDate="2016-11-26T23:05:30+01:00"
   xmp:CreatorTool="matplotlib 1.2.0, http://matplotlib.sf.net"
   pdf:Producer="matplotlib pdf backend"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[{Catalog} {Doc_Metadata} /Metadata pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
<</PageSize [612 792 ] >> setpagedevice
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -792 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
90 234 mo
90 558 li
522 558 li
522 234 li
cp
clp
[1 0 0 1 90 234 ]ct
0 324 mo
432 324 li
432 0 li
0 0 li
0 324 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
54 275.4 mo
410.4 275.4 li
410.4 32.4 li
54 32.4 li
54 275.4 li
f
gsave
54 275.4 mo
410.4 275.4 li
410.4 32.4 li
54 32.4 li
54 275.4 li
clp
gsave
53 276.4 mo
171.402 276.4 li
171.402 31.4 li
53 31.4 li
53 276.4 li
clp
169.902 274.9 mo
54.5 274.9 li
54.5 32.9001 li
169.902 32.9001 li
169.902 274.9 li
/1 
[/DeviceCMYK] /CSA add_res
0 .250492 .111238 0 cmyk
f
170.902 275.4 mo
54 275.4 li
54 32.4 li
170.902 32.4 li
170.902 32.4 li
170.902 275.4 li
54.5 274.9 mo
169.902 274.9 li
169.902 32.9001 li
54.5 32.9001 li
54.5 274.9 li
.535119 .450629 .450629 .100862 cmyk
f
grestore
grestore
gsave
54 275.4 mo
410.4 275.4 li
410.4 32.4 li
54 32.4 li
54 275.4 li
clp
1 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
54 150.988 mo
61.3762 152.241 li
68.1101 153.206 li
80.04 154.597 li
95.066 155.99 li
103.674 156.786 li
111.419 157.699 li
115.02 158.25 li
118.46 158.891 li
121.754 159.648 li
124.913 160.549 li
127.948 161.617 li
130.869 162.889 li
133.684 164.404 li
136.399 166.217 li
139.023 168.394 li
141.561 171.041 li
144.018 174.313 li
146.399 178.717 li
148.71 184.577 li
150.953 192.435 li
153.133 201.974 li
157.317 222.857 li
159.328 225.925 li
161.287 212.444 li
163.198 203.306 li
165.063 204.762 li
166.884 211.404 li
168.663 216.223 li
170.402 210.439 li
172.103 196.963 li
173.768 188.68 li
175.397 183.783 li
176.993 180.844 li
178.556 178.97 li
180.089 177.919 li
181.592 177.605 li
183.066 177.952 li
184.513 179.032 li
185.933 180.753 li
187.327 183.506 li
188.697 187.286 li
190.043 192.309 li
191.366 199.36 li
192.667 208.716 li
193.946 222.398 li
195.204 255.166 li
196.442 230.07 li
197.661 208.988 li
198.861 199.439 li
200.043 193.519 li
201.207 189.403 li
202.353 186.366 li
203.483 184.053 li
204.596 182.283 li
205.694 181.008 li
206.777 180.036 li
207.844 179.419 li
208.897 179.202 li
209.936 179.437 li
210.961 180.277 li
211.973 181.914 li
212.971 184.394 li
213.957 187.643 li
214.931 191.233 li
215.892 194.132 li
216.842 195.782 li
217.78 196.626 li
218.707 196.97 li
219.622 197.944 li
224.046 197.8 li
225.747 198.219 li
226.584 198.276 li
228.23 198.083 li
229.041 197.885 li
229.843 197.885 li
235.976 195.928 li
240.971 193.971 li
245.009 192.338 li
245.662 192.198 li
246.31 192.176 li
246.952 192.35 li
247.589 192.848 li
248.221 193.867 li
248.848 195.616 li
249.469 198.041 li
250.086 199.665 li
250.698 200.21 li
251.305 200.384 li
251.907 200.348 li
253.098 199.909 li
254.27 199.212 li
255.997 197.922 li
258.791 195.532 li
268.089 187.345 li
271.888 184.353 li
274.62 182.443 li
276.825 181.143 li
279.81 179.612 li
283.086 178.133 li
287.376 176.39 li
294.268 173.874 li
308.782 168.985 li
356.291 153.408 li
378.827 146.168 li
380.553 145.622 li
392.157 141.919 li
405.116 137.815 li
408.678 136.694 li
410.4 136.151 li
.946258 .780453 0 0 cmyk
@
grestore
gsave
54 275.4 mo
410.4 275.4 li
410.4 32.4 li
54 32.4 li
54 275.4 li
clp
1 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
54 142.209 mo
61.3762 144.315 li
68.1101 145.95 li
74.3047 147.246 li
85.3795 149.163 li
111.419 153.131 li
115.02 153.9 li
118.46 154.761 li
121.754 155.76 li
124.913 156.921 li
127.948 158.274 li
130.869 159.851 li
133.684 161.689 li
136.399 163.843 li
139.023 166.369 li
141.561 169.371 li
144.018 172.998 li
146.399 177.765 li
148.71 183.962 li
150.953 192.092 li
153.133 201.809 li
155.254 212.76 li
157.317 222.82 li
159.328 225.894 li
161.287 212.344 li
163.198 203.101 li
165.063 204.564 li
166.884 211.27 li
168.663 216.128 li
170.402 210.277 li
172.103 196.448 li
173.768 187.561 li
175.397 181.881 li
176.993 178.025 li
178.556 175.079 li
180.089 172.715 li
181.592 170.797 li
183.066 169.24 li
184.513 168.054 li
185.933 167.436 li
187.327 168.058 li
188.697 171.216 li
190.043 178.367 li
191.366 189.687 li
192.667 204.448 li
193.946 222.864 li
195.204 247.774 li
196.442 175.006 li
197.661 164.712 li
198.861 162.092 li
200.043 160.802 li
201.207 159.955 li
203.483 158.787 li
205.694 157.972 li
207.844 157.401 li
208.897 157.234 li
209.936 157.186 li
210.961 157.326 li
211.973 157.766 li
212.971 158.63 li
213.957 160.056 li
215.892 163.637 li
216.842 164.751 li
217.78 165.419 li
218.707 165.827 li
219.622 166.688 li
224.046 167.257 li
225.747 167.897 li
227.411 168.147 li
230.636 168.073 li
234.488 167.174 li
238.156 166.137 li
246.31 163.467 li
251.305 161.825 li
253.686 161.036 li
308.782 142.063 li
356.756 126.068 li
370.995 121.476 li
372.903 120.869 li
377.418 119.43 li
378.943 118.946 li
395.512 113.744 li
398.186 112.916 li
405.199 110.749 li
410.4 109.152 li
.402655 .941466 0 0 cmyk
@
grestore
gsave
54 275.4 mo
410.4 275.4 li
410.4 32.4 li
54 32.4 li
54 275.4 li
clp
1 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
54 142.084 mo
61.3762 144.207 li
68.1101 145.856 li
74.3047 147.159 li
85.3795 149.09 li
111.419 153.082 li
115.02 153.847 li
118.46 154.716 li
121.754 155.719 li
124.913 156.883 li
127.948 158.239 li
130.869 159.82 li
133.684 161.662 li
136.399 163.818 li
139.023 166.348 li
141.561 169.354 li
144.018 172.987 li
146.399 177.757 li
148.71 183.962 li
150.953 192.09 li
153.133 201.804 li
155.254 212.76 li
157.317 222.82 li
159.328 225.894 li
161.287 212.344 li
163.198 203.096 li
165.063 204.564 li
166.884 211.27 li
168.663 216.128 li
170.402 210.277 li
172.103 196.442 li
173.768 187.551 li
175.397 181.859 li
176.993 178.001 li
178.556 175.039 li
180.089 172.655 li
181.592 170.707 li
183.066 169.084 li
184.513 167.738 li
185.933 166.664 li
187.327 166.05 li
188.697 166.359 li
190.043 168.65 li
191.366 174.27 li
192.667 183.707 li
193.946 195.569 li
195.204 199.298 li
196.442 160.703 li
197.661 159.951 li
201.207 158.508 li
205.694 156.986 li
208.897 156.133 li
210.961 155.862 li
211.973 155.942 li
212.971 156.274 li
213.957 156.98 li
215.892 159.126 li
216.842 159.885 li
217.78 160.38 li
218.707 160.725 li
219.622 161.425 li
224.046 162.178 li
225.747 162.842 li
227.411 163.174 li
230.636 163.332 li
233.733 162.889 li
238.156 162.041 li
245.009 160.371 li
254.27 157.755 li
268.089 153.472 li
273.72 151.672 li
292.513 145.558 li
316.965 137.484 li
332.188 132.457 li
367.303 121.01 li
399.711 110.669 li
403.016 109.631 li
410.4 107.316 li
.306462 .137331 1 .00201419 cmyk
@
grestore
gsave
54 275.4 mo
410.4 275.4 li
410.4 32.4 li
54 32.4 li
54 275.4 li
clp
1 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
54 142.079 mo
61.3762 144.207 li
68.1101 145.856 li
74.3047 147.159 li
85.3795 149.09 li
111.419 153.082 li
115.02 153.847 li
118.46 154.716 li
121.754 155.719 li
124.913 156.883 li
127.948 158.239 li
130.869 159.82 li
133.684 161.662 li
136.399 163.818 li
139.023 166.352 li
141.561 169.354 li
144.018 172.987 li
146.399 177.757 li
148.71 183.962 li
150.953 192.09 li
153.133 201.804 li
155.254 212.76 li
157.317 222.82 li
159.328 225.894 li
161.287 212.344 li
163.198 203.096 li
165.063 204.564 li
166.884 211.27 li
168.663 216.128 li
170.402 210.277 li
172.103 196.442 li
173.768 187.551 li
175.397 181.859 li
176.993 178.001 li
178.556 175.039 li
180.089 172.655 li
181.592 170.702 li
183.066 169.072 li
184.513 167.689 li
185.933 166.492 li
187.327 165.508 li
188.697 164.754 li
190.043 164.454 li
191.366 165.172 li
192.667 168.012 li
193.946 173.554 li
195.204 163.091 li
196.442 160.384 li
200.043 158.902 li
204.596 157.291 li
207.844 156.326 li
209.936 155.871 li
210.961 155.763 li
211.973 155.809 li
212.971 156.091 li
213.957 156.721 li
215.892 158.702 li
216.842 159.415 li
217.78 159.889 li
218.707 160.223 li
219.622 160.898 li
224.046 161.669 li
225.747 162.332 li
227.411 162.672 li
230.636 162.858 li
233.733 162.453 li
238.156 161.655 li
245.009 160.054 li
253.686 157.676 li
267.601 153.446 li
283.486 148.385 li
326.91 134.123 li
342.894 128.869 li
365.25 121.59 li
381.907 116.233 li
384.221 115.495 li
393.709 112.475 li
399.355 110.684 li
405.364 108.788 li
410.4 107.208 li
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
54 275.4 mo
410.4 275.4 li
410.4 32.4 li
54 32.4 li
54 275.4 li
clp
1 lw
0 lc
1 lj
10 ml
[6 6 ] 0 dsh
true sadj
54 150.999 mo
61.3762 152.253 li
68.1101 153.231 li
80.04 154.627 li
95.066 156.031 li
103.674 156.837 li
111.419 157.758 li
115.02 158.311 li
118.46 158.955 li
121.754 159.713 li
124.913 160.614 li
127.948 161.681 li
130.869 162.952 li
133.684 164.463 li
136.399 166.271 li
139.023 168.441 li
141.561 171.08 li
144.018 174.344 li
146.399 178.743 li
148.71 184.593 li
150.953 192.445 li
153.133 201.979 li
157.317 222.859 li
159.328 225.928 li
161.287 212.444 li
163.198 203.312 li
165.063 204.769 li
166.884 211.404 li
168.663 216.224 li
170.402 210.449 li
172.103 196.977 li
173.768 188.708 li
175.397 183.821 li
176.993 180.916 li
178.556 179.05 li
180.089 178.034 li
181.592 177.733 li
183.066 178.116 li
184.513 179.193 li
185.933 180.967 li
187.327 183.682 li
188.697 187.537 li
190.043 192.494 li
191.366 199.514 li
192.667 208.843 li
193.946 222.498 li
195.204 255.163 li
196.442 229.922 li
197.661 208.792 li
198.861 199.106 li
200.043 193.06 li
201.207 188.806 li
202.353 185.625 li
203.483 183.162 li
204.596 181.205 li
205.694 179.714 li
206.777 178.494 li
207.844 177.589 li
208.897 176.991 li
209.936 176.758 li
210.961 176.968 li
211.973 177.806 li
212.971 179.319 li
213.957 181.523 li
214.931 184.131 li
215.892 186.309 li
216.842 187.507 li
217.78 188.028 li
218.707 188.111 li
219.622 188.743 li
223.181 188.109 li
224.901 188.156 li
226.584 188.151 li
228.23 187.883 li
229.843 187.593 li
232.2 187.209 li
234.488 187.019 li
238.156 186.369 li
242.34 185.43 li
243.686 185.282 li
244.351 185.365 li
245.009 185.636 li
245.662 186.205 li
246.31 187.23 li
246.952 188.907 li
247.589 191.454 li
248.221 195.063 li
250.086 208.1 li
250.698 209.398 li
251.305 210.08 li
251.907 210.439 li
252.505 210.603 li
253.686 210.565 li
254.85 210.23 li
256.564 209.434 li
258.791 208.084 li
262.016 205.82 li
268.089 201.224 li
275.509 195.662 li
281.055 191.87 li
286.996 188.068 li
294.614 183.519 li
302.491 179.121 li
320.01 170.262 li
329.594 165.827 li
342.894 160.047 li
350.135 157.048 li
363.568 151.705 li
374.396 147.56 li
377.772 146.331 li
392.255 140.979 li
406.43 135.842 li
410.4 134.412 li
.946258 .780453 0 0 cmyk
@
grestore
gsave
54 275.4 mo
410.4 275.4 li
410.4 32.4 li
54 32.4 li
54 275.4 li
clp
1 lw
0 lc
1 lj
10 ml
[6 6 ] 0 dsh
true sadj
54 142.209 mo
61.3762 144.322 li
68.1101 145.95 li
74.3047 147.246 li
85.3795 149.172 li
111.419 153.144 li
115.02 153.903 li
118.46 154.77 li
121.754 155.769 li
124.913 156.931 li
127.948 158.283 li
130.869 159.858 li
133.684 161.696 li
136.399 163.849 li
139.023 166.376 li
141.561 169.375 li
144.018 173.004 li
146.399 177.773 li
148.71 183.962 li
150.953 192.094 li
153.133 201.809 li
155.254 212.76 li
157.317 222.82 li
159.328 225.894 li
161.287 212.344 li
163.198 203.101 li
165.063 204.564 li
166.884 211.27 li
168.663 216.128 li
170.402 210.277 li
172.103 196.448 li
173.768 187.564 li
175.397 181.892 li
176.993 178.034 li
178.556 175.092 li
180.089 172.732 li
181.592 170.82 li
183.066 169.269 li
184.513 168.093 li
185.933 167.484 li
187.327 168.108 li
188.697 171.246 li
190.043 178.35 li
191.366 189.617 li
192.667 204.327 li
193.946 222.688 li
195.204 247.774 li
196.442 174.532 li
197.661 164.087 li
198.861 161.485 li
200.043 160.21 li
201.207 159.365 li
203.483 158.148 li
206.777 156.788 li
209.936 155.689 li
211.973 155.112 li
213.957 154.811 li
215.892 154.988 li
218.707 155.403 li
219.622 155.705 li
224.046 156.545 li
226.584 157.38 li
229.843 158.024 li
233.733 158.224 li
237.436 158.175 li
241.659 157.856 li
249.469 157.01 li
250.698 156.985 li
253.098 156.667 li
257.126 155.831 li
263.579 154.222 li
273.266 151.528 li
291.08 146.249 li
302.491 142.646 li
331.762 133.057 li
342.149 129.614 li
366.215 121.647 li
367.707 121.164 li
410.4 107.143 li
.402655 .941466 0 0 cmyk
@
grestore
gsave
54 275.4 mo
410.4 275.4 li
410.4 32.4 li
54 32.4 li
54 275.4 li
clp
1 lw
0 lc
1 lj
10 ml
[6 6 ] 0 dsh
true sadj
54 142.084 mo
61.3762 144.207 li
68.1101 145.856 li
74.3047 147.159 li
85.3795 149.09 li
111.419 153.082 li
115.02 153.847 li
118.46 154.716 li
121.754 155.719 li
124.913 156.885 li
127.948 158.241 li
130.869 159.82 li
133.684 161.662 li
136.399 163.818 li
139.023 166.352 li
141.561 169.354 li
144.018 172.987 li
146.399 177.757 li
148.71 183.962 li
150.953 192.09 li
153.133 201.804 li
155.254 212.76 li
157.317 222.82 li
159.328 225.894 li
161.287 212.344 li
163.198 203.096 li
165.063 204.564 li
166.884 211.27 li
168.663 216.128 li
170.402 210.277 li
172.103 196.445 li
173.768 187.551 li
175.397 181.859 li
176.993 178.001 li
178.556 175.039 li
180.089 172.655 li
181.592 170.707 li
183.066 169.08 li
184.513 167.708 li
185.933 166.55 li
187.327 165.678 li
188.697 165.244 li
190.043 165.781 li
191.366 168.362 li
192.667 173.91 li
193.946 184.496 li
195.204 199.298 li
196.442 160.564 li
197.661 159.862 li
201.207 158.442 li
205.694 156.906 li
208.897 156.007 li
210.961 155.657 li
211.973 155.661 li
212.971 155.88 li
213.957 156.422 li
216.842 158.854 li
219.622 160.262 li
224.046 161.052 li
225.747 161.715 li
227.411 162.065 li
230.636 162.285 li
233.733 161.929 li
238.156 161.193 li
244.351 159.845 li
253.098 157.555 li
264.605 154.167 li
281.874 148.773 li
359.344 123.433 li
361.266 122.819 li
367.707 120.73 li
410.4 107.097 li
.306462 .137331 1 .00201419 cmyk
@
grestore
gsave
54 275.4 mo
410.4 275.4 li
410.4 32.4 li
54 32.4 li
54 275.4 li
clp
1 lw
0 lc
1 lj
10 ml
[6 6 ] 0 dsh
true sadj
54 142.079 mo
61.3762 144.207 li
68.1101 145.856 li
74.3047 147.159 li
85.3795 149.09 li
111.419 153.082 li
115.02 153.847 li
118.46 154.716 li
121.754 155.719 li
124.913 156.883 li
127.948 158.239 li
130.869 159.82 li
133.684 161.662 li
136.399 163.818 li
139.023 166.352 li
141.561 169.354 li
144.018 172.987 li
146.399 177.757 li
148.71 183.962 li
150.953 192.09 li
153.133 201.804 li
155.254 212.76 li
157.317 222.82 li
159.328 225.894 li
161.287 212.344 li
163.198 203.096 li
165.063 204.564 li
166.884 211.27 li
168.663 216.128 li
170.402 210.277 li
172.103 196.442 li
173.768 187.551 li
175.397 181.859 li
176.993 178.001 li
178.556 175.039 li
180.089 172.655 li
181.592 170.702 li
183.066 169.072 li
184.513 167.685 li
185.933 166.478 li
188.697 164.584 li
190.043 163.95 li
191.366 163.804 li
192.667 164.769 li
193.946 167.651 li
195.204 163.089 li
196.442 160.371 li
200.043 158.897 li
204.596 157.285 li
207.844 156.315 li
209.936 155.856 li
210.961 155.743 li
211.973 155.781 li
212.971 156.05 li
213.957 156.665 li
215.892 158.609 li
216.842 159.312 li
217.78 159.779 li
218.707 160.113 li
219.622 160.782 li
224.046 161.556 li
225.747 162.22 li
227.411 162.562 li
230.636 162.754 li
233.733 162.358 li
238.156 161.57 li
244.351 160.155 li
253.098 157.792 li
264.094 154.494 li
281.055 149.145 li
292.867 145.308 li
299.954 142.993 li
311.607 139.155 li
398.818 110.834 li
402.074 109.807 li
410.4 107.185 li
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
54 275.4 mo
410.4 275.4 li
410.4 32.4 li
54 32.4 li
54 275.4 li
clp
1 lw
0 lc
1 lj
10 ml
[6 6 ] 0 dsh
true sadj
-1 122.756 mo
410.4 122.756 li
0 1 1 .00173953 cmyk
@
grestore
gsave
54 275.4 mo
410.4 275.4 li
410.4 32.4 li
54 32.4 li
54 275.4 li
clp
1 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
-1 122.03 mo
410.4 122.03 li
0 1 1 .00173953 cmyk
@
grestore
gsave
54 275.4 mo
410.4 275.4 li
410.4 32.4 li
54 32.4 li
54 275.4 li
clp
1 lw
0 lc
1 lj
10 ml
[6 6 ] 0 dsh
true sadj
-1 121.342 mo
410.4 121.342 li
0 1 1 .00173953 cmyk
@
grestore
54 275.4 mo
54 271.4 li
1 /0 /CSD get_res sepcs
1 sep
f
.5 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
54 275.4 mo
54 271.4 li
@
54 32.4 mo
54 36.4 li
f
54 32.4 mo
54 36.4 li
@
44.488 291.466 mo
46.42 291.466 li
46.42 284.794 li
44.32 285.215 li
44.32 284.134 li
46.408 283.715 li
47.596 283.715 li
47.596 291.466 li
49.528 291.466 li
49.528 292.462 li
44.488 292.462 li
44.488 291.466 li
f
54.4508 284.495 mo
53.8388 284.495 53.3828 284.794 53.0708 285.395 cv
52.7588 285.995 52.6148 286.895 52.6148 288.094 cv
52.6148 289.294 52.7588 290.194 53.0708 290.794 cv
53.3828 291.395 53.8388 291.694 54.4508 291.694 cv
55.0628 291.694 55.5188 291.395 55.8308 290.794 cv
56.1308 290.194 56.2868 289.294 56.2868 288.094 cv
56.2868 286.895 56.1308 285.995 55.8308 285.395 cv
55.5188 284.794 55.0628 284.495 54.4508 284.495 cv
54.4508 283.559 mo
55.4228 283.559 56.1668 283.954 56.6948 284.723 cv
57.2108 285.503 57.4748 286.63 57.4748 288.094 cv
57.4748 289.57 57.2108 290.698 56.6948 291.466 cv
56.1668 292.234 55.4228 292.618 54.4508 292.618 cv
53.4668 292.618 52.7108 292.234 52.1948 291.466 cv
51.6788 290.698 51.4268 289.57 51.4268 288.094 cv
51.4268 286.63 51.6788 285.503 52.1948 284.723 cv
52.7108 283.954 53.4668 283.559 54.4508 283.559 cv
f
59.3111 284.828 mo
60.6635 284.828 li
60.6635 280.157 li
59.1935 280.451 li
59.1935 279.695 li
60.6551 279.401 li
61.4867 279.401 li
61.4867 284.828 li
62.8391 284.828 li
62.8391 285.525 li
59.3111 285.525 li
59.3111 284.828 li
f
232.2 275.4 mo
232.2 271.4 li
f
232.2 275.4 mo
232.2 271.4 li
@
232.2 32.4 mo
232.2 36.4 li
f
232.2 32.4 mo
232.2 36.4 li
@
222.688 291.576 mo
224.62 291.576 li
224.62 284.904 li
222.52 285.324 li
222.52 284.244 li
224.608 283.824 li
225.796 283.824 li
225.796 291.576 li
227.728 291.576 li
227.728 292.572 li
222.688 292.572 li
222.688 291.576 li
f
232.651 284.604 mo
232.039 284.604 231.583 284.904 231.271 285.504 cv
230.959 286.104 230.815 287.004 230.815 288.204 cv
230.815 289.404 230.959 290.304 231.271 290.904 cv
231.583 291.504 232.039 291.804 232.651 291.804 cv
233.263 291.804 233.719 291.504 234.031 290.904 cv
234.331 290.304 234.487 289.404 234.487 288.204 cv
234.487 287.004 234.331 286.104 234.031 285.504 cv
233.719 284.904 233.263 284.604 232.651 284.604 cv
232.651 283.668 mo
233.623 283.668 234.367 284.064 234.895 284.832 cv
235.411 285.612 235.675 286.74 235.675 288.204 cv
235.675 289.68 235.411 290.808 234.895 291.576 cv
234.367 292.344 233.623 292.728 232.651 292.728 cv
231.667 292.728 230.911 292.344 230.395 291.576 cv
229.879 290.808 229.627 289.68 229.627 288.204 cv
229.627 286.74 229.879 285.612 230.395 284.832 cv
230.911 284.064 231.667 283.668 232.651 283.668 cv
f
238.082 284.937 mo
240.972 284.937 li
240.972 285.634 li
237.083 285.634 li
237.083 284.937 li
237.394 284.618 237.822 284.181 238.368 283.627 cv
238.906 283.081 239.25 282.728 239.393 282.568 cv
239.662 282.274 239.846 282.022 239.947 281.812 cv
240.048 281.611 240.107 281.401 240.107 281.199 cv
240.107 280.88 239.989 280.611 239.762 280.41 cv
239.536 280.208 239.242 280.099 238.872 280.099 cv
238.612 280.099 238.334 280.149 238.049 280.233 cv
237.763 280.326 237.452 280.46 237.125 280.645 cv
237.125 279.805 li
237.461 279.67 237.772 279.57 238.057 279.502 cv
238.343 279.435 238.612 279.402 238.855 279.402 cv
239.485 279.402 239.989 279.561 240.367 279.88 cv
240.745 280.2 240.938 280.62 240.938 281.149 cv
240.938 281.401 240.888 281.644 240.796 281.863 cv
240.703 282.09 240.535 282.358 240.283 282.661 cv
240.216 282.745 239.998 282.972 239.628 283.35 cv
239.258 283.728 238.746 284.257 238.082 284.937 cv
f
410.4 275.4 mo
410.4 271.4 li
f
410.4 275.4 mo
410.4 271.4 li
@
410.4 32.4 mo
410.4 36.4 li
f
410.4 32.4 mo
410.4 36.4 li
@
400.888 291.576 mo
402.82 291.576 li
402.82 284.904 li
400.72 285.324 li
400.72 284.244 li
402.808 283.824 li
403.996 283.824 li
403.996 291.576 li
405.928 291.576 li
405.928 292.572 li
400.888 292.572 li
400.888 291.576 li
f
410.851 284.604 mo
410.239 284.604 409.783 284.904 409.471 285.504 cv
409.159 286.104 409.015 287.004 409.015 288.204 cv
409.015 289.404 409.159 290.304 409.471 290.904 cv
409.783 291.504 410.239 291.804 410.851 291.804 cv
411.463 291.804 411.919 291.504 412.231 290.904 cv
412.531 290.304 412.687 289.404 412.687 288.204 cv
412.687 287.004 412.531 286.104 412.231 285.504 cv
411.919 284.904 411.463 284.604 410.851 284.604 cv
410.851 283.668 mo
411.823 283.668 412.567 284.064 413.095 284.832 cv
413.611 285.612 413.875 286.74 413.875 288.204 cv
413.875 289.68 413.611 290.808 413.095 291.576 cv
412.567 292.344 411.823 292.728 410.851 292.728 cv
409.867 292.728 409.111 292.344 408.595 291.576 cv
408.079 290.808 407.827 289.68 407.827 288.204 cv
407.827 286.74 408.079 285.612 408.595 284.832 cv
409.111 284.064 409.867 283.668 410.851 283.668 cv
f
418.08 282.333 mo
418.475 282.417 418.786 282.594 419.004 282.862 cv
419.222 283.131 419.34 283.467 419.34 283.854 cv
419.34 284.458 419.13 284.929 418.718 285.256 cv
418.298 285.584 417.71 285.744 416.946 285.744 cv
416.686 285.744 416.417 285.718 416.148 285.668 cv
415.879 285.626 415.594 285.55 415.308 285.45 cv
415.308 284.652 li
415.535 284.786 415.787 284.887 416.064 284.954 cv
416.333 285.021 416.618 285.055 416.921 285.055 cv
417.442 285.055 417.836 284.954 418.105 284.752 cv
418.374 284.551 418.517 284.248 418.517 283.854 cv
418.517 283.501 418.391 283.215 418.139 283.014 cv
417.887 282.812 417.534 282.703 417.08 282.703 cv
416.366 282.703 li
416.366 282.022 li
417.114 282.022 li
417.517 282.022 417.828 281.947 418.046 281.779 cv
418.265 281.619 418.374 281.384 418.374 281.073 cv
418.374 280.762 418.256 280.519 418.038 280.351 cv
417.811 280.183 417.492 280.099 417.08 280.099 cv
416.854 280.099 416.61 280.124 416.35 280.174 cv
416.089 280.225 415.804 280.3 415.493 280.401 cv
415.493 279.662 li
415.804 279.578 416.098 279.511 416.375 279.469 cv
416.644 279.427 416.904 279.402 417.156 279.402 cv
417.778 279.402 418.273 279.544 418.643 279.83 cv
419.012 280.116 419.197 280.502 419.197 280.989 cv
419.197 281.325 419.096 281.611 418.903 281.846 cv
418.71 282.081 418.433 282.249 418.08 282.333 cv
f
107.644 275.4 mo
107.644 273.4 li
f
107.644 275.4 mo
107.644 273.4 li
@
107.644 32.4 mo
107.644 34.4 li
f
107.644 32.4 mo
107.644 34.4 li
@
139.023 275.4 mo
139.023 273.4 li
f
139.023 275.4 mo
139.023 273.4 li
@
139.023 32.4 mo
139.023 34.4 li
f
139.023 32.4 mo
139.023 34.4 li
@
161.287 275.4 mo
161.287 273.4 li
f
161.287 275.4 mo
161.287 273.4 li
@
161.287 32.4 mo
161.287 34.4 li
f
161.287 32.4 mo
161.287 34.4 li
@
178.556 275.4 mo
178.556 273.4 li
f
178.556 275.4 mo
178.556 273.4 li
@
178.556 32.4 mo
178.556 34.4 li
f
178.556 32.4 mo
178.556 34.4 li
@
192.667 275.4 mo
192.667 273.4 li
f
192.667 275.4 mo
192.667 273.4 li
@
192.667 32.4 mo
192.667 34.4 li
f
192.667 32.4 mo
192.667 34.4 li
@
204.596 275.4 mo
204.596 273.4 li
f
204.596 275.4 mo
204.596 273.4 li
@
204.596 32.4 mo
204.596 34.4 li
f
204.596 32.4 mo
204.596 34.4 li
@
214.931 275.4 mo
214.931 273.4 li
f
214.931 275.4 mo
214.931 273.4 li
@
214.931 32.4 mo
214.931 34.4 li
f
214.931 32.4 mo
214.931 34.4 li
@
224.046 275.4 mo
224.046 273.4 li
f
224.046 275.4 mo
224.046 273.4 li
@
224.046 32.4 mo
224.046 34.4 li
f
224.046 32.4 mo
224.046 34.4 li
@
285.844 275.4 mo
285.844 273.4 li
f
285.844 275.4 mo
285.844 273.4 li
@
285.844 32.4 mo
285.844 34.4 li
f
285.844 32.4 mo
285.844 34.4 li
@
317.223 275.4 mo
317.223 273.4 li
f
317.223 275.4 mo
317.223 273.4 li
@
317.223 32.4 mo
317.223 34.4 li
f
317.223 32.4 mo
317.223 34.4 li
@
339.487 275.4 mo
339.487 273.4 li
f
339.487 275.4 mo
339.487 273.4 li
@
339.487 32.4 mo
339.487 34.4 li
f
339.487 32.4 mo
339.487 34.4 li
@
356.756 275.4 mo
356.756 273.4 li
f
356.756 275.4 mo
356.756 273.4 li
@
356.756 32.4 mo
356.756 34.4 li
f
356.756 32.4 mo
356.756 34.4 li
@
370.867 275.4 mo
370.867 273.4 li
f
370.867 275.4 mo
370.867 273.4 li
@
370.867 32.4 mo
370.867 34.4 li
f
370.867 32.4 mo
370.867 34.4 li
@
382.796 275.4 mo
382.796 273.4 li
f
382.796 275.4 mo
382.796 273.4 li
@
382.796 32.4 mo
382.796 34.4 li
f
382.796 32.4 mo
382.796 34.4 li
@
393.131 275.4 mo
393.131 273.4 li
f
393.131 275.4 mo
393.131 273.4 li
@
393.131 32.4 mo
393.131 34.4 li
f
393.131 32.4 mo
393.131 34.4 li
@
402.246 275.4 mo
402.246 273.4 li
f
402.246 275.4 mo
402.246 273.4 li
@
402.246 32.4 mo
402.246 34.4 li
f
402.246 32.4 mo
402.246 34.4 li
@
194.67 299.856 mo
196.875 299.856 li
199.665 307.296 li
202.47 299.856 li
204.675 299.856 li
204.675 310.791 li
203.235 310.791 li
203.235 301.191 li
200.415 308.691 li
198.93 308.691 li
196.11 301.191 li
196.11 310.791 li
194.67 310.791 li
194.67 299.856 li
f
214.377 305.841 mo
214.377 310.791 li
213.027 310.791 li
213.027 305.886 li
213.027 305.106 212.862 304.536 212.562 304.146 cv
212.262 303.756 211.812 303.561 211.212 303.561 cv
210.477 303.561 209.907 303.801 209.487 304.266 cv
209.067 304.731 208.857 305.361 208.857 306.156 cv
208.857 310.791 li
207.507 310.791 li
207.507 299.391 li
208.857 299.391 li
208.857 303.861 li
209.172 303.381 209.547 303.006 209.997 302.766 cv
210.432 302.526 210.942 302.391 211.512 302.391 cv
212.442 302.391 213.162 302.691 213.642 303.276 cv
214.122 303.861 214.377 304.716 214.377 305.841 cv
f
216.625 314.617 mo
216.625 314.25 li
217.497 314.25 217.938 314.145 217.938 313.914 cv
217.938 308.401 li
217.57 308.58 217.108 308.664 216.562 308.664 cv
216.562 308.296 li
217.413 308.296 218.064 308.076 218.505 307.624 cv
218.652 307.624 li
218.725 307.656 li
218.757 307.719 li
218.757 313.914 li
218.757 314.145 219.187 314.25 220.069 314.25 cv
220.069 314.617 li
216.625 314.617 li
f
232.567 299.406 mo
231.907 300.546 231.427 301.656 231.112 302.751 cv
230.782 303.846 230.632 304.956 230.632 306.081 cv
230.632 307.221 230.782 308.331 231.112 309.426 cv
231.427 310.536 231.907 311.631 232.567 312.756 cv
231.397 312.756 li
230.662 311.601 230.107 310.491 229.747 309.381 cv
229.387 308.271 229.207 307.176 229.207 306.081 cv
229.207 305.001 229.387 303.906 229.747 302.796 cv
230.107 301.686 230.647 300.561 231.397 299.406 cv
232.567 299.406 li
f
242.694 309.231 mo
242.694 306.291 li
240.279 306.291 li
240.279 305.076 li
244.164 305.076 li
244.164 309.771 li
243.594 310.191 242.964 310.491 242.274 310.686 cv
241.584 310.881 240.849 310.986 240.069 310.986 cv
238.359 310.986 237.009 310.491 236.049 309.501 cv
235.089 308.511 234.609 307.116 234.609 305.331 cv
234.609 303.561 235.089 302.166 236.049 301.161 cv
237.009 300.171 238.359 299.661 240.069 299.661 cv
240.774 299.661 241.449 299.751 242.094 299.931 cv
242.739 300.111 243.339 300.366 243.879 300.696 cv
243.879 302.271 li
243.324 301.821 242.739 301.476 242.124 301.236 cv
241.509 300.996 240.864 300.876 240.189 300.876 cv
238.839 300.876 237.834 301.251 237.174 302.001 cv
236.499 302.751 236.169 303.861 236.169 305.331 cv
236.169 306.816 236.499 307.926 237.174 308.676 cv
237.834 309.426 238.839 309.786 240.189 309.786 cv
240.699 309.786 241.164 309.741 241.584 309.651 cv
242.004 309.561 242.364 309.426 242.694 309.231 cv
f
253.822 306.351 mo
253.822 307.011 li
247.627 307.011 li
247.687 307.941 247.957 308.661 248.467 309.141 cv
248.962 309.621 249.652 309.861 250.552 309.861 cv
251.062 309.861 251.572 309.801 252.052 309.681 cv
252.532 309.561 253.027 309.366 253.507 309.096 cv
253.507 310.371 li
253.027 310.581 252.532 310.746 252.022 310.836 cv
251.512 310.926 250.987 310.986 250.477 310.986 cv
249.157 310.986 248.122 310.611 247.357 309.861 cv
246.592 309.111 246.217 308.076 246.217 306.771 cv
246.217 305.436 246.577 304.371 247.297 303.576 cv
248.017 302.796 249.007 302.391 250.237 302.391 cv
251.347 302.391 252.217 302.751 252.862 303.456 cv
253.492 304.176 253.822 305.136 253.822 306.351 cv
252.472 305.961 mo
252.457 305.226 252.247 304.641 251.857 304.191 cv
251.452 303.756 250.912 303.531 250.252 303.531 cv
249.502 303.531 248.902 303.756 248.452 304.176 cv
248.002 304.596 247.732 305.196 247.672 305.961 cv
252.472 305.961 li
f
258.911 310.791 mo
254.741 299.856 li
256.286 299.856 li
259.751 309.066 li
263.216 299.856 li
264.761 299.856 li
260.591 310.791 li
258.911 310.791 li
f
266.082 299.406 mo
267.252 299.406 li
267.972 300.561 268.527 301.686 268.887 302.796 cv
269.247 303.906 269.442 305.001 269.442 306.081 cv
269.442 307.176 269.247 308.271 268.887 309.381 cv
268.527 310.491 267.972 311.601 267.252 312.756 cv
266.082 312.756 li
266.727 311.631 267.207 310.536 267.537 309.426 cv
267.852 308.331 268.017 307.221 268.017 306.081 cv
268.017 304.956 267.852 303.846 267.537 302.751 cv
267.207 301.656 266.727 300.546 266.082 299.406 cv
f
54 275.4 mo
58 275.4 li
f
54 275.4 mo
58 275.4 li
@
410.4 275.4 mo
406.4 275.4 li
f
410.4 275.4 mo
406.4 275.4 li
@
26.488 280.076 mo
28.42 280.076 li
28.42 273.404 li
26.32 273.824 li
26.32 272.744 li
28.408 272.324 li
29.596 272.324 li
29.596 280.076 li
31.528 280.076 li
31.528 281.072 li
26.488 281.072 li
26.488 280.076 li
f
36.4508 273.104 mo
35.8388 273.104 35.3828 273.404 35.0708 274.004 cv
34.7588 274.604 34.6148 275.504 34.6148 276.704 cv
34.6148 277.904 34.7588 278.804 35.0708 279.404 cv
35.3828 280.004 35.8388 280.304 36.4508 280.304 cv
37.0628 280.304 37.5188 280.004 37.8308 279.404 cv
38.1308 278.804 38.2868 277.904 38.2868 276.704 cv
38.2868 275.504 38.1308 274.604 37.8308 274.004 cv
37.5188 273.404 37.0628 273.104 36.4508 273.104 cv
36.4508 272.168 mo
37.4228 272.168 38.1668 272.564 38.6948 273.332 cv
39.2108 274.112 39.4748 275.24 39.4748 276.704 cv
39.4748 278.18 39.2108 279.308 38.6948 280.076 cv
38.1668 280.844 37.4228 281.228 36.4508 281.228 cv
35.4668 281.228 34.7108 280.844 34.1948 280.076 cv
33.6788 279.308 33.4268 278.18 33.4268 276.704 cv
33.4268 275.24 33.6788 274.112 34.1948 273.332 cv
34.7108 272.564 35.4668 272.168 36.4508 272.168 cv
f
40.6811 271.497 mo
42.8903 271.497 li
42.8903 272.169 li
40.6811 272.169 li
40.6811 271.497 li
f
46.0726 270.741 mo
45.703 270.741 45.409 270.875 45.1906 271.127 cv
44.9722 271.379 44.863 271.732 44.863 272.169 cv
44.863 272.614 44.9722 272.967 45.1906 273.219 cv
45.409 273.471 45.703 273.597 46.0726 273.597 cv
46.4422 273.597 46.7362 273.471 46.9546 273.219 cv
47.173 272.967 47.2822 272.614 47.2822 272.169 cv
47.2822 271.732 47.173 271.379 46.9546 271.127 cv
46.7362 270.875 46.4422 270.741 46.0726 270.741 cv
47.719 268.145 mo
47.719 268.901 li
47.509 268.8 47.299 268.725 47.089 268.674 cv
46.8706 268.624 46.6606 268.599 46.459 268.599 cv
45.9046 268.599 45.4846 268.784 45.199 269.153 cv
44.9134 269.523 44.7454 270.086 44.7118 270.825 cv
44.8714 270.59 45.073 270.405 45.3166 270.279 cv
45.5602 270.153 45.829 270.086 46.123 270.086 cv
46.7362 270.086 47.2234 270.279 47.5762 270.648 cv
47.929 271.018 48.1138 271.53 48.1138 272.169 cv
48.1138 272.799 47.9206 273.303 47.551 273.681 cv
47.1814 274.059 46.6858 274.244 46.0726 274.244 cv
45.367 274.244 44.821 273.975 44.4514 273.437 cv
44.0734 272.9 43.8886 272.11 43.8886 271.077 cv
43.8886 270.111 44.1154 269.338 44.5774 268.767 cv
45.031 268.196 45.6526 267.902 46.4254 267.902 cv
46.627 267.902 46.837 267.927 47.0554 267.96 cv
47.2654 268.002 47.4838 268.061 47.719 268.145 cv
f
54 245.025 mo
58 245.025 li
f
54 245.025 mo
58 245.025 li
@
410.4 245.025 mo
406.4 245.025 li
f
410.4 245.025 mo
406.4 245.025 li
@
26.488 249.591 mo
28.42 249.591 li
28.42 242.919 li
26.32 243.339 li
26.32 242.259 li
28.408 241.839 li
29.596 241.839 li
29.596 249.591 li
31.528 249.591 li
31.528 250.587 li
26.488 250.587 li
26.488 249.591 li
f
36.4508 242.619 mo
35.8388 242.619 35.3828 242.919 35.0708 243.52 cv
34.7588 244.119 34.6148 245.02 34.6148 246.219 cv
34.6148 247.419 34.7588 248.319 35.0708 248.919 cv
35.3828 249.52 35.8388 249.819 36.4508 249.819 cv
37.0628 249.819 37.5188 249.52 37.8308 248.919 cv
38.1308 248.319 38.2868 247.419 38.2868 246.219 cv
38.2868 245.02 38.1308 244.119 37.8308 243.52 cv
37.5188 242.919 37.0628 242.619 36.4508 242.619 cv
36.4508 241.683 mo
37.4228 241.683 38.1668 242.079 38.6948 242.847 cv
39.2108 243.627 39.4748 244.755 39.4748 246.219 cv
39.4748 247.695 39.2108 248.823 38.6948 249.591 cv
38.1668 250.359 37.4228 250.743 36.4508 250.743 cv
35.4668 250.743 34.7108 250.359 34.1948 249.591 cv
33.6788 248.823 33.4268 247.695 33.4268 246.219 cv
33.4268 244.755 33.6788 243.627 34.1948 242.847 cv
34.7108 242.079 35.4668 241.683 36.4508 241.683 cv
f
40.6811 241.012 mo
42.8903 241.012 li
42.8903 241.684 li
40.6811 241.684 li
40.6811 241.012 li
f
44.2078 237.526 mo
47.4586 237.526 li
47.4586 238.224 li
44.9638 238.224 li
44.9638 239.727 li
45.0814 239.685 45.2074 239.652 45.325 239.635 cv
45.4426 239.618 45.5686 239.601 45.6862 239.601 cv
46.3666 239.601 46.9042 239.794 47.3074 240.164 cv
47.7106 240.542 47.9122 241.046 47.9122 241.684 cv
47.9122 242.348 47.7022 242.86 47.2906 243.222 cv
46.879 243.583 46.2994 243.759 45.5602 243.759 cv
45.2998 243.759 45.0394 243.734 44.7706 243.7 cv
44.5018 243.658 44.233 243.6 43.9474 243.507 cv
43.9474 242.676 li
44.191 242.81 44.443 242.911 44.7118 242.978 cv
44.9722 243.045 45.2494 243.07 45.5434 243.07 cv
46.0138 243.07 46.3918 242.953 46.669 242.701 cv
46.9378 242.449 47.0806 242.113 47.0806 241.684 cv
47.0806 241.264 46.9378 240.928 46.669 240.676 cv
46.3918 240.424 46.0138 240.298 45.5434 240.298 cv
45.325 240.298 45.0982 240.324 44.8798 240.374 cv
44.6614 240.424 44.4346 240.5 44.2078 240.601 cv
44.2078 237.526 li
f
54 214.65 mo
58 214.65 li
f
54 214.65 mo
58 214.65 li
@
410.4 214.65 mo
406.4 214.65 li
f
410.4 214.65 mo
406.4 214.65 li
@
26.488 219.216 mo
28.42 219.216 li
28.42 212.544 li
26.32 212.964 li
26.32 211.884 li
28.408 211.464 li
29.596 211.464 li
29.596 219.216 li
31.528 219.216 li
31.528 220.212 li
26.488 220.212 li
26.488 219.216 li
f
36.4508 212.244 mo
35.8388 212.244 35.3828 212.544 35.0708 213.145 cv
34.7588 213.744 34.6148 214.645 34.6148 215.844 cv
34.6148 217.044 34.7588 217.944 35.0708 218.544 cv
35.3828 219.145 35.8388 219.444 36.4508 219.444 cv
37.0628 219.444 37.5188 219.145 37.8308 218.544 cv
38.1308 217.944 38.2868 217.044 38.2868 215.844 cv
38.2868 214.645 38.1308 213.744 37.8308 213.145 cv
37.5188 212.544 37.0628 212.244 36.4508 212.244 cv
36.4508 211.308 mo
37.4228 211.308 38.1668 211.704 38.6948 212.472 cv
39.2108 213.252 39.4748 214.38 39.4748 215.844 cv
39.4748 217.32 39.2108 218.448 38.6948 219.216 cv
38.1668 219.984 37.4228 220.368 36.4508 220.368 cv
35.4668 220.368 34.7108 219.984 34.1948 219.216 cv
33.6788 218.448 33.4268 217.32 33.4268 215.844 cv
33.4268 214.38 33.6788 213.252 34.1948 212.472 cv
34.7108 211.704 35.4668 211.308 36.4508 211.308 cv
f
40.6811 210.637 mo
42.8903 210.637 li
42.8903 211.309 li
40.6811 211.309 li
40.6811 210.637 li
f
46.4758 207.874 mo
44.3842 211.141 li
46.4758 211.141 li
46.4758 207.874 li
46.2574 207.151 mo
47.299 207.151 li
47.299 211.141 li
48.1726 211.141 li
48.1726 211.83 li
47.299 211.83 li
47.299 213.275 li
46.4758 213.275 li
46.4758 211.83 li
43.7122 211.83 li
43.7122 211.032 li
46.2574 207.151 li
f
54 184.275 mo
58 184.275 li
f
54 184.275 mo
58 184.275 li
@
410.4 184.275 mo
406.4 184.275 li
f
410.4 184.275 mo
406.4 184.275 li
@
26.488 188.951 mo
28.42 188.951 li
28.42 182.279 li
26.32 182.699 li
26.32 181.619 li
28.408 181.199 li
29.596 181.199 li
29.596 188.951 li
31.528 188.951 li
31.528 189.947 li
26.488 189.947 li
26.488 188.951 li
f
36.4508 181.979 mo
35.8388 181.979 35.3828 182.279 35.0708 182.879 cv
34.7588 183.479 34.6148 184.379 34.6148 185.579 cv
34.6148 186.779 34.7588 187.679 35.0708 188.279 cv
35.3828 188.879 35.8388 189.179 36.4508 189.179 cv
37.0628 189.179 37.5188 188.879 37.8308 188.279 cv
38.1308 187.679 38.2868 186.779 38.2868 185.579 cv
38.2868 184.379 38.1308 183.479 37.8308 182.879 cv
37.5188 182.279 37.0628 181.979 36.4508 181.979 cv
36.4508 181.043 mo
37.4228 181.043 38.1668 181.439 38.6948 182.207 cv
39.2108 182.987 39.4748 184.115 39.4748 185.579 cv
39.4748 187.055 39.2108 188.183 38.6948 188.951 cv
38.1668 189.719 37.4228 190.103 36.4508 190.103 cv
35.4668 190.103 34.7108 189.719 34.1948 188.951 cv
33.6788 188.183 33.4268 187.055 33.4268 185.579 cv
33.4268 184.115 33.6788 182.987 34.1948 182.207 cv
34.7108 181.439 35.4668 181.043 36.4508 181.043 cv
f
40.6811 180.372 mo
42.8903 180.372 li
42.8903 181.044 li
40.6811 181.044 li
40.6811 180.372 li
f
46.711 179.708 mo
47.1058 179.792 47.4166 179.969 47.635 180.237 cv
47.8534 180.506 47.971 180.842 47.971 181.229 cv
47.971 181.833 47.761 182.304 47.3494 182.631 cv
46.9294 182.959 46.3414 183.119 45.577 183.119 cv
45.3166 183.119 45.0478 183.093 44.779 183.043 cv
44.5102 183.001 44.2246 182.925 43.939 182.825 cv
43.939 182.027 li
44.1658 182.161 44.4178 182.262 44.695 182.329 cv
44.9638 182.396 45.2494 182.43 45.5518 182.43 cv
46.0726 182.43 46.4674 182.329 46.7362 182.127 cv
47.005 181.926 47.1478 181.623 47.1478 181.229 cv
47.1478 180.876 47.0218 180.59 46.7698 180.389 cv
46.5178 180.187 46.165 180.078 45.7114 180.078 cv
44.9974 180.078 li
44.9974 179.397 li
45.745 179.397 li
46.1482 179.397 46.459 179.322 46.6774 179.154 cv
46.8958 178.994 47.005 178.759 47.005 178.448 cv
47.005 178.137 46.8874 177.894 46.669 177.726 cv
46.4422 177.558 46.123 177.474 45.7114 177.474 cv
45.4846 177.474 45.241 177.499 44.9806 177.549 cv
44.7202 177.6 44.4346 177.675 44.1238 177.776 cv
44.1238 177.037 li
44.4346 176.953 44.7286 176.886 45.0058 176.844 cv
45.2746 176.802 45.535 176.777 45.787 176.777 cv
46.4086 176.777 46.9042 176.919 47.2738 177.205 cv
47.6434 177.491 47.8282 177.877 47.8282 178.364 cv
47.8282 178.7 47.7274 178.986 47.5342 179.221 cv
47.341 179.456 47.0638 179.624 46.711 179.708 cv
f
54 153.9 mo
58 153.9 li
f
54 153.9 mo
58 153.9 li
@
410.4 153.9 mo
406.4 153.9 li
f
410.4 153.9 mo
406.4 153.9 li
@
26.488 158.576 mo
28.42 158.576 li
28.42 151.904 li
26.32 152.324 li
26.32 151.244 li
28.408 150.824 li
29.596 150.824 li
29.596 158.576 li
31.528 158.576 li
31.528 159.572 li
26.488 159.572 li
26.488 158.576 li
f
36.4508 151.604 mo
35.8388 151.604 35.3828 151.904 35.0708 152.504 cv
34.7588 153.104 34.6148 154.004 34.6148 155.204 cv
34.6148 156.404 34.7588 157.304 35.0708 157.904 cv
35.3828 158.504 35.8388 158.804 36.4508 158.804 cv
37.0628 158.804 37.5188 158.504 37.8308 157.904 cv
38.1308 157.304 38.2868 156.404 38.2868 155.204 cv
38.2868 154.004 38.1308 153.104 37.8308 152.504 cv
37.5188 151.904 37.0628 151.604 36.4508 151.604 cv
36.4508 150.668 mo
37.4228 150.668 38.1668 151.064 38.6948 151.832 cv
39.2108 152.612 39.4748 153.74 39.4748 155.204 cv
39.4748 156.68 39.2108 157.808 38.6948 158.576 cv
38.1668 159.344 37.4228 159.728 36.4508 159.728 cv
35.4668 159.728 34.7108 159.344 34.1948 158.576 cv
33.6788 157.808 33.4268 156.68 33.4268 155.204 cv
33.4268 153.74 33.6788 152.612 34.1948 151.832 cv
34.7108 151.064 35.4668 150.668 36.4508 150.668 cv
f
40.6811 149.997 mo
42.8903 149.997 li
42.8903 150.669 li
40.6811 150.669 li
40.6811 149.997 li
f
44.9134 151.937 mo
47.803 151.937 li
47.803 152.634 li
43.9138 152.634 li
43.9138 151.937 li
44.2246 151.618 44.653 151.181 45.199 150.627 cv
45.7366 150.081 46.081 149.728 46.2238 149.568 cv
46.4926 149.274 46.6774 149.022 46.7782 148.812 cv
46.879 148.611 46.9378 148.401 46.9378 148.199 cv
46.9378 147.88 46.8202 147.611 46.5934 147.41 cv
46.3666 147.208 46.0726 147.099 45.703 147.099 cv
45.4426 147.099 45.1654 147.149 44.8798 147.233 cv
44.5942 147.326 44.2834 147.46 43.9558 147.645 cv
43.9558 146.805 li
44.2918 146.67 44.6026 146.57 44.8882 146.502 cv
45.1738 146.435 45.4426 146.402 45.6862 146.402 cv
46.3162 146.402 46.8202 146.561 47.1982 146.88 cv
47.5762 147.2 47.7694 147.62 47.7694 148.149 cv
47.7694 148.401 47.719 148.644 47.6266 148.863 cv
47.5342 149.09 47.3662 149.358 47.1142 149.661 cv
47.047 149.745 46.8286 149.972 46.459 150.35 cv
46.0894 150.728 45.577 151.257 44.9134 151.937 cv
f
54 123.525 mo
58 123.525 li
f
54 123.525 mo
58 123.525 li
@
410.4 123.525 mo
406.4 123.525 li
f
410.4 123.525 mo
406.4 123.525 li
@
26.488 128.091 mo
28.42 128.091 li
28.42 121.419 li
26.32 121.839 li
26.32 120.759 li
28.408 120.339 li
29.596 120.339 li
29.596 128.091 li
31.528 128.091 li
31.528 129.087 li
26.488 129.087 li
26.488 128.091 li
f
36.4508 121.119 mo
35.8388 121.119 35.3828 121.419 35.0708 122.019 cv
34.7588 122.619 34.6148 123.519 34.6148 124.719 cv
34.6148 125.919 34.7588 126.819 35.0708 127.419 cv
35.3828 128.02 35.8388 128.319 36.4508 128.319 cv
37.0628 128.319 37.5188 128.02 37.8308 127.419 cv
38.1308 126.819 38.2868 125.919 38.2868 124.719 cv
38.2868 123.519 38.1308 122.619 37.8308 122.019 cv
37.5188 121.419 37.0628 121.119 36.4508 121.119 cv
36.4508 120.183 mo
37.4228 120.183 38.1668 120.579 38.6948 121.347 cv
39.2108 122.127 39.4748 123.255 39.4748 124.719 cv
39.4748 126.195 39.2108 127.323 38.6948 128.091 cv
38.1668 128.859 37.4228 129.243 36.4508 129.243 cv
35.4668 129.243 34.7108 128.859 34.1948 128.091 cv
33.6788 127.323 33.4268 126.195 33.4268 124.719 cv
33.4268 123.255 33.6788 122.127 34.1948 121.347 cv
34.7108 120.579 35.4668 120.183 36.4508 120.183 cv
f
40.6811 119.512 mo
42.8903 119.512 li
42.8903 120.184 li
40.6811 120.184 li
40.6811 119.512 li
f
44.3422 121.453 mo
45.6946 121.453 li
45.6946 116.782 li
44.2246 117.076 li
44.2246 116.32 li
45.6862 116.026 li
46.5178 116.026 li
46.5178 121.453 li
47.8702 121.453 li
47.8702 122.15 li
44.3422 122.15 li
44.3422 121.453 li
f
54 93.15 mo
58 93.15 li
f
54 93.15 mo
58 93.15 li
@
410.4 93.15 mo
406.4 93.15 li
f
410.4 93.15 mo
406.4 93.15 li
@
29.488 97.8259 mo
31.42 97.8259 li
31.42 91.1539 li
29.32 91.5739 li
29.32 90.4939 li
31.408 90.0739 li
32.596 90.0739 li
32.596 97.8259 li
34.528 97.8259 li
34.528 98.8219 li
29.488 98.8219 li
29.488 97.8259 li
f
39.4508 90.8539 mo
38.8388 90.8539 38.3828 91.1539 38.0708 91.7539 cv
37.7588 92.3539 37.6148 93.2539 37.6148 94.4539 cv
37.6148 95.6539 37.7588 96.5539 38.0708 97.1539 cv
38.3828 97.7539 38.8388 98.0539 39.4508 98.0539 cv
40.0628 98.0539 40.5188 97.7539 40.8308 97.1539 cv
41.1308 96.5539 41.2868 95.6539 41.2868 94.4539 cv
41.2868 93.2539 41.1308 92.3539 40.8308 91.7539 cv
40.5188 91.1539 40.0628 90.8539 39.4508 90.8539 cv
39.4508 89.9179 mo
40.4228 89.9179 41.1668 90.3139 41.6948 91.0819 cv
42.2108 91.8619 42.4748 92.9899 42.4748 94.4539 cv
42.4748 95.9299 42.2108 97.0579 41.6948 97.8259 cv
41.1668 98.5939 40.4228 98.9779 39.4508 98.9779 cv
38.4668 98.9779 37.7108 98.5939 37.1948 97.8259 cv
36.6788 97.0579 36.4268 95.9299 36.4268 94.4539 cv
36.4268 92.9899 36.6788 91.8619 37.1948 91.0819 cv
37.7108 90.3139 38.4668 89.9179 39.4508 89.9179 cv
f
45.9407 86.3068 mo
45.5123 86.3068 45.1931 86.5168 44.9747 86.9368 cv
44.7563 87.3568 44.6555 87.9868 44.6555 88.8268 cv
44.6555 89.6668 44.7563 90.2968 44.9747 90.7168 cv
45.1931 91.1368 45.5123 91.3468 45.9407 91.3468 cv
46.3691 91.3468 46.6883 91.1368 46.9067 90.7168 cv
47.1167 90.2968 47.2259 89.6668 47.2259 88.8268 cv
47.2259 87.9868 47.1167 87.3568 46.9067 86.9368 cv
46.6883 86.5168 46.3691 86.3068 45.9407 86.3068 cv
45.9407 85.6516 mo
46.6211 85.6516 47.1419 85.9288 47.5115 86.4664 cv
47.8727 87.0124 48.0575 87.802 48.0575 88.8268 cv
48.0575 89.86 47.8727 90.6496 47.5115 91.1872 cv
47.1419 91.7248 46.6211 91.9936 45.9407 91.9936 cv
45.2519 91.9936 44.7227 91.7248 44.3615 91.1872 cv
44.0003 90.6496 43.8239 89.86 43.8239 88.8268 cv
43.8239 87.802 44.0003 87.0124 44.3615 86.4664 cv
44.7227 85.9288 45.2519 85.6516 45.9407 85.6516 cv
f
54 62.775 mo
58 62.775 li
f
54 62.775 mo
58 62.775 li
@
410.4 62.775 mo
406.4 62.775 li
f
410.4 62.775 mo
406.4 62.775 li
@
29.488 67.3415 mo
31.42 67.3415 li
31.42 60.6695 li
29.32 61.0895 li
29.32 60.0095 li
31.408 59.5895 li
32.596 59.5895 li
32.596 67.3415 li
34.528 67.3415 li
34.528 68.3375 li
29.488 68.3375 li
29.488 67.3415 li
f
39.4508 60.3695 mo
38.8388 60.3695 38.3828 60.6695 38.0708 61.2695 cv
37.7588 61.8695 37.6148 62.7695 37.6148 63.9695 cv
37.6148 65.1695 37.7588 66.0695 38.0708 66.6695 cv
38.3828 67.2695 38.8388 67.5695 39.4508 67.5695 cv
40.0628 67.5695 40.5188 67.2695 40.8308 66.6695 cv
41.1308 66.0695 41.2868 65.1695 41.2868 63.9695 cv
41.2868 62.7695 41.1308 61.8695 40.8308 61.2695 cv
40.5188 60.6695 40.0628 60.3695 39.4508 60.3695 cv
39.4508 59.4335 mo
40.4228 59.4335 41.1668 59.8295 41.6948 60.5975 cv
42.2108 61.3775 42.4748 62.5055 42.4748 63.9695 cv
42.4748 65.4455 42.2108 66.5735 41.6948 67.3415 cv
41.1668 68.1095 40.4228 68.4935 39.4508 68.4935 cv
38.4668 68.4935 37.7108 68.1095 37.1948 67.3415 cv
36.6788 66.5735 36.4268 65.4455 36.4268 63.9695 cv
36.4268 62.5055 36.6788 61.3775 37.1948 60.5975 cv
37.7108 59.8295 38.4668 59.4335 39.4508 59.4335 cv
f
44.3111 60.7028 mo
45.6635 60.7028 li
45.6635 56.0324 li
44.1935 56.3264 li
44.1935 55.5704 li
45.6551 55.2764 li
46.4867 55.2764 li
46.4867 60.7028 li
47.8391 60.7028 li
47.8391 61.4 li
44.3111 61.4 li
44.3111 60.7028 li
f
54 32.4 mo
58 32.4 li
f
54 32.4 mo
58 32.4 li
@
410.4 32.4 mo
406.4 32.4 li
f
410.4 32.4 mo
406.4 32.4 li
@
29.488 37.0759 mo
31.42 37.0759 li
31.42 30.4039 li
29.32 30.8239 li
29.32 29.7439 li
31.408 29.3239 li
32.596 29.3239 li
32.596 37.0759 li
34.528 37.0759 li
34.528 38.0719 li
29.488 38.0719 li
29.488 37.0759 li
f
39.4508 30.1039 mo
38.8388 30.1039 38.3828 30.4039 38.0708 31.0039 cv
37.7588 31.6039 37.6148 32.5039 37.6148 33.7039 cv
37.6148 34.9039 37.7588 35.8039 38.0708 36.4039 cv
38.3828 37.0039 38.8388 37.3039 39.4508 37.3039 cv
40.0628 37.3039 40.5188 37.0039 40.8308 36.4039 cv
41.1308 35.8039 41.2868 34.9039 41.2868 33.7039 cv
41.2868 32.5039 41.1308 31.6039 40.8308 31.0039 cv
40.5188 30.4039 40.0628 30.1039 39.4508 30.1039 cv
39.4508 29.1679 mo
40.4228 29.1679 41.1668 29.5639 41.6948 30.3319 cv
42.2108 31.1119 42.4748 32.2399 42.4748 33.7039 cv
42.4748 35.1799 42.2108 36.3079 41.6948 37.0759 cv
41.1668 37.8439 40.4228 38.2279 39.4508 38.2279 cv
38.4668 38.2279 37.7108 37.8439 37.1948 37.0759 cv
36.6788 36.3079 36.4268 35.1799 36.4268 33.7039 cv
36.4268 32.2399 36.6788 31.1119 37.1948 30.3319 cv
37.7108 29.5639 38.4668 29.1679 39.4508 29.1679 cv
f
44.8823 30.4372 mo
47.7719 30.4372 li
47.7719 31.1344 li
43.8827 31.1344 li
43.8827 30.4372 li
44.1935 30.118 44.6219 29.6812 45.1679 29.1268 cv
45.7055 28.5808 46.0499 28.228 46.1927 28.0684 cv
46.4615 27.7744 46.6463 27.5224 46.7471 27.3124 cv
46.8479 27.1108 46.9067 26.9008 46.9067 26.6992 cv
46.9067 26.38 46.7891 26.1112 46.5623 25.9096 cv
46.3355 25.708 46.0415 25.5988 45.6719 25.5988 cv
45.4115 25.5988 45.1343 25.6492 44.8487 25.7332 cv
44.5631 25.8256 44.2523 25.96 43.9247 26.1448 cv
43.9247 25.3048 li
44.2607 25.1704 44.5715 25.0696 44.8571 25.0024 cv
45.1427 24.9352 45.4115 24.9016 45.6551 24.9016 cv
46.2851 24.9016 46.7891 25.0612 47.1671 25.3804 cv
47.5451 25.6996 47.7383 26.1196 47.7383 26.6488 cv
47.7383 26.9008 47.6879 27.1444 47.5955 27.3628 cv
47.5031 27.5896 47.3351 27.8584 47.0831 28.1608 cv
47.0159 28.2448 46.7975 28.4716 46.4279 28.8496 cv
46.0583 29.2276 45.5459 29.7568 44.8823 30.4372 cv
f
54 266.256 mo
56 266.256 li
f
54 266.256 mo
56 266.256 li
@
410.4 266.256 mo
408.4 266.256 li
f
410.4 266.256 mo
408.4 266.256 li
@
54 257.112 mo
56 257.112 li
f
54 257.112 mo
56 257.112 li
@
410.4 257.112 mo
408.4 257.112 li
f
410.4 257.112 mo
408.4 257.112 li
@
54 251.764 mo
56 251.764 li
f
54 251.764 mo
56 251.764 li
@
410.4 251.764 mo
408.4 251.764 li
f
410.4 251.764 mo
408.4 251.764 li
@
54 247.969 mo
56 247.969 li
f
54 247.969 mo
56 247.969 li
@
410.4 247.969 mo
408.4 247.969 li
f
410.4 247.969 mo
408.4 247.969 li
@
54 235.881 mo
56 235.881 li
f
54 235.881 mo
56 235.881 li
@
410.4 235.881 mo
408.4 235.881 li
f
410.4 235.881 mo
408.4 235.881 li
@
54 226.737 mo
56 226.737 li
f
54 226.737 mo
56 226.737 li
@
410.4 226.737 mo
408.4 226.737 li
f
410.4 226.737 mo
408.4 226.737 li
@
54 221.389 mo
56 221.389 li
f
54 221.389 mo
56 221.389 li
@
410.4 221.389 mo
408.4 221.389 li
f
410.4 221.389 mo
408.4 221.389 li
@
54 217.594 mo
56 217.594 li
f
54 217.594 mo
56 217.594 li
@
410.4 217.594 mo
408.4 217.594 li
f
410.4 217.594 mo
408.4 217.594 li
@
54 205.506 mo
56 205.506 li
f
54 205.506 mo
56 205.506 li
@
410.4 205.506 mo
408.4 205.506 li
f
410.4 205.506 mo
408.4 205.506 li
@
54 196.362 mo
56 196.362 li
f
54 196.362 mo
56 196.362 li
@
410.4 196.362 mo
408.4 196.362 li
f
410.4 196.362 mo
408.4 196.362 li
@
54 191.014 mo
56 191.014 li
f
54 191.014 mo
56 191.014 li
@
410.4 191.014 mo
408.4 191.014 li
f
410.4 191.014 mo
408.4 191.014 li
@
54 187.219 mo
56 187.219 li
f
54 187.219 mo
56 187.219 li
@
410.4 187.219 mo
408.4 187.219 li
f
410.4 187.219 mo
408.4 187.219 li
@
54 175.131 mo
56 175.131 li
f
54 175.131 mo
56 175.131 li
@
410.4 175.131 mo
408.4 175.131 li
f
410.4 175.131 mo
408.4 175.131 li
@
54 165.987 mo
56 165.987 li
f
54 165.987 mo
56 165.987 li
@
410.4 165.987 mo
408.4 165.987 li
f
410.4 165.987 mo
408.4 165.987 li
@
54 160.639 mo
56 160.639 li
f
54 160.639 mo
56 160.639 li
@
410.4 160.639 mo
408.4 160.639 li
f
410.4 160.639 mo
408.4 160.639 li
@
54 156.844 mo
56 156.844 li
f
54 156.844 mo
56 156.844 li
@
410.4 156.844 mo
408.4 156.844 li
f
410.4 156.844 mo
408.4 156.844 li
@
54 144.756 mo
56 144.756 li
f
54 144.756 mo
56 144.756 li
@
410.4 144.756 mo
408.4 144.756 li
f
410.4 144.756 mo
408.4 144.756 li
@
54 135.612 mo
56 135.612 li
f
54 135.612 mo
56 135.612 li
@
410.4 135.612 mo
408.4 135.612 li
f
410.4 135.612 mo
408.4 135.612 li
@
54 130.264 mo
56 130.264 li
f
54 130.264 mo
56 130.264 li
@
410.4 130.264 mo
408.4 130.264 li
f
410.4 130.264 mo
408.4 130.264 li
@
54 126.469 mo
56 126.469 li
f
54 126.469 mo
56 126.469 li
@
410.4 126.469 mo
408.4 126.469 li
f
410.4 126.469 mo
408.4 126.469 li
@
54 114.381 mo
56 114.381 li
f
54 114.381 mo
56 114.381 li
@
410.4 114.381 mo
408.4 114.381 li
f
410.4 114.381 mo
408.4 114.381 li
@
54 105.237 mo
56 105.237 li
f
54 105.237 mo
56 105.237 li
@
410.4 105.237 mo
408.4 105.237 li
f
410.4 105.237 mo
408.4 105.237 li
@
54 99.8887 mo
56 99.8887 li
f
54 99.8887 mo
56 99.8887 li
@
410.4 99.8887 mo
408.4 99.8887 li
f
410.4 99.8887 mo
408.4 99.8887 li
@
54 96.0936 mo
56 96.0936 li
f
54 96.0936 mo
56 96.0936 li
@
410.4 96.0936 mo
408.4 96.0936 li
f
410.4 96.0936 mo
408.4 96.0936 li
@
54 84.0062 mo
56 84.0062 li
f
54 84.0062 mo
56 84.0062 li
@
410.4 84.0062 mo
408.4 84.0062 li
f
410.4 84.0062 mo
408.4 84.0062 li
@
54 74.8624 mo
56 74.8624 li
f
54 74.8624 mo
56 74.8624 li
@
410.4 74.8624 mo
408.4 74.8624 li
f
410.4 74.8624 mo
408.4 74.8624 li
@
54 69.5137 mo
56 69.5137 li
f
54 69.5137 mo
56 69.5137 li
@
410.4 69.5137 mo
408.4 69.5137 li
f
410.4 69.5137 mo
408.4 69.5137 li
@
54 65.7186 mo
56 65.7186 li
f
54 65.7186 mo
56 65.7186 li
@
410.4 65.7186 mo
408.4 65.7186 li
f
410.4 65.7186 mo
408.4 65.7186 li
@
54 53.6312 mo
56 53.6312 li
f
54 53.6312 mo
56 53.6312 li
@
410.4 53.6312 mo
408.4 53.6312 li
f
410.4 53.6312 mo
408.4 53.6312 li
@
54 44.4874 mo
56 44.4874 li
f
54 44.4874 mo
56 44.4874 li
@
410.4 44.4874 mo
408.4 44.4874 li
f
410.4 44.4874 mo
408.4 44.4874 li
@
54 39.1386 mo
56 39.1386 li
f
54 39.1386 mo
56 39.1386 li
@
410.4 39.1386 mo
408.4 39.1386 li
f
410.4 39.1386 mo
408.4 39.1386 li
@
54 35.3436 mo
56 35.3436 li
f
54 35.3436 mo
56 35.3436 li
@
410.4 35.3436 mo
408.4 35.3436 li
f
410.4 35.3436 mo
408.4 35.3436 li
@
10.4389 213.74 mo
10.5589 213.425 10.7839 213.11 11.1289 212.81 cv
11.4889 212.51 11.9689 212.21 12.5839 211.91 cv
15.5689 210.41 li
15.5689 212 li
12.7639 213.395 li
12.0439 213.755 11.5489 214.115 11.3089 214.445 cv
11.0689 214.79 10.9489 215.255 10.9489 215.84 cv
10.9489 217.445 li
15.5689 217.445 li
15.5689 218.93 li
4.63391 218.93 li
4.63391 215.585 li
4.63391 214.34 4.90391 213.41 5.41391 212.795 cv
5.93891 212.18 6.73391 211.865 7.78391 211.865 cv
8.47391 211.865 9.05891 212.03 9.50891 212.345 cv
9.95891 212.675 10.2739 213.14 10.4389 213.74 cv
5.84891 217.445 mo
9.73391 217.445 li
9.73391 215.585 li
9.73391 214.88 9.56891 214.34 9.23891 213.98 cv
8.90891 213.62 8.42891 213.425 7.78391 213.425 cv
7.15391 213.425 6.67391 213.62 6.34391 213.98 cv
6.01391 214.34 5.84891 214.88 5.84891 215.585 cv
5.84891 217.445 li
f
11.1289 201.548 mo
11.7889 201.548 li
11.7889 207.743 li
12.7189 207.683 13.4389 207.413 13.9189 206.903 cv
14.3989 206.408 14.6389 205.718 14.6389 204.818 cv
14.6389 204.308 14.5789 203.798 14.4589 203.318 cv
14.3389 202.838 14.1439 202.343 13.8739 201.863 cv
15.1489 201.863 li
15.3589 202.343 15.5239 202.838 15.6139 203.348 cv
15.7039 203.858 15.7639 204.383 15.7639 204.893 cv
15.7639 206.213 15.3889 207.248 14.6389 208.013 cv
13.8889 208.778 12.8539 209.153 11.5489 209.153 cv
10.2139 209.153 9.14891 208.793 8.35391 208.073 cv
7.57391 207.353 7.16891 206.363 7.16891 205.133 cv
7.16891 204.023 7.52891 203.153 8.23391 202.508 cv
8.95391 201.878 9.91391 201.548 11.1289 201.548 cv
10.7389 202.898 mo
10.0039 202.913 9.41891 203.123 8.96891 203.513 cv
8.53391 203.918 8.30891 204.458 8.30891 205.118 cv
8.30891 205.868 8.53391 206.468 8.95391 206.918 cv
9.37391 207.368 9.97391 207.638 10.7389 207.698 cv
10.7389 202.898 li
f
4.16891 199.339 mo
4.16891 197.989 li
15.5689 197.989 li
15.5689 199.339 li
4.16891 199.339 li
f
7.36391 195.172 mo
7.36391 193.822 li
15.5689 193.822 li
15.5689 195.172 li
7.36391 195.172 li
4.16891 195.172 mo
4.16891 193.822 li
5.87891 193.822 li
5.87891 195.172 li
4.16891 195.172 li
f
7.67891 185.094 mo
8.93891 185.094 li
8.72891 185.484 8.57891 185.859 8.47391 186.249 cv
8.36891 186.639 8.30891 187.014 8.30891 187.404 cv
8.30891 188.274 8.59391 188.964 9.14891 189.444 cv
9.70391 189.924 10.4839 190.164 11.4739 190.164 cv
12.4789 190.164 13.2589 189.924 13.8139 189.444 cv
14.3689 188.964 14.6389 188.274 14.6389 187.404 cv
14.6389 187.014 14.5939 186.639 14.4889 186.249 cv
14.3839 185.859 14.2189 185.484 14.0089 185.094 cv
15.2539 185.094 li
15.4339 185.484 15.5689 185.874 15.6439 186.264 cv
15.7189 186.669 15.7639 187.104 15.7639 187.554 cv
15.7639 188.784 15.3889 189.774 14.6089 190.494 cv
13.8439 191.229 12.7939 191.589 11.4739 191.589 cv
10.1389 191.589 9.08891 191.229 8.32391 190.494 cv
7.55891 189.759 7.16891 188.754 7.16891 187.464 cv
7.16891 187.044 7.21391 186.639 7.30391 186.249 cv
7.39391 185.859 7.51391 185.469 7.67891 185.094 cv
f
5.84891 176.444 mo
14.3539 176.444 li
14.3539 174.659 li
14.3539 173.159 14.0239 172.049 13.3339 171.344 cv
12.6439 170.654 11.5639 170.294 10.0939 170.294 cv
8.62391 170.294 7.55891 170.654 6.86891 171.344 cv
6.19391 172.049 5.84891 173.159 5.84891 174.659 cv
5.84891 176.444 li
4.63391 177.929 mo
4.63391 174.884 li
4.63391 172.769 5.08391 171.209 5.95391 170.219 cv
6.83891 169.229 8.21891 168.734 10.0939 168.734 cv
11.9839 168.734 13.3639 169.244 14.2489 170.234 cv
15.1339 171.224 15.5689 172.784 15.5689 174.884 cv
15.5689 177.929 li
4.63391 177.929 li
f
11.1289 159.419 mo
11.7889 159.419 li
11.7889 165.614 li
12.7189 165.554 13.4389 165.284 13.9189 164.774 cv
14.3989 164.279 14.6389 163.589 14.6389 162.689 cv
14.6389 162.179 14.5789 161.669 14.4589 161.189 cv
14.3389 160.709 14.1439 160.214 13.8739 159.734 cv
15.1489 159.734 li
15.3589 160.214 15.5239 160.709 15.6139 161.219 cv
15.7039 161.729 15.7639 162.254 15.7639 162.764 cv
15.7639 164.084 15.3889 165.119 14.6389 165.884 cv
13.8889 166.649 12.8539 167.024 11.5489 167.024 cv
10.2139 167.024 9.14891 166.664 8.35391 165.944 cv
7.57391 165.224 7.16891 164.234 7.16891 163.004 cv
7.16891 161.894 7.52891 161.024 8.23391 160.379 cv
8.95391 159.749 9.91391 159.419 11.1289 159.419 cv
10.7389 160.769 mo
10.0039 160.784 9.41891 160.994 8.96891 161.384 cv
8.53391 161.789 8.30891 162.329 8.30891 162.989 cv
8.30891 163.739 8.53391 164.339 8.95391 164.789 cv
9.37391 165.239 9.97391 165.509 10.7389 165.569 cv
10.7389 160.769 li
f
10.6189 150.385 mo
15.5689 150.385 li
15.5689 151.735 li
10.6639 151.735 li
9.88391 151.735 9.31391 151.9 8.92391 152.2 cv
8.53391 152.5 8.33891 152.95 8.33891 153.55 cv
8.33891 154.285 8.57891 154.855 9.04391 155.275 cv
9.50891 155.695 10.1389 155.905 10.9339 155.905 cv
15.5689 155.905 li
15.5689 157.255 li
7.36391 157.255 li
7.36391 155.905 li
8.63891 155.905 li
8.15891 155.59 7.78391 155.215 7.54391 154.765 cv
7.30391 154.33 7.16891 153.82 7.16891 153.25 cv
7.16891 152.32 7.46891 151.6 8.05391 151.12 cv
8.63891 150.64 9.49391 150.385 10.6189 150.385 cv
f
7.60391 142.468 mo
8.87891 142.468 li
8.69891 142.858 8.54891 143.248 8.44391 143.653 cv
8.35391 144.073 8.29391 144.493 8.29391 144.928 cv
8.29391 145.603 8.39891 146.113 8.60891 146.443 cv
8.81891 146.773 9.11891 146.938 9.52391 146.938 cv
9.83891 146.938 10.0789 146.818 10.2589 146.578 cv
10.4389 146.338 10.6189 145.858 10.7689 145.138 cv
10.8739 144.673 li
11.0839 143.713 11.3839 143.038 11.7439 142.633 cv
12.1189 142.243 12.6439 142.033 13.3039 142.033 cv
14.0689 142.033 14.6689 142.333 15.1039 142.933 cv
15.5539 143.533 15.7639 144.373 15.7639 145.423 cv
15.7639 145.873 15.7189 146.323 15.6439 146.803 cv
15.5689 147.283 15.4489 147.778 15.2689 148.303 cv
13.8739 148.303 li
14.1439 147.808 14.3389 147.313 14.4589 146.833 cv
14.5939 146.353 14.6539 145.873 14.6539 145.393 cv
14.6539 144.763 14.5489 144.268 14.3389 143.923 cv
14.1289 143.593 13.8139 143.413 13.4089 143.413 cv
13.0489 143.413 12.7639 143.548 12.5689 143.788 cv
12.3739 144.028 12.1789 144.568 11.9989 145.408 cv
11.8939 145.873 li
11.7139 146.713 11.4439 147.328 11.0839 147.688 cv
10.7239 148.063 10.2289 148.243 9.58391 148.243 cv
8.81891 148.243 8.21891 147.973 7.79891 147.433 cv
7.37891 146.893 7.16891 146.113 7.16891 145.093 cv
7.16891 144.598 7.21391 144.133 7.28891 143.683 cv
7.36391 143.248 7.46891 142.843 7.60391 142.468 cv
f
7.36391 139.888 mo
7.36391 138.538 li
15.5689 138.538 li
15.5689 139.888 li
7.36391 139.888 li
4.16891 139.888 mo
4.16891 138.538 li
5.87891 138.538 li
5.87891 139.888 li
4.16891 139.888 li
f
5.03891 134.386 mo
7.36391 134.386 li
7.36391 131.611 li
8.41391 131.611 li
8.41391 134.386 li
12.8689 134.386 li
13.5439 134.386 13.9789 134.296 14.1589 134.116 cv
14.3539 133.936 14.4439 133.561 14.4439 132.991 cv
14.4439 131.611 li
15.5689 131.611 li
15.5689 132.991 li
15.5689 134.041 15.3739 134.761 14.9839 135.151 cv
14.5939 135.541 13.8889 135.736 12.8689 135.736 cv
8.41391 135.736 li
8.41391 136.726 li
7.36391 136.726 li
7.36391 135.736 li
5.03891 135.736 li
5.03891 134.386 li
f
16.3189 126.42 mo
17.2789 126.81 17.9239 127.185 18.2239 127.545 cv
18.5239 127.905 18.6739 128.385 18.6739 128.985 cv
18.6739 130.065 li
17.5489 130.065 li
17.5489 129.27 li
17.5489 128.91 17.4589 128.625 17.2789 128.415 cv
17.0989 128.205 16.6939 127.98 16.0339 127.725 cv
15.4339 127.485 li
7.36391 130.8 li
7.36391 129.375 li
13.7839 126.81 li
7.36391 124.245 li
7.36391 122.82 li
16.3189 126.42 li
f
15.5689 116.45 mo
13.0789 116.945 li
13.0789 116.51 li
13.3789 116.45 13.6339 116.405 13.8439 116.36 cv
14.0689 116.33 14.2189 116.27 14.3089 116.195 cv
14.3989 116.12 14.4589 116 14.4889 115.85 cv
14.5189 115.7 14.5339 115.43 14.5339 115.07 cv
14.5339 114.155 li
13.9789 114.305 13.2439 114.68 12.3289 115.25 cv
11.4139 115.835 10.7539 116.24 10.3339 116.45 cv
9.92891 116.66 9.40391 116.765 8.74391 116.765 cv
7.99391 116.765 7.31891 116.54 6.74891 116.09 cv
6.17891 115.64 5.74391 115.07 5.44391 114.35 cv
5.14391 113.645 4.99391 112.925 4.99391 112.19 cv
4.99391 111.47 5.14391 110.765 5.44391 110.045 cv
5.74391 109.34 6.19391 108.755 6.76391 108.305 cv
7.33391 107.855 7.99391 107.63 8.74391 107.63 cv
9.25391 107.63 9.73391 107.735 10.1839 107.915 cv
10.6339 108.095 11.0839 108.335 11.5339 108.62 cv
11.9839 108.92 12.4789 109.235 13.0339 109.565 cv
13.5889 109.895 14.0839 110.12 14.5339 110.24 cv
14.5339 109.325 li
14.5339 108.965 14.5189 108.71 14.4889 108.545 cv
14.4589 108.38 14.3989 108.26 14.3089 108.2 cv
14.2189 108.14 14.0689 108.08 13.8439 108.035 cv
13.6339 107.99 13.3789 107.945 13.0789 107.885 cv
13.0789 107.45 li
15.5689 107.945 li
15.5689 110.6 li
15.5689 110.705 15.5089 110.75 15.3739 110.75 cv
14.8639 110.75 14.3689 110.69 13.8739 110.57 cv
13.3939 110.45 12.7939 110.255 12.1039 110.015 cv
11.4139 109.775 10.8139 109.58 10.2739 109.445 cv
9.74891 109.31 9.23891 109.235 8.74391 109.235 cv
8.14391 109.235 7.58891 109.355 7.07891 109.595 cv
6.56891 109.835 6.14891 110.165 5.84891 110.615 cv
5.54891 111.065 5.38391 111.59 5.38391 112.19 cv
5.38391 113.105 5.71391 113.825 6.35891 114.365 cv
7.01891 114.905 7.81391 115.16 8.74391 115.16 cv
9.25391 115.16 9.74891 115.1 10.1989 114.98 cv
10.6489 114.86 11.2639 114.68 12.0139 114.41 cv
12.7639 114.155 13.3939 113.96 13.8739 113.84 cv
14.3689 113.72 14.8639 113.645 15.3739 113.645 cv
15.5089 113.645 15.5689 113.705 15.5689 113.795 cv
15.5689 116.45 li
f
15.2989 105.977 mo
15.1639 105.962 li
6.49391 103.787 li
6.32891 103.757 6.19391 103.727 6.08891 103.712 cv
5.93891 103.712 5.84891 104.042 5.84891 104.687 cv
5.84891 104.792 5.78891 104.837 5.65391 104.837 cv
5.51891 104.807 li
5.38391 104.747 li
5.32391 104.627 li
5.15891 102.602 li
5.15891 102.557 li
5.20391 102.512 li
5.23391 102.452 li
5.35391 102.422 li
10.0339 103.592 li
9.31391 102.992 8.93891 102.257 8.93891 101.402 cv
8.93891 101.057 9.01391 100.757 9.13391 100.502 cv
9.25391 100.247 9.44891 100.052 9.68891 99.9021 cv
9.92891 99.7521 10.2289 99.6771 10.5589 99.6771 cv
10.9789 99.6771 11.4739 99.7671 12.0439 99.9471 cv
12.6289 100.127 13.2739 100.367 13.9939 100.637 cv
14.3239 100.787 14.6239 100.847 14.8939 100.847 cv
15.1939 100.847 15.3439 100.742 15.3439 100.502 cv
15.3439 100.112 15.1339 99.7971 14.7139 99.5271 cv
14.2939 99.2721 13.8439 99.0921 13.3639 98.9721 cv
13.2739 98.8521 li
13.2739 98.6721 li
13.3189 98.5821 li
13.4089 98.5371 li
13.4539 98.5521 li
13.8139 98.6421 14.1739 98.7771 14.5189 98.9571 cv
14.8789 99.1371 15.1639 99.3471 15.3889 99.6021 cv
15.5989 99.8721 15.7189 100.172 15.7189 100.532 cv
15.7189 100.892 15.5989 101.192 15.3739 101.432 cv
15.1339 101.687 14.8489 101.807 14.4889 101.807 cv
14.3089 101.807 14.1139 101.777 13.9039 101.687 cv
13.1539 101.417 12.4939 101.177 11.8939 100.982 cv
11.3089 100.802 10.7839 100.697 10.3339 100.697 cv
10.0489 100.697 9.80891 100.757 9.61391 100.877 cv
9.43391 100.997 9.32891 101.177 9.32891 101.432 cv
9.32891 101.972 9.49391 102.452 9.82391 102.842 cv
10.1539 103.247 10.5889 103.592 11.1289 103.877 cv
15.2239 104.897 li
15.3739 104.942 15.4939 105.017 15.5839 105.122 cv
15.6739 105.242 15.7189 105.362 15.7189 105.512 cv
15.7189 105.647 15.6739 105.752 15.5989 105.842 cv
15.5239 105.932 15.4189 105.977 15.2989 105.977 cv
f
8.98906 97.6045 mo
8.70556 97.6045 li
8.65306 97.5835 li
6.84706 95.956 li
6.58456 95.7145 6.36406 95.515 6.17506 95.3575 cv
5.99656 95.2105 5.78656 95.053 5.55556 94.906 cv
5.32456 94.759 5.08306 94.633 4.83106 94.549 cv
4.58956 94.465 4.32706 94.4125 4.05406 94.4125 cv
3.77056 94.4125 3.49756 94.465 3.23506 94.57 cv
2.97256 94.675 2.76256 94.8325 2.60506 95.0425 cv
2.44756 95.2525 2.36356 95.515 2.36356 95.809 cv
2.36356 96.1135 2.45806 96.3865 2.63656 96.628 cv
2.82556 96.88 3.05656 97.048 3.35056 97.1425 cv
3.34006 97.027 li
3.34006 96.88 3.39256 96.7435 3.49756 96.628 cv
3.60256 96.523 3.73906 96.46 3.90706 96.46 cv
4.07506 96.46 4.21156 96.523 4.31656 96.628 cv
4.43206 96.7435 4.48456 96.88 4.48456 97.027 cv
4.48456 97.195 4.43206 97.3315 4.31656 97.4365 cv
4.20106 97.552 4.06456 97.6045 3.90706 97.6045 cv
3.65506 97.6045 3.40306 97.5625 3.17206 97.4575 cv
2.94106 97.363 2.74156 97.2265 2.55256 97.0375 cv
2.37406 96.8485 2.23756 96.6385 2.14306 96.4075 cv
2.04856 96.1765 1.99606 95.9245 1.99606 95.6515 cv
1.99606 95.2525 2.08006 94.885 2.24806 94.5385 cv
2.41606 94.192 2.65756 93.919 2.97256 93.7195 cv
3.28756 93.52 3.64456 93.415 4.05406 93.415 cv
4.35856 93.415 4.64206 93.4885 4.91506 93.6145 cv
5.18806 93.751 5.44006 93.919 5.66056 94.129 cv
5.89156 94.339 6.14356 94.6015 6.42706 94.927 cv
6.71056 95.2525 6.89956 95.4625 6.99406 95.5675 cv
8.13856 96.754 li
8.13856 95.746 li
8.13856 95.2525 8.13856 94.843 8.12806 94.507 cv
8.12806 94.171 8.10706 93.9925 8.08606 93.9715 cv
8.00206 93.8875 7.67656 93.8035 7.12006 93.7195 cv
7.12006 93.415 li
8.98906 93.709 li
8.98906 97.6045 li
f
1 lw
2 lc
54 32.4 mo
410.4 32.4 li
@
410.4 275.4 mo
410.4 32.4 li
@
54 275.4 mo
410.4 275.4 li
@
54 275.4 mo
54 32.4 li
@
65.868 134.837 mo
71.4 134.837 li
71.4 135.833 li
67.056 135.833 li
67.056 138.425 li
71.22 138.425 li
71.22 139.421 li
67.056 139.421 li
67.056 142.589 li
71.508 142.589 li
71.508 143.585 li
65.868 143.585 li
65.868 134.837 li
0 1 1 .00173953 cmyk
f
78.864 137.021 mo
76.488 140.213 li
78.984 143.585 li
77.712 143.585 li
75.804 141.005 li
73.896 143.585 li
72.624 143.585 li
75.168 140.153 li
72.84 137.021 li
74.112 137.021 li
75.852 139.361 li
77.592 137.021 li
78.864 137.021 li
f
85.236 137.273 mo
85.236 138.281 li
84.924 138.113 84.624 137.993 84.312 137.909 cv
84 137.825 83.7 137.777 83.388 137.777 cv
82.692 137.777 82.14 138.005 81.756 138.449 cv
81.372 138.893 81.18 139.517 81.18 140.309 cv
81.18 141.113 81.372 141.737 81.756 142.181 cv
82.14 142.625 82.692 142.841 83.388 142.841 cv
83.7 142.841 84 142.805 84.312 142.721 cv
84.624 142.637 84.924 142.505 85.236 142.337 cv
85.236 143.333 li
84.924 143.477 84.612 143.585 84.3 143.645 cv
83.976 143.705 83.628 143.741 83.268 143.741 cv
82.284 143.741 81.492 143.441 80.916 142.817 cv
80.328 142.205 80.04 141.365 80.04 140.309 cv
80.04 139.241 80.328 138.401 80.916 137.789 cv
81.504 137.177 82.308 136.865 83.34 136.865 cv
83.676 136.865 84 136.901 84.312 136.973 cv
84.624 137.045 84.936 137.141 85.236 137.273 cv
f
87.108 134.465 mo
88.188 134.465 li
88.188 143.585 li
87.108 143.585 li
87.108 134.465 li
f
90.336 140.993 mo
90.336 137.021 li
91.416 137.021 li
91.416 140.957 li
91.416 141.581 91.536 142.037 91.776 142.349 cv
92.016 142.661 92.376 142.817 92.868 142.817 cv
93.444 142.817 93.912 142.637 94.248 142.265 cv
94.584 141.893 94.752 141.389 94.752 140.741 cv
94.752 137.021 li
95.832 137.021 li
95.832 143.585 li
94.752 143.585 li
94.752 142.577 li
94.488 142.985 94.176 143.273 93.84 143.465 cv
93.492 143.645 93.096 143.741 92.64 143.741 cv
91.884 143.741 91.308 143.513 90.924 143.045 cv
90.528 142.589 90.336 141.905 90.336 140.993 cv
93.048 136.865 mo
93.048 136.865 li
f
102.372 138.017 mo
102.372 134.465 li
103.452 134.465 li
103.452 143.585 li
102.372 143.585 li
102.372 142.601 li
102.144 142.997 101.856 143.285 101.508 143.465 cv
101.16 143.645 100.752 143.741 100.272 143.741 cv
99.4801 143.741 98.8321 143.429 98.3281 142.805 cv
97.8241 142.181 97.5841 141.341 97.5841 140.309 cv
97.5841 139.277 97.8241 138.449 98.3281 137.813 cv
98.8321 137.189 99.4801 136.865 100.272 136.865 cv
100.752 136.865 101.16 136.961 101.508 137.153 cv
101.856 137.345 102.144 137.633 102.372 138.017 cv
98.7001 140.309 mo
98.7001 141.101 98.8561 141.725 99.1801 142.181 cv
99.5041 142.637 99.9601 142.853 100.536 142.853 cv
101.1 142.853 101.544 142.637 101.88 142.181 cv
102.204 141.725 102.372 141.101 102.372 140.309 cv
102.372 139.517 102.204 138.905 101.88 138.449 cv
101.544 137.993 101.1 137.765 100.536 137.765 cv
99.9601 137.765 99.5041 137.993 99.1801 138.449 cv
98.8561 138.905 98.7001 139.517 98.7001 140.309 cv
f
111.288 140.033 mo
111.288 140.561 li
106.332 140.561 li
106.38 141.305 106.596 141.881 107.004 142.265 cv
107.4 142.649 107.952 142.841 108.672 142.841 cv
109.08 142.841 109.488 142.793 109.872 142.697 cv
110.256 142.601 110.652 142.445 111.036 142.229 cv
111.036 143.249 li
110.652 143.417 110.256 143.549 109.848 143.621 cv
109.44 143.693 109.02 143.741 108.612 143.741 cv
107.556 143.741 106.728 143.441 106.116 142.841 cv
105.504 142.241 105.204 141.413 105.204 140.369 cv
105.204 139.301 105.492 138.449 106.068 137.813 cv
106.644 137.189 107.436 136.865 108.42 136.865 cv
109.308 136.865 110.004 137.153 110.52 137.717 cv
111.024 138.293 111.288 139.061 111.288 140.033 cv
110.208 139.721 mo
110.196 139.133 110.028 138.665 109.716 138.305 cv
109.392 137.957 108.96 137.777 108.432 137.777 cv
107.832 137.777 107.352 137.957 106.992 138.293 cv
106.632 138.629 106.416 139.109 106.368 139.721 cv
110.208 139.721 li
f
117.372 138.017 mo
117.372 134.465 li
118.452 134.465 li
118.452 143.585 li
117.372 143.585 li
117.372 142.601 li
117.144 142.997 116.856 143.285 116.508 143.465 cv
116.16 143.645 115.752 143.741 115.272 143.741 cv
114.48 143.741 113.832 143.429 113.328 142.805 cv
112.824 142.181 112.584 141.341 112.584 140.309 cv
112.584 139.277 112.824 138.449 113.328 137.813 cv
113.832 137.189 114.48 136.865 115.272 136.865 cv
115.752 136.865 116.16 136.961 116.508 137.153 cv
116.856 137.345 117.144 137.633 117.372 138.017 cv
113.7 140.309 mo
113.7 141.101 113.856 141.725 114.18 142.181 cv
114.504 142.637 114.96 142.853 115.536 142.853 cv
116.1 142.853 116.544 142.637 116.88 142.181 cv
117.204 141.725 117.372 141.101 117.372 140.309 cv
117.372 139.517 117.204 138.905 116.88 138.449 cv
116.544 137.993 116.1 137.765 115.536 137.765 cv
114.96 137.765 114.504 137.993 114.18 138.449 cv
113.856 138.905 113.7 139.517 113.7 140.309 cv
f
129.204 140.309 mo
129.204 139.517 129.036 138.905 128.712 138.449 cv
128.376 137.993 127.932 137.765 127.368 137.765 cv
126.792 137.765 126.348 137.993 126.024 138.449 cv
125.688 138.905 125.532 139.517 125.532 140.309 cv
125.532 141.101 125.688 141.725 126.024 142.181 cv
126.348 142.637 126.792 142.853 127.368 142.853 cv
127.932 142.853 128.376 142.637 128.712 142.181 cv
129.036 141.725 129.204 141.101 129.204 140.309 cv
125.532 138.017 mo
125.748 137.633 126.036 137.345 126.384 137.153 cv
126.732 136.961 127.152 136.865 127.632 136.865 cv
128.424 136.865 129.072 137.189 129.576 137.813 cv
130.068 138.449 130.32 139.277 130.32 140.309 cv
130.32 141.341 130.068 142.181 129.576 142.805 cv
129.072 143.429 128.424 143.741 127.632 143.741 cv
127.152 143.741 126.732 143.645 126.384 143.465 cv
126.036 143.285 125.748 142.997 125.532 142.601 cv
125.532 143.585 li
124.452 143.585 li
124.452 134.465 li
125.532 134.465 li
125.532 138.017 li
f
134.844 144.185 mo
134.532 144.953 134.232 145.469 133.944 145.709 cv
133.656 145.949 133.272 146.069 132.792 146.069 cv
131.928 146.069 li
131.928 145.169 li
132.564 145.169 li
132.852 145.169 133.08 145.097 133.248 144.953 cv
133.416 144.809 133.596 144.485 133.8 143.957 cv
133.992 143.477 li
131.34 137.021 li
132.48 137.021 li
134.532 142.157 li
136.584 137.021 li
137.724 137.021 li
134.844 144.185 li
f
143.076 134.837 mo
144.264 134.837 li
144.264 142.589 li
148.524 142.589 li
148.524 143.585 li
143.076 143.585 li
143.076 134.837 li
f
149.76 134.837 mo
155.292 134.837 li
155.292 135.833 li
150.948 135.833 li
150.948 138.425 li
155.112 138.425 li
155.112 139.421 li
150.948 139.421 li
150.948 142.589 li
155.4 142.589 li
155.4 143.585 li
149.76 143.585 li
149.76 134.837 li
f
158.532 135.809 mo
158.532 139.097 li
160.02 139.097 li
160.572 139.097 160.992 138.965 161.292 138.677 cv
161.592 138.389 161.748 137.981 161.748 137.453 cv
161.748 136.925 161.592 136.529 161.292 136.241 cv
160.992 135.953 160.572 135.809 160.02 135.809 cv
158.532 135.809 li
157.344 134.837 mo
160.02 134.837 li
160.992 134.837 161.736 135.065 162.24 135.509 cv
162.744 135.953 162.996 136.601 162.996 137.453 cv
162.996 138.317 162.744 138.977 162.24 139.409 cv
161.736 139.853 160.992 140.069 160.02 140.069 cv
158.532 140.069 li
158.532 143.585 li
157.344 143.585 li
157.344 134.837 li
f
150.934 26.7906 mo
150.834 26.7906 150.79 26.733 150.79 26.6034 cv
150.819 26.4882 li
150.862 26.3442 li
150.978 26.2866 li
151.885 26.2866 152.418 25.9986 152.576 25.4082 cv
154.448 17.8914 li
154.477 17.6898 li
154.477 17.589 154.419 17.5314 154.304 17.517 cv
154.117 17.4882 153.771 17.4594 153.267 17.4594 cv
153.166 17.4594 153.123 17.4018 153.123 17.2722 cv
153.152 17.1426 li
153.21 17.013 li
153.31 16.9554 li
155.845 16.9554 li
155.946 16.9554 156.003 17.013 156.032 17.1138 cv
157.155 25.365 li
162.397 17.1138 li
162.454 17.013 162.555 16.9554 162.67 16.9554 cv
165.118 16.9554 li
165.205 16.9554 165.262 17.0274 165.262 17.1426 cv
165.219 17.2722 li
165.162 17.4162 li
165.075 17.4594 li
164.485 17.4594 164.082 17.5026 163.851 17.5602 cv
163.722 17.6034 163.635 17.733 163.578 17.949 cv
161.605 25.8546 li
161.576 25.9554 161.576 26.0274 161.576 26.0562 cv
161.59 26.157 li
161.634 26.2002 li
161.749 26.229 li
161.922 26.2722 162.267 26.2866 162.786 26.2866 cv
162.872 26.2866 162.93 26.3586 162.93 26.4738 cv
162.886 26.6178 162.858 26.7042 162.843 26.733 cv
162.685 26.7906 li
158.926 26.7906 li
158.826 26.7906 158.782 26.733 158.782 26.6034 cv
158.811 26.4738 li
158.869 26.3442 li
158.97 26.2866 li
159.546 26.2866 159.963 26.2578 160.194 26.1858 cv
160.309 26.157 160.41 26.0274 160.467 25.797 cv
162.541 17.4594 li
156.723 26.6322 li
156.666 26.7474 156.565 26.7906 156.435 26.7906 cv
156.306 26.7906 156.234 26.7474 156.234 26.6322 cv
155.01 17.5746 li
153.037 25.4658 li
153.008 25.5666 li
152.994 25.6818 li
152.994 25.941 153.094 26.0994 153.31 26.1714 cv
153.526 26.2578 153.8 26.2866 154.117 26.2866 cv
154.203 26.2866 154.261 26.3586 154.261 26.4738 cv
154.232 26.6034 154.203 26.6898 154.174 26.733 cv
154.016 26.7906 li
150.934 26.7906 li
1 /0 /CSD get_res sepcs
1 sep
f
164.696 30.2825 mo
164.706 30.1918 li
166.168 24.3656 li
166.188 24.2547 166.208 24.164 166.218 24.0934 cv
166.218 23.9926 165.997 23.9321 165.563 23.9321 cv
165.493 23.9321 165.462 23.8918 165.462 23.8011 cv
165.482 23.7104 li
165.523 23.6196 li
165.603 23.5793 li
166.964 23.4684 li
166.994 23.4684 li
167.025 23.4987 li
167.065 23.5188 li
167.085 23.5995 li
166.299 26.7444 li
166.702 26.2606 167.196 26.0086 167.771 26.0086 cv
168.002 26.0086 168.204 26.059 168.375 26.1396 cv
168.547 26.2203 168.678 26.3513 168.779 26.5126 cv
168.879 26.6739 168.93 26.8755 168.93 27.0972 cv
168.93 27.3795 168.869 27.7121 168.748 28.0952 cv
168.627 28.4883 168.466 28.9217 168.285 29.4056 cv
168.184 29.6273 168.144 29.8289 168.144 30.0104 cv
168.144 30.212 168.214 30.3128 168.375 30.3128 cv
168.638 30.3128 168.849 30.1716 169.031 29.8894 cv
169.202 29.6072 169.323 29.3048 169.404 28.9822 cv
169.484 28.9217 li
169.605 28.9217 li
169.666 28.952 li
169.696 29.0124 li
169.686 29.0427 li
169.625 29.2846 169.535 29.5265 169.414 29.7584 cv
169.293 30.0003 169.152 30.1918 168.98 30.343 cv
168.799 30.4841 168.597 30.5648 168.355 30.5648 cv
168.113 30.5648 167.912 30.4841 167.75 30.3329 cv
167.579 30.1716 167.498 29.9801 167.498 29.7382 cv
167.498 29.6172 167.519 29.4862 167.579 29.3451 cv
167.761 28.8411 167.922 28.3976 168.053 27.9944 cv
168.174 27.6012 168.244 27.2484 168.244 26.946 cv
168.244 26.7545 168.204 26.5932 168.123 26.4622 cv
168.043 26.3412 167.922 26.2707 167.75 26.2707 cv
167.388 26.2707 167.065 26.3816 166.803 26.6033 cv
166.531 26.8251 166.299 27.1174 166.107 27.4803 cv
165.422 30.2321 li
165.392 30.3329 165.341 30.4136 165.271 30.474 cv
165.19 30.5345 165.11 30.5648 165.009 30.5648 cv
164.918 30.5648 164.847 30.5345 164.787 30.4841 cv
164.696 30.2825 li
f
170.47 30.464 mo
170.47 30.1918 li
170.49 30.1414 li
172.053 28.4076 li
172.284 28.1556 172.476 27.944 172.627 27.7625 cv
172.768 27.5912 172.919 27.3896 173.061 27.1678 cv
173.202 26.946 173.323 26.7142 173.403 26.4723 cv
173.484 26.2404 173.534 25.9884 173.534 25.7264 cv
173.534 25.4542 173.484 25.1921 173.383 24.9401 cv
173.282 24.6881 173.131 24.4865 172.93 24.3353 cv
172.728 24.1841 172.476 24.1035 172.194 24.1035 cv
171.901 24.1035 171.639 24.1942 171.407 24.3656 cv
171.166 24.547 171.004 24.7688 170.914 25.051 cv
171.024 25.0409 li
171.166 25.0409 171.297 25.0913 171.407 25.1921 cv
171.508 25.2929 171.569 25.424 171.569 25.5852 cv
171.569 25.7465 171.508 25.8776 171.407 25.9784 cv
171.297 26.0892 171.166 26.1396 171.024 26.1396 cv
170.863 26.1396 170.732 26.0892 170.631 25.9784 cv
170.52 25.8675 170.47 25.7364 170.47 25.5852 cv
170.47 25.3433 170.51 25.1014 170.611 24.8796 cv
170.702 24.6579 170.833 24.4664 171.014 24.2849 cv
171.196 24.1136 171.397 23.9825 171.619 23.8918 cv
171.841 23.8011 172.083 23.7507 172.345 23.7507 cv
172.728 23.7507 173.081 23.8313 173.413 23.9926 cv
173.746 24.1539 174.008 24.3857 174.2 24.6881 cv
174.391 24.9905 174.492 25.3332 174.492 25.7264 cv
174.492 26.0187 174.421 26.2908 174.3 26.5529 cv
174.169 26.815 174.008 27.0569 173.807 27.2686 cv
173.605 27.4904 173.353 27.7323 173.04 28.0044 cv
172.728 28.2766 172.526 28.458 172.426 28.5488 cv
171.286 29.6475 li
172.254 29.6475 li
172.728 29.6475 173.121 29.6475 173.444 29.6374 cv
173.766 29.6374 173.938 29.6172 173.958 29.5971 cv
174.038 29.5164 174.119 29.204 174.2 28.6697 cv
174.492 28.6697 li
174.21 30.464 li
170.47 30.464 li
f
178.61 24.8754 mo
178.408 24.789 li
178.336 24.5874 li
178.408 24.3858 li
178.61 24.2994 li
187.653 24.2994 li
187.826 24.3858 li
187.912 24.5874 li
187.826 24.789 li
187.653 24.8754 li
178.61 24.8754 li
178.61 22.0818 mo
178.408 21.9954 li
178.336 21.7938 li
178.408 21.6066 li
178.61 21.5058 li
187.653 21.5058 li
187.826 21.6066 li
187.912 21.7938 li
187.826 21.9954 li
187.653 22.0818 li
178.61 22.0818 li
f
190.353 26.7906 mo
190.252 26.7906 190.209 26.733 190.209 26.6034 cv
190.238 26.4882 li
190.281 26.3442 li
190.396 26.2866 li
191.304 26.2866 191.836 25.9986 191.995 25.4082 cv
193.867 17.8914 li
193.896 17.6898 li
193.896 17.589 193.838 17.5314 193.723 17.517 cv
193.536 17.4882 193.19 17.4594 192.686 17.4594 cv
192.585 17.4594 192.542 17.4018 192.542 17.2722 cv
192.571 17.1426 li
192.628 17.013 li
192.729 16.9554 li
195.264 16.9554 li
195.364 16.9554 195.422 17.013 195.451 17.1138 cv
196.574 25.365 li
201.816 17.1138 li
201.873 17.013 201.974 16.9554 202.089 16.9554 cv
204.537 16.9554 li
204.624 16.9554 204.681 17.0274 204.681 17.1426 cv
204.638 17.2722 li
204.58 17.4162 li
204.494 17.4594 li
203.904 17.4594 203.5 17.5026 203.27 17.5602 cv
203.14 17.6034 203.054 17.733 202.996 17.949 cv
201.024 25.8546 li
200.995 25.9554 200.995 26.0274 200.995 26.0562 cv
201.009 26.157 li
201.052 26.2002 li
201.168 26.229 li
201.34 26.2722 201.686 26.2866 202.204 26.2866 cv
202.291 26.2866 202.348 26.3586 202.348 26.4738 cv
202.305 26.6178 202.276 26.7042 202.262 26.733 cv
202.104 26.7906 li
198.345 26.7906 li
198.244 26.7906 198.201 26.733 198.201 26.6034 cv
198.23 26.4738 li
198.288 26.3442 li
198.388 26.2866 li
198.964 26.2866 199.382 26.2578 199.612 26.1858 cv
199.728 26.157 199.828 26.0274 199.886 25.797 cv
201.96 17.4594 li
196.142 26.6322 li
196.084 26.7474 195.984 26.7906 195.854 26.7906 cv
195.724 26.7906 195.652 26.7474 195.652 26.6322 cv
194.428 17.5746 li
192.456 25.4658 li
192.427 25.5666 li
192.412 25.6818 li
192.412 25.941 192.513 26.0994 192.729 26.1714 cv
192.945 26.2578 193.219 26.2866 193.536 26.2866 cv
193.622 26.2866 193.68 26.3586 193.68 26.4738 cv
193.651 26.6034 193.622 26.6898 193.593 26.733 cv
193.435 26.7906 li
190.353 26.7906 li
f
204.115 30.2825 mo
204.125 30.1918 li
205.587 24.3656 li
205.607 24.2547 205.627 24.164 205.637 24.0934 cv
205.637 23.9926 205.415 23.9321 204.982 23.9321 cv
204.911 23.9321 204.881 23.8918 204.881 23.8011 cv
204.901 23.7104 li
204.942 23.6196 li
205.022 23.5793 li
206.383 23.4684 li
206.413 23.4684 li
206.444 23.4987 li
206.484 23.5188 li
206.504 23.5995 li
205.718 26.7444 li
206.121 26.2606 206.615 26.0086 207.189 26.0086 cv
207.421 26.0086 207.623 26.059 207.794 26.1396 cv
207.966 26.2203 208.097 26.3513 208.197 26.5126 cv
208.298 26.6739 208.349 26.8755 208.349 27.0972 cv
208.349 27.3795 208.288 27.7121 208.167 28.0952 cv
208.046 28.4883 207.885 28.9217 207.704 29.4056 cv
207.603 29.6273 207.562 29.8289 207.562 30.0104 cv
207.562 30.212 207.633 30.3128 207.794 30.3128 cv
208.056 30.3128 208.268 30.1716 208.449 29.8894 cv
208.621 29.6072 208.742 29.3048 208.822 28.9822 cv
208.903 28.9217 li
209.024 28.9217 li
209.084 28.952 li
209.115 29.0124 li
209.105 29.0427 li
209.044 29.2846 208.953 29.5265 208.832 29.7584 cv
208.712 30.0003 208.57 30.1918 208.399 30.343 cv
208.218 30.4841 208.016 30.5648 207.774 30.5648 cv
207.532 30.5648 207.331 30.4841 207.169 30.3329 cv
206.998 30.1716 206.917 29.9801 206.917 29.7382 cv
206.917 29.6172 206.937 29.4862 206.998 29.3451 cv
207.179 28.8411 207.341 28.3976 207.472 27.9944 cv
207.593 27.6012 207.663 27.2484 207.663 26.946 cv
207.663 26.7545 207.623 26.5932 207.542 26.4622 cv
207.462 26.3412 207.341 26.2707 207.169 26.2707 cv
206.806 26.2707 206.484 26.3816 206.222 26.6033 cv
205.95 26.8251 205.718 27.1174 205.526 27.4803 cv
204.841 30.2321 li
204.811 30.3329 204.76 30.4136 204.69 30.474 cv
204.609 30.5345 204.528 30.5648 204.428 30.5648 cv
204.337 30.5648 204.266 30.5345 204.206 30.4841 cv
204.115 30.2825 li
f
211.152 26.0463 mo
211.053 26.0039 li
211.018 25.9051 li
211.053 25.8134 li
211.152 25.764 li
213.227 25.764 li
213.227 23.8377 li
211.152 23.8377 li
211.053 23.7954 li
211.018 23.6966 li
211.053 23.6049 li
211.152 23.5555 li
213.227 23.5555 li
213.227 21.474 li
213.269 21.3822 li
213.368 21.347 li
213.459 21.3822 li
213.509 21.474 li
213.509 23.5555 li
215.583 23.5555 li
215.668 23.6049 li
215.71 23.6966 li
215.668 23.7954 li
215.583 23.8377 li
213.509 23.8377 li
213.509 25.764 li
215.583 25.764 li
215.668 25.8134 li
215.71 25.9051 li
215.668 26.0039 li
215.583 26.0463 li
211.152 26.0463 li
f
221.868 24.8754 mo
221.666 24.789 li
221.594 24.5874 li
221.666 24.3858 li
221.868 24.2994 li
230.911 24.2994 li
231.084 24.3858 li
231.17 24.5874 li
231.084 24.789 li
230.911 24.8754 li
221.868 24.8754 li
221.868 22.0818 mo
221.666 21.9954 li
221.594 21.7938 li
221.666 21.6066 li
221.868 21.5058 li
230.911 21.5058 li
231.084 21.6066 li
231.17 21.7938 li
231.084 21.9954 li
230.911 22.0818 li
221.868 22.0818 li
f
233.611 26.7906 mo
233.511 26.7906 233.467 26.733 233.467 26.6034 cv
233.496 26.4882 li
233.539 26.3442 li
233.655 26.2866 li
234.562 26.2866 235.095 25.9986 235.253 25.4082 cv
237.125 17.8914 li
237.154 17.6898 li
237.154 17.589 237.096 17.5314 236.981 17.517 cv
236.794 17.4882 236.448 17.4594 235.944 17.4594 cv
235.843 17.4594 235.8 17.4018 235.8 17.2722 cv
235.829 17.1426 li
235.887 17.013 li
235.987 16.9554 li
238.522 16.9554 li
238.623 16.9554 238.68 17.013 238.709 17.1138 cv
239.832 25.365 li
245.074 17.1138 li
245.131 17.013 245.232 16.9554 245.347 16.9554 cv
247.795 16.9554 li
247.882 16.9554 247.939 17.0274 247.939 17.1426 cv
247.896 17.2722 li
247.839 17.4162 li
247.752 17.4594 li
247.162 17.4594 246.759 17.5026 246.528 17.5602 cv
246.399 17.6034 246.312 17.733 246.255 17.949 cv
244.282 25.8546 li
244.253 25.9554 244.253 26.0274 244.253 26.0562 cv
244.267 26.157 li
244.311 26.2002 li
244.426 26.229 li
244.599 26.2722 244.944 26.2866 245.463 26.2866 cv
245.549 26.2866 245.607 26.3586 245.607 26.4738 cv
245.563 26.6178 245.535 26.7042 245.52 26.733 cv
245.362 26.7906 li
241.603 26.7906 li
241.503 26.7906 241.459 26.733 241.459 26.6034 cv
241.488 26.4738 li
241.546 26.3442 li
241.647 26.2866 li
242.223 26.2866 242.64 26.2578 242.871 26.1858 cv
242.986 26.157 243.087 26.0274 243.144 25.797 cv
245.218 17.4594 li
239.4 26.6322 li
239.343 26.7474 239.242 26.7906 239.112 26.7906 cv
238.983 26.7906 238.911 26.7474 238.911 26.6322 cv
237.687 17.5746 li
235.714 25.4658 li
235.685 25.5666 li
235.671 25.6818 li
235.671 25.941 235.771 26.0994 235.987 26.1714 cv
236.203 26.2578 236.477 26.2866 236.794 26.2866 cv
236.88 26.2866 236.938 26.3586 236.938 26.4738 cv
236.909 26.6034 236.88 26.6898 236.851 26.733 cv
236.693 26.7906 li
233.611 26.7906 li
f
247.373 30.2825 mo
247.383 30.1918 li
248.845 24.3656 li
248.865 24.2547 248.885 24.164 248.895 24.0934 cv
248.895 23.9926 248.674 23.9321 248.24 23.9321 cv
248.17 23.9321 248.139 23.8918 248.139 23.8011 cv
248.16 23.7104 li
248.2 23.6196 li
248.28 23.5793 li
249.641 23.4684 li
249.671 23.4684 li
249.702 23.4987 li
249.742 23.5188 li
249.762 23.5995 li
248.976 26.7444 li
249.379 26.2606 249.873 26.0086 250.448 26.0086 cv
250.68 26.0086 250.881 26.059 251.052 26.1396 cv
251.224 26.2203 251.355 26.3513 251.456 26.5126 cv
251.556 26.6739 251.607 26.8755 251.607 27.0972 cv
251.607 27.3795 251.546 27.7121 251.425 28.0952 cv
251.304 28.4883 251.143 28.9217 250.962 29.4056 cv
250.861 29.6273 250.821 29.8289 250.821 30.0104 cv
250.821 30.212 250.891 30.3128 251.052 30.3128 cv
251.315 30.3128 251.526 30.1716 251.708 29.8894 cv
251.879 29.6072 252 29.3048 252.081 28.9822 cv
252.161 28.9217 li
252.282 28.9217 li
252.343 28.952 li
252.373 29.0124 li
252.363 29.0427 li
252.302 29.2846 252.212 29.5265 252.091 29.7584 cv
251.97 30.0003 251.829 30.1918 251.657 30.343 cv
251.476 30.4841 251.274 30.5648 251.032 30.5648 cv
250.79 30.5648 250.589 30.4841 250.428 30.3329 cv
250.256 30.1716 250.176 29.9801 250.176 29.7382 cv
250.176 29.6172 250.196 29.4862 250.256 29.3451 cv
250.438 28.8411 250.599 28.3976 250.73 27.9944 cv
250.851 27.6012 250.921 27.2484 250.921 26.946 cv
250.921 26.7545 250.881 26.5932 250.8 26.4622 cv
250.72 26.3412 250.599 26.2707 250.428 26.2707 cv
250.065 26.2707 249.742 26.3816 249.48 26.6033 cv
249.208 26.8251 248.976 27.1174 248.784 27.4803 cv
248.099 30.2321 li
248.069 30.3329 248.018 30.4136 247.948 30.474 cv
247.867 30.5345 247.787 30.5648 247.686 30.5648 cv
247.595 30.5648 247.524 30.5345 247.464 30.4841 cv
247.373 30.2825 li
f
253.581 30.464 mo
253.581 30.1112 li
254.417 30.1112 254.84 30.0104 254.84 29.7886 cv
254.84 24.4966 li
254.488 24.668 254.044 24.7486 253.52 24.7486 cv
253.52 24.3958 li
254.337 24.3958 254.961 24.1841 255.385 23.7507 cv
255.526 23.7507 li
255.597 23.7809 li
255.627 23.8414 li
255.627 29.7886 li
255.627 30.0104 256.04 30.1112 256.887 30.1112 cv
256.887 30.464 li
253.581 30.464 li
f
264.304 17.7618 mo
264.304 21.6786 li
268.221 21.6786 li
268.221 22.8738 li
264.304 22.8738 li
264.304 26.7906 li
263.123 26.7906 li
263.123 22.8738 li
259.206 22.8738 li
259.206 21.6786 li
263.123 21.6786 li
263.123 17.7618 li
264.304 17.7618 li
f
271.51 25.5954 mo
273.828 25.5954 li
273.828 17.589 li
271.308 18.093 li
271.308 16.797 li
273.814 16.293 li
275.24 16.293 li
275.24 25.5954 li
277.558 25.5954 li
277.558 26.7906 li
271.51 26.7906 li
271.51 25.5954 li
f
292.008 25.293 mo
292.008 22.4706 li
289.689 22.4706 li
289.689 21.3042 li
293.419 21.3042 li
293.419 25.8114 li
292.872 26.2146 292.267 26.5026 291.604 26.6898 cv
290.942 26.877 290.236 26.9778 289.488 26.9778 cv
287.846 26.9778 286.55 26.5026 285.628 25.5522 cv
284.707 24.6018 284.246 23.2626 284.246 21.549 cv
284.246 19.8498 284.707 18.5106 285.628 17.5458 cv
286.55 16.5954 287.846 16.1058 289.488 16.1058 cv
290.164 16.1058 290.812 16.1922 291.432 16.365 cv
292.051 16.5378 292.627 16.7826 293.145 17.0994 cv
293.145 18.6114 li
292.612 18.1794 292.051 17.8482 291.46 17.6178 cv
290.87 17.3874 290.251 17.2722 289.603 17.2722 cv
288.307 17.2722 287.342 17.6322 286.708 18.3522 cv
286.06 19.0722 285.744 20.1378 285.744 21.549 cv
285.744 22.9746 286.06 24.0402 286.708 24.7602 cv
287.342 25.4802 288.307 25.8258 289.603 25.8258 cv
290.092 25.8258 290.539 25.7826 290.942 25.6962 cv
291.345 25.6098 291.691 25.4802 292.008 25.293 cv
f
302.672 22.5282 mo
302.672 23.1618 li
296.724 23.1618 li
296.782 24.0546 297.041 24.7458 297.531 25.2066 cv
298.006 25.6674 298.668 25.8978 299.533 25.8978 cv
300.022 25.8978 300.512 25.8402 300.972 25.725 cv
301.433 25.6098 301.908 25.4226 302.369 25.1634 cv
302.369 26.3874 li
301.908 26.589 301.433 26.7474 300.944 26.8338 cv
300.454 26.9202 299.95 26.9778 299.46 26.9778 cv
298.193 26.9778 297.2 26.6178 296.465 25.8978 cv
295.731 25.1778 295.371 24.1842 295.371 22.9314 cv
295.371 21.6498 295.716 20.6274 296.408 19.8642 cv
297.099 19.1154 298.049 18.7266 299.23 18.7266 cv
300.296 18.7266 301.131 19.0722 301.75 19.749 cv
302.355 20.4402 302.672 21.3618 302.672 22.5282 cv
301.376 22.1538 mo
301.361 21.4482 301.16 20.8866 300.785 20.4546 cv
300.396 20.037 299.878 19.821 299.244 19.821 cv
298.524 19.821 297.948 20.037 297.516 20.4402 cv
297.085 20.8434 296.825 21.4194 296.768 22.1538 cv
301.376 22.1538 li
f
307.541 26.7906 mo
303.538 16.293 li
305.021 16.293 li
308.348 25.1346 li
311.674 16.293 li
313.157 16.293 li
309.154 26.7906 li
307.541 26.7906 li
f
216.72 104.238 mo
427.12 104.238 li
427.12 33.5 li
216.72 33.5 li
216.72 104.238 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
216.72 104.238 mo
427.12 104.238 li
427.12 33.5 li
216.72 33.5 li
216.72 104.238 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
224.42 42.4094 mo
239.82 42.4094 li
.946258 .780453 0 0 cmyk
@
252.481 45.6974 mo
252.481 45.5874 252.525 45.4884 252.624 45.3894 cv
255.715 42.3534 li
254.626 39.2954 li
254.538 39.0644 254.439 38.8774 254.351 38.7454 cv
254.252 38.6134 254.12 38.5364 253.944 38.5364 cv
253.856 38.5364 253.823 38.4924 253.823 38.3934 cv
253.878 38.2944 li
253.988 38.2504 li
254.758 38.2504 255.22 38.4814 255.385 38.9324 cv
257.618 45.1694 li
257.706 45.4884 257.805 45.6974 257.915 45.7964 cv
257.97 45.8954 li
257.882 45.9944 li
257.288 45.9944 li
257.101 45.9394 256.958 45.7964 256.848 45.5324 cv
255.847 42.7164 li
253.185 45.8404 li
253.053 45.9504 252.932 46.0164 252.833 46.0164 cv
252.734 46.0164 252.646 45.9834 252.58 45.9284 cv
252.514 45.8734 252.481 45.7964 252.481 45.6974 cv
1 /0 /CSD get_res sepcs
1 sep
f
259.065 48.0975 mo
259.188 48.2746 259.349 48.4055 259.55 48.4902 cv
259.75 48.5749 259.973 48.6134 260.204 48.6134 cv
260.497 48.6134 260.712 48.4902 260.836 48.2361 cv
260.959 47.982 261.028 47.6894 261.028 47.366 cv
261.028 47.2274 261.013 47.0811 260.99 46.9348 cv
260.959 46.7885 260.913 46.6499 260.851 46.5267 cv
260.789 46.4035 260.705 46.3034 260.597 46.2264 cv
260.489 46.1494 260.35 46.1109 260.196 46.1109 cv
259.688 46.1109 li
259.619 46.0416 li
259.619 45.9723 li
259.688 45.9107 li
260.112 45.8799 li
260.289 45.8799 260.435 45.8183 260.558 45.6797 cv
260.682 45.5411 260.766 45.3794 260.82 45.1792 cv
260.874 44.9867 260.905 44.8019 260.905 44.6248 cv
260.905 44.3784 260.843 44.1782 260.728 44.0242 cv
260.612 43.8702 260.435 43.7855 260.204 43.7855 cv
260.004 43.7855 259.819 43.824 259.642 43.901 cv
259.465 43.978 259.326 44.0858 259.219 44.2321 cv
259.242 44.2244 li
259.272 44.2244 li
259.388 44.2244 259.488 44.2706 259.565 44.3476 cv
259.642 44.4246 259.681 44.5247 259.681 44.6325 cv
259.681 44.748 259.642 44.8481 259.565 44.9251 cv
259.488 45.0021 259.388 45.0406 259.272 45.0406 cv
259.157 45.0406 259.057 45.0021 258.98 44.9251 cv
258.903 44.8481 258.864 44.748 258.864 44.6325 cv
258.864 44.4169 258.926 44.2244 259.065 44.0627 cv
259.195 43.901 259.365 43.7778 259.573 43.6931 cv
259.781 43.6084 259.989 43.5622 260.204 43.5622 cv
260.358 43.5622 260.52 43.5853 260.697 43.6315 cv
260.866 43.6777 261.028 43.747 261.167 43.8317 cv
261.305 43.9241 261.421 44.0319 261.513 44.1628 cv
261.598 44.3014 261.644 44.4554 261.644 44.6248 cv
261.644 44.8404 261.59 45.0406 261.498 45.2254 cv
261.405 45.4102 261.274 45.5642 261.105 45.6951 cv
260.936 45.8337 260.751 45.9338 260.551 45.9954 cv
260.774 46.0416 260.99 46.1263 261.19 46.2495 cv
261.39 46.3727 261.544 46.5344 261.667 46.7269 cv
261.79 46.9271 261.852 47.135 261.852 47.3583 cv
261.852 47.6432 261.767 47.8973 261.613 48.1283 cv
261.459 48.3593 261.251 48.5441 261.005 48.6673 cv
260.751 48.7905 260.481 48.8521 260.204 48.8521 cv
259.958 48.8521 259.719 48.8059 259.48 48.7135 cv
259.234 48.6288 259.041 48.4979 258.887 48.3131 cv
258.733 48.1283 258.656 47.9127 258.656 47.6509 cv
258.656 47.5277 258.695 47.4199 258.78 47.3352 cv
258.864 47.2505 258.972 47.2043 259.103 47.2043 cv
259.326 47.2659 li
259.488 47.4276 li
259.55 47.6509 li
259.55 47.7818 259.503 47.8896 259.419 47.9743 cv
259.326 48.059 259.226 48.0975 259.103 48.0975 cv
259.065 48.0975 li
f
262.399 47.4199 mo
262.399 47.1504 li
264.778 43.6007 li
264.855 43.5622 li
264.97 43.5622 li
265.055 43.6469 li
265.055 47.1504 li
265.81 47.1504 li
265.81 47.4199 li
265.055 47.4199 li
265.055 48.1745 li
265.055 48.2823 265.124 48.3516 265.278 48.3824 cv
265.432 48.4132 265.602 48.4209 265.802 48.4209 cv
265.802 48.6904 li
263.685 48.6904 li
263.685 48.4209 li
263.877 48.4209 264.046 48.4132 264.2 48.3824 cv
264.354 48.3516 264.431 48.2823 264.431 48.1745 cv
264.431 47.4199 li
262.399 47.4199 li
262.653 47.1504 mo
264.478 47.1504 li
264.478 44.4246 li
262.653 47.1504 li
f
266.703 47.8126 mo
266.749 47.9666 266.834 48.1052 266.942 48.2284 cv
267.049 48.3516 267.18 48.444 267.334 48.5133 cv
267.481 48.5826 267.635 48.6134 267.796 48.6134 cv
268.166 48.6134 268.42 48.4748 268.559 48.1822 cv
268.697 47.8973 268.774 47.5508 268.774 47.135 cv
268.774 46.9579 268.767 46.8116 268.767 46.6884 cv
268.759 46.5652 268.743 46.4497 268.713 46.3342 cv
268.666 46.1571 268.582 46.0031 268.459 45.8645 cv
268.335 45.7259 268.197 45.6566 268.027 45.6566 cv
267.85 45.6566 267.704 45.6874 267.581 45.7336 cv
267.458 45.7875 267.35 45.8491 267.273 45.9184 cv
267.065 46.1417 li
266.957 46.2649 li
266.872 46.2649 li
266.818 46.2418 li
266.795 46.1956 li
266.795 43.6238 li
266.818 43.5853 li
266.872 43.5622 li
266.895 43.5622 li
267.234 43.7316 267.604 43.8086 267.997 43.8086 cv
268.374 43.8086 268.743 43.7316 269.098 43.5622 cv
269.121 43.5622 li
269.167 43.5853 li
269.19 43.6238 li
269.19 43.6931 li
269.175 43.7316 li
268.998 43.9626 268.774 44.1474 268.512 44.2783 cv
268.251 44.4092 267.973 44.4708 267.696 44.4708 cv
267.488 44.4708 267.28 44.4477 267.065 44.3861 cv
267.065 45.8414 li
267.234 45.7028 267.381 45.6104 267.519 45.5488 cv
267.65 45.4872 267.819 45.4564 268.035 45.4564 cv
268.312 45.4564 268.566 45.5411 268.79 45.7028 cv
269.013 45.8722 269.182 46.0801 269.306 46.3419 cv
269.429 46.6037 269.49 46.8732 269.49 47.1427 cv
269.49 47.4507 269.413 47.7356 269.259 47.9974 cv
269.105 48.2592 268.905 48.4671 268.643 48.6211 cv
268.382 48.7751 268.104 48.8521 267.796 48.8521 cv
267.542 48.8521 267.311 48.7828 267.096 48.6596 cv
266.88 48.5364 266.718 48.3593 266.595 48.136 cv
266.472 47.9204 266.418 47.6817 266.418 47.4353 cv
266.418 47.3198 266.449 47.2274 266.526 47.1504 cv
266.603 47.0811 266.695 47.0426 266.811 47.0426 cv
266.919 47.0426 267.019 47.0811 267.096 47.1581 cv
267.173 47.2351 267.211 47.3275 267.211 47.4353 cv
267.211 47.5431 267.173 47.6355 267.096 47.7125 cv
267.019 47.7895 266.919 47.828 266.811 47.828 cv
266.749 47.828 li
266.703 47.8126 li
f
272.64 44.4214 mo
272.486 44.3554 li
272.431 44.2014 li
272.486 44.0474 li
272.64 43.9814 li
279.548 43.9814 li
279.68 44.0474 li
279.746 44.2014 li
279.68 44.3554 li
279.548 44.4214 li
272.64 44.4214 li
272.64 42.2874 mo
272.486 42.2214 li
272.431 42.0674 li
272.486 41.9244 li
272.64 41.8474 li
279.548 41.8474 li
279.68 41.9244 li
279.746 42.0674 li
279.68 42.2214 li
279.548 42.2874 li
272.64 42.2874 li
f
282.081 45.8844 mo
282.081 45.4994 li
282.994 45.4994 283.456 45.3894 283.456 45.1474 cv
283.456 39.3724 li
283.071 39.5594 282.587 39.6474 282.015 39.6474 cv
282.015 39.2624 li
282.906 39.2624 283.588 39.0314 284.05 38.5584 cv
284.204 38.5584 li
284.281 38.5914 li
284.314 38.6574 li
284.314 45.1474 li
284.314 45.3894 284.765 45.4994 285.689 45.4994 cv
285.689 45.8844 li
282.081 45.8844 li
f
287.482 45.2794 mo
287.482 45.1144 287.537 44.9714 287.658 44.8504 cv
287.779 44.7404 287.922 44.6744 288.087 44.6744 cv
288.186 44.6744 288.285 44.7074 288.384 44.7624 cv
288.604 44.9824 li
288.659 45.0814 288.692 45.1804 288.692 45.2794 cv
288.692 45.4444 288.626 45.5874 288.516 45.7084 cv
288.395 45.8294 288.252 45.8844 288.087 45.8844 cv
287.922 45.8844 287.779 45.8294 287.658 45.7084 cv
287.537 45.5874 287.482 45.4444 287.482 45.2794 cv
f
292.443 46.1154 mo
291.541 46.1154 290.925 45.7524 290.606 45.0154 cv
290.276 44.2784 290.122 43.3984 290.122 42.3754 cv
290.122 41.7374 290.177 41.1434 290.298 40.5824 cv
290.408 40.0214 290.639 39.5484 290.991 39.1524 cv
291.332 38.7564 291.816 38.5584 292.443 38.5584 cv
292.927 38.5584 293.323 38.6794 293.631 38.9104 cv
293.939 39.1524 294.17 39.4494 294.335 39.8234 cv
294.489 40.1974 294.599 40.6044 294.665 41.0334 cv
294.72 41.4624 294.753 41.9134 294.753 42.3754 cv
294.753 43.0134 294.687 43.5964 294.577 44.1464 cv
294.456 44.6964 294.225 45.1694 293.884 45.5434 cv
293.543 45.9174 293.059 46.1154 292.443 46.1154 cv
292.443 45.8404 mo
292.85 45.8404 293.158 45.6314 293.356 45.2134 cv
293.554 44.7954 293.675 44.3334 293.719 43.8274 cv
293.763 43.3214 293.796 42.7714 293.796 42.1994 cv
293.796 41.6494 293.763 41.1434 293.719 40.6814 cv
293.675 40.2194 293.554 39.7904 293.356 39.4164 cv
293.158 39.0424 292.85 38.8444 292.443 38.8444 cv
292.025 38.8444 291.717 39.0424 291.519 39.4164 cv
291.321 39.7904 291.189 40.2194 291.145 40.6814 cv
291.101 41.1434 291.079 41.6494 291.079 42.1994 cv
291.079 42.6174 291.079 43.0024 291.101 43.3544 cv
291.123 43.7174 291.178 44.0914 291.266 44.4764 cv
291.354 44.8614 291.486 45.1804 291.684 45.4444 cv
291.871 45.7084 292.124 45.8404 292.443 45.8404 cv
f
224.42 59.2687 mo
239.82 59.2687 li
.402655 .941466 0 0 cmyk
@
252.481 62.5567 mo
252.481 62.4467 252.525 62.3477 252.624 62.2487 cv
255.715 59.2127 li
254.626 56.1547 li
254.538 55.9237 254.439 55.7367 254.351 55.6047 cv
254.252 55.4727 254.12 55.3957 253.944 55.3957 cv
253.856 55.3957 253.823 55.3517 253.823 55.2527 cv
253.878 55.1537 li
253.988 55.1097 li
254.758 55.1097 255.22 55.3407 255.385 55.7917 cv
257.618 62.0287 li
257.706 62.3477 257.805 62.5567 257.915 62.6557 cv
257.97 62.7547 li
257.882 62.8537 li
257.288 62.8537 li
257.101 62.7987 256.958 62.6557 256.848 62.3917 cv
255.847 59.5757 li
253.185 62.6997 li
253.053 62.8097 252.932 62.8757 252.833 62.8757 cv
252.734 62.8757 252.646 62.8427 252.58 62.7877 cv
252.514 62.7327 252.481 62.6557 252.481 62.5567 cv
1 /0 /CSD get_res sepcs
1 sep
f
259.065 64.9569 mo
259.188 65.134 259.349 65.2649 259.55 65.3496 cv
259.75 65.4343 259.973 65.4728 260.204 65.4728 cv
260.497 65.4728 260.712 65.3496 260.836 65.0955 cv
260.959 64.8414 261.028 64.5488 261.028 64.2254 cv
261.028 64.0868 261.013 63.9405 260.99 63.7942 cv
260.959 63.6479 260.913 63.5093 260.851 63.3861 cv
260.789 63.2629 260.705 63.1628 260.597 63.0858 cv
260.489 63.0088 260.35 62.9703 260.196 62.9703 cv
259.688 62.9703 li
259.619 62.901 li
259.619 62.8317 li
259.688 62.7701 li
260.112 62.7393 li
260.289 62.7393 260.435 62.6777 260.558 62.5391 cv
260.682 62.4005 260.766 62.2388 260.82 62.0386 cv
260.874 61.8461 260.905 61.6613 260.905 61.4842 cv
260.905 61.2378 260.843 61.0376 260.728 60.8836 cv
260.612 60.7296 260.435 60.6449 260.204 60.6449 cv
260.004 60.6449 259.819 60.6834 259.642 60.7604 cv
259.465 60.8374 259.326 60.9452 259.219 61.0915 cv
259.242 61.0838 li
259.272 61.0838 li
259.388 61.0838 259.488 61.13 259.565 61.207 cv
259.642 61.284 259.681 61.3841 259.681 61.4919 cv
259.681 61.6074 259.642 61.7075 259.565 61.7845 cv
259.488 61.8615 259.388 61.9 259.272 61.9 cv
259.157 61.9 259.057 61.8615 258.98 61.7845 cv
258.903 61.7075 258.864 61.6074 258.864 61.4919 cv
258.864 61.2763 258.926 61.0838 259.065 60.9221 cv
259.195 60.7604 259.365 60.6372 259.573 60.5525 cv
259.781 60.4678 259.989 60.4216 260.204 60.4216 cv
260.358 60.4216 260.52 60.4447 260.697 60.4909 cv
260.866 60.5371 261.028 60.6064 261.167 60.6911 cv
261.305 60.7835 261.421 60.8913 261.513 61.0222 cv
261.598 61.1608 261.644 61.3148 261.644 61.4842 cv
261.644 61.6998 261.59 61.9 261.498 62.0848 cv
261.405 62.2696 261.274 62.4236 261.105 62.5545 cv
260.936 62.6931 260.751 62.7932 260.551 62.8548 cv
260.774 62.901 260.99 62.9857 261.19 63.1089 cv
261.39 63.2321 261.544 63.3938 261.667 63.5863 cv
261.79 63.7865 261.852 63.9944 261.852 64.2177 cv
261.852 64.5026 261.767 64.7567 261.613 64.9877 cv
261.459 65.2187 261.251 65.4035 261.005 65.5267 cv
260.751 65.6499 260.481 65.7115 260.204 65.7115 cv
259.958 65.7115 259.719 65.6653 259.48 65.5729 cv
259.234 65.4882 259.041 65.3573 258.887 65.1725 cv
258.733 64.9877 258.656 64.7721 258.656 64.5103 cv
258.656 64.3871 258.695 64.2793 258.78 64.1946 cv
258.864 64.1099 258.972 64.0637 259.103 64.0637 cv
259.326 64.1253 li
259.488 64.287 li
259.55 64.5103 li
259.55 64.6412 259.503 64.749 259.419 64.8337 cv
259.326 64.9184 259.226 64.9569 259.103 64.9569 cv
259.065 64.9569 li
f
262.399 64.2793 mo
262.399 64.0098 li
264.778 60.4601 li
264.855 60.4216 li
264.97 60.4216 li
265.055 60.5063 li
265.055 64.0098 li
265.81 64.0098 li
265.81 64.2793 li
265.055 64.2793 li
265.055 65.0339 li
265.055 65.1417 265.124 65.211 265.278 65.2418 cv
265.432 65.2726 265.602 65.2803 265.802 65.2803 cv
265.802 65.5498 li
263.685 65.5498 li
263.685 65.2803 li
263.877 65.2803 264.046 65.2726 264.2 65.2418 cv
264.354 65.211 264.431 65.1417 264.431 65.0339 cv
264.431 64.2793 li
262.399 64.2793 li
262.653 64.0098 mo
264.478 64.0098 li
264.478 61.284 li
262.653 64.0098 li
f
266.703 64.672 mo
266.749 64.826 266.834 64.9646 266.942 65.0878 cv
267.049 65.211 267.18 65.3034 267.334 65.3727 cv
267.481 65.442 267.635 65.4728 267.796 65.4728 cv
268.166 65.4728 268.42 65.3342 268.559 65.0416 cv
268.697 64.7567 268.774 64.4102 268.774 63.9944 cv
268.774 63.8173 268.767 63.671 268.767 63.5478 cv
268.759 63.4246 268.743 63.3091 268.713 63.1936 cv
268.666 63.0165 268.582 62.8625 268.459 62.7239 cv
268.335 62.5853 268.197 62.516 268.027 62.516 cv
267.85 62.516 267.704 62.5468 267.581 62.593 cv
267.458 62.6469 267.35 62.7085 267.273 62.7778 cv
267.065 63.0011 li
266.957 63.1243 li
266.872 63.1243 li
266.818 63.1012 li
266.795 63.055 li
266.795 60.4832 li
266.818 60.4447 li
266.872 60.4216 li
266.895 60.4216 li
267.234 60.591 267.604 60.668 267.997 60.668 cv
268.374 60.668 268.743 60.591 269.098 60.4216 cv
269.121 60.4216 li
269.167 60.4447 li
269.19 60.4832 li
269.19 60.5525 li
269.175 60.591 li
268.998 60.822 268.774 61.0068 268.512 61.1377 cv
268.251 61.2686 267.973 61.3302 267.696 61.3302 cv
267.488 61.3302 267.28 61.3071 267.065 61.2455 cv
267.065 62.7008 li
267.234 62.5622 267.381 62.4698 267.519 62.4082 cv
267.65 62.3466 267.819 62.3158 268.035 62.3158 cv
268.312 62.3158 268.566 62.4005 268.79 62.5622 cv
269.013 62.7316 269.182 62.9395 269.306 63.2013 cv
269.429 63.4631 269.49 63.7326 269.49 64.0021 cv
269.49 64.3101 269.413 64.595 269.259 64.8568 cv
269.105 65.1186 268.905 65.3265 268.643 65.4805 cv
268.382 65.6345 268.104 65.7115 267.796 65.7115 cv
267.542 65.7115 267.311 65.6422 267.096 65.519 cv
266.88 65.3958 266.718 65.2187 266.595 64.9954 cv
266.472 64.7798 266.418 64.5411 266.418 64.2947 cv
266.418 64.1792 266.449 64.0868 266.526 64.0098 cv
266.603 63.9405 266.695 63.902 266.811 63.902 cv
266.919 63.902 267.019 63.9405 267.096 64.0175 cv
267.173 64.0945 267.211 64.1869 267.211 64.2947 cv
267.211 64.4025 267.173 64.4949 267.096 64.5719 cv
267.019 64.6489 266.919 64.6874 266.811 64.6874 cv
266.749 64.6874 li
266.703 64.672 li
f
272.64 61.2807 mo
272.486 61.2147 li
272.431 61.0607 li
272.486 60.9067 li
272.64 60.8407 li
279.548 60.8407 li
279.68 60.9067 li
279.746 61.0607 li
279.68 61.2147 li
279.548 61.2807 li
272.64 61.2807 li
272.64 59.1467 mo
272.486 59.0807 li
272.431 58.9267 li
272.486 58.7837 li
272.64 58.7067 li
279.548 58.7067 li
279.68 58.7837 li
279.746 58.9267 li
279.68 59.0807 li
279.548 59.1467 li
272.64 59.1467 li
f
283.808 62.9747 mo
282.906 62.9747 282.29 62.6117 281.971 61.8747 cv
281.641 61.1377 281.487 60.2577 281.487 59.2347 cv
281.487 58.5967 281.542 58.0027 281.663 57.4417 cv
281.773 56.8807 282.004 56.4077 282.356 56.0117 cv
282.697 55.6157 283.181 55.4177 283.808 55.4177 cv
284.292 55.4177 284.688 55.5387 284.996 55.7697 cv
285.304 56.0117 285.535 56.3087 285.7 56.6827 cv
285.854 57.0567 285.964 57.4637 286.03 57.8927 cv
286.085 58.3217 286.118 58.7727 286.118 59.2347 cv
286.118 59.8727 286.052 60.4557 285.942 61.0057 cv
285.821 61.5557 285.59 62.0287 285.249 62.4027 cv
284.908 62.7767 284.424 62.9747 283.808 62.9747 cv
283.808 62.6997 mo
284.215 62.6997 284.523 62.4907 284.721 62.0727 cv
284.919 61.6547 285.04 61.1927 285.084 60.6867 cv
285.128 60.1807 285.161 59.6307 285.161 59.0587 cv
285.161 58.5087 285.128 58.0027 285.084 57.5407 cv
285.04 57.0787 284.919 56.6497 284.721 56.2757 cv
284.523 55.9017 284.215 55.7037 283.808 55.7037 cv
283.39 55.7037 283.082 55.9017 282.884 56.2757 cv
282.686 56.6497 282.554 57.0787 282.51 57.5407 cv
282.466 58.0027 282.444 58.5087 282.444 59.0587 cv
282.444 59.4767 282.444 59.8617 282.466 60.2137 cv
282.488 60.5767 282.543 60.9507 282.631 61.3357 cv
282.719 61.7207 282.851 62.0397 283.049 62.3037 cv
283.236 62.5677 283.489 62.6997 283.808 62.6997 cv
f
287.482 62.1387 mo
287.482 61.9737 287.537 61.8307 287.658 61.7097 cv
287.779 61.5997 287.922 61.5337 288.087 61.5337 cv
288.186 61.5337 288.285 61.5667 288.384 61.6217 cv
288.604 61.8417 li
288.659 61.9407 288.692 62.0397 288.692 62.1387 cv
288.692 62.3037 288.626 62.4467 288.516 62.5677 cv
288.395 62.6887 288.252 62.7437 288.087 62.7437 cv
287.922 62.7437 287.779 62.6887 287.658 62.5677 cv
287.537 62.4467 287.482 62.3037 287.482 62.1387 cv
f
290.716 62.7437 mo
290.716 62.3587 li
291.629 62.3587 292.091 62.2487 292.091 62.0067 cv
292.091 56.2317 li
291.706 56.4187 291.222 56.5067 290.65 56.5067 cv
290.65 56.1217 li
291.541 56.1217 292.223 55.8907 292.685 55.4177 cv
292.839 55.4177 li
292.916 55.4507 li
292.949 55.5167 li
292.949 62.0067 li
292.949 62.2487 293.4 62.3587 294.324 62.3587 cv
294.324 62.7437 li
290.716 62.7437 li
f
224.42 76.1281 mo
239.82 76.1281 li
.306462 .137331 1 .00201419 cmyk
@
252.481 79.4161 mo
252.481 79.3061 252.525 79.2071 252.624 79.1081 cv
255.715 76.0721 li
254.626 73.0141 li
254.538 72.7831 254.439 72.5961 254.351 72.4641 cv
254.252 72.3321 254.12 72.2551 253.944 72.2551 cv
253.856 72.2551 253.823 72.2111 253.823 72.1121 cv
253.878 72.0131 li
253.988 71.9691 li
254.758 71.9691 255.22 72.2001 255.385 72.6511 cv
257.618 78.8881 li
257.706 79.2071 257.805 79.4161 257.915 79.5151 cv
257.97 79.6141 li
257.882 79.7131 li
257.288 79.7131 li
257.101 79.6581 256.958 79.5151 256.848 79.2511 cv
255.847 76.4351 li
253.185 79.5591 li
253.053 79.6691 252.932 79.7351 252.833 79.7351 cv
252.734 79.7351 252.646 79.7021 252.58 79.6471 cv
252.514 79.5921 252.481 79.5151 252.481 79.4161 cv
1 /0 /CSD get_res sepcs
1 sep
f
259.065 81.8162 mo
259.188 81.9933 259.349 82.1243 259.55 82.2089 cv
259.75 82.2936 259.973 82.3321 260.204 82.3321 cv
260.497 82.3321 260.712 82.2089 260.836 81.9548 cv
260.959 81.7008 261.028 81.4081 261.028 81.0847 cv
261.028 80.9462 261.013 80.7999 260.99 80.6535 cv
260.959 80.5072 260.913 80.3687 260.851 80.2455 cv
260.789 80.1222 260.705 80.0221 260.597 79.9452 cv
260.489 79.8681 260.35 79.8297 260.196 79.8297 cv
259.688 79.8297 li
259.619 79.7603 li
259.619 79.691 li
259.688 79.6294 li
260.112 79.5986 li
260.289 79.5986 260.435 79.537 260.558 79.3985 cv
260.682 79.2598 260.766 79.0982 260.82 78.8979 cv
260.874 78.7055 260.905 78.5207 260.905 78.3436 cv
260.905 78.0972 260.843 77.8969 260.728 77.743 cv
260.612 77.589 260.435 77.5042 260.204 77.5042 cv
260.004 77.5042 259.819 77.5427 259.642 77.6198 cv
259.465 77.6967 259.326 77.8046 259.219 77.9509 cv
259.242 77.9431 li
259.272 77.9431 li
259.388 77.9431 259.488 77.9893 259.565 78.0663 cv
259.642 78.1433 259.681 78.2434 259.681 78.3512 cv
259.681 78.4668 259.642 78.5668 259.565 78.6439 cv
259.488 78.7208 259.388 78.7593 259.272 78.7593 cv
259.157 78.7593 259.057 78.7208 258.98 78.6439 cv
258.903 78.5668 258.864 78.4668 258.864 78.3512 cv
258.864 78.1357 258.926 77.9431 259.065 77.7814 cv
259.195 77.6198 259.365 77.4966 259.573 77.4118 cv
259.781 77.3271 259.989 77.281 260.204 77.281 cv
260.358 77.281 260.52 77.304 260.697 77.3503 cv
260.866 77.3964 261.028 77.4658 261.167 77.5504 cv
261.305 77.6429 261.421 77.7506 261.513 77.8815 cv
261.598 78.0201 261.644 78.1741 261.644 78.3436 cv
261.644 78.5592 261.59 78.7593 261.498 78.9442 cv
261.405 79.129 261.274 79.283 261.105 79.4138 cv
260.936 79.5525 260.751 79.6525 260.551 79.7141 cv
260.774 79.7603 260.99 79.845 261.19 79.9682 cv
261.39 80.0914 261.544 80.2532 261.667 80.4456 cv
261.79 80.6459 261.852 80.8538 261.852 81.077 cv
261.852 81.3619 261.767 81.6161 261.613 81.847 cv
261.459 82.078 261.251 82.2628 261.005 82.386 cv
260.751 82.5092 260.481 82.5708 260.204 82.5708 cv
259.958 82.5708 259.719 82.5247 259.48 82.4323 cv
259.234 82.3475 259.041 82.2167 258.887 82.0319 cv
258.733 81.847 258.656 81.6314 258.656 81.3697 cv
258.656 81.2465 258.695 81.1386 258.78 81.0539 cv
258.864 80.9692 258.972 80.923 259.103 80.923 cv
259.326 80.9846 li
259.488 81.1463 li
259.55 81.3697 li
259.55 81.5005 259.503 81.6084 259.419 81.693 cv
259.326 81.7777 259.226 81.8162 259.103 81.8162 cv
259.065 81.8162 li
f
262.399 81.1386 mo
262.399 80.8691 li
264.778 77.3195 li
264.855 77.281 li
264.97 77.281 li
265.055 77.3656 li
265.055 80.8691 li
265.81 80.8691 li
265.81 81.1386 li
265.055 81.1386 li
265.055 81.8932 li
265.055 82.0011 265.124 82.0704 265.278 82.1012 cv
265.432 82.132 265.602 82.1396 265.802 82.1396 cv
265.802 82.4091 li
263.685 82.4091 li
263.685 82.1396 li
263.877 82.1396 264.046 82.132 264.2 82.1012 cv
264.354 82.0704 264.431 82.0011 264.431 81.8932 cv
264.431 81.1386 li
262.399 81.1386 li
262.653 80.8691 mo
264.478 80.8691 li
264.478 78.1433 li
262.653 80.8691 li
f
266.703 81.5313 mo
266.749 81.6853 266.834 81.824 266.942 81.9472 cv
267.049 82.0704 267.18 82.1628 267.334 82.232 cv
267.481 82.3013 267.635 82.3321 267.796 82.3321 cv
268.166 82.3321 268.42 82.1936 268.559 81.9009 cv
268.697 81.6161 268.774 81.2695 268.774 80.8538 cv
268.774 80.6767 268.767 80.5303 268.767 80.4072 cv
268.759 80.284 268.743 80.1684 268.713 80.0529 cv
268.666 79.8758 268.582 79.7218 268.459 79.5833 cv
268.335 79.4446 268.197 79.3754 268.027 79.3754 cv
267.85 79.3754 267.704 79.4062 267.581 79.4523 cv
267.458 79.5062 267.35 79.5678 267.273 79.6371 cv
267.065 79.8605 li
266.957 79.9837 li
266.872 79.9837 li
266.818 79.9605 li
266.795 79.9144 li
266.795 77.3426 li
266.818 77.304 li
266.872 77.281 li
266.895 77.281 li
267.234 77.4503 267.604 77.5274 267.997 77.5274 cv
268.374 77.5274 268.743 77.4503 269.098 77.281 cv
269.121 77.281 li
269.167 77.304 li
269.19 77.3426 li
269.19 77.4118 li
269.175 77.4503 li
268.998 77.6814 268.774 77.8661 268.512 77.997 cv
268.251 78.128 267.973 78.1896 267.696 78.1896 cv
267.488 78.1896 267.28 78.1665 267.065 78.1049 cv
267.065 79.5602 li
267.234 79.4215 267.381 79.3291 267.519 79.2675 cv
267.65 79.2059 267.819 79.1751 268.035 79.1751 cv
268.312 79.1751 268.566 79.2598 268.79 79.4215 cv
269.013 79.591 269.182 79.7989 269.306 80.0606 cv
269.429 80.3224 269.49 80.5919 269.49 80.8615 cv
269.49 81.1694 269.413 81.4543 269.259 81.7161 cv
269.105 81.978 268.905 82.1859 268.643 82.3399 cv
268.382 82.4939 268.104 82.5708 267.796 82.5708 cv
267.542 82.5708 267.311 82.5015 267.096 82.3783 cv
266.88 82.2551 266.718 82.078 266.595 81.8548 cv
266.472 81.6392 266.418 81.4005 266.418 81.1541 cv
266.418 81.0386 266.449 80.9462 266.526 80.8691 cv
266.603 80.7999 266.695 80.7614 266.811 80.7614 cv
266.919 80.7614 267.019 80.7999 267.096 80.8768 cv
267.173 80.9538 267.211 81.0462 267.211 81.1541 cv
267.211 81.2618 267.173 81.3542 267.096 81.4313 cv
267.019 81.5082 266.919 81.5468 266.811 81.5468 cv
266.749 81.5468 li
266.703 81.5313 li
f
272.64 78.1401 mo
272.486 78.0741 li
272.431 77.9201 li
272.486 77.7661 li
272.64 77.7001 li
279.548 77.7001 li
279.68 77.7661 li
279.746 77.9201 li
279.68 78.0741 li
279.548 78.1401 li
272.64 78.1401 li
272.64 76.0061 mo
272.486 75.9401 li
272.431 75.7861 li
272.486 75.6431 li
272.64 75.5661 li
279.548 75.5661 li
279.68 75.6431 li
279.746 75.7861 li
279.68 75.9401 li
279.548 76.0061 li
272.64 76.0061 li
f
283.808 79.8341 mo
282.906 79.8341 282.29 79.4711 281.971 78.7341 cv
281.641 77.9971 281.487 77.1171 281.487 76.0941 cv
281.487 75.4561 281.542 74.8621 281.663 74.3011 cv
281.773 73.7401 282.004 73.2671 282.356 72.8711 cv
282.697 72.4751 283.181 72.2771 283.808 72.2771 cv
284.292 72.2771 284.688 72.3981 284.996 72.6291 cv
285.304 72.8711 285.535 73.1681 285.7 73.5421 cv
285.854 73.9161 285.964 74.3231 286.03 74.7521 cv
286.085 75.1811 286.118 75.6321 286.118 76.0941 cv
286.118 76.7321 286.052 77.3151 285.942 77.8651 cv
285.821 78.4151 285.59 78.8881 285.249 79.2621 cv
284.908 79.6361 284.424 79.8341 283.808 79.8341 cv
283.808 79.5591 mo
284.215 79.5591 284.523 79.3501 284.721 78.9321 cv
284.919 78.5141 285.04 78.0521 285.084 77.5461 cv
285.128 77.0401 285.161 76.4901 285.161 75.9181 cv
285.161 75.3681 285.128 74.8621 285.084 74.4001 cv
285.04 73.9381 284.919 73.5091 284.721 73.1351 cv
284.523 72.7611 284.215 72.5631 283.808 72.5631 cv
283.39 72.5631 283.082 72.7611 282.884 73.1351 cv
282.686 73.5091 282.554 73.9381 282.51 74.4001 cv
282.466 74.8621 282.444 75.3681 282.444 75.9181 cv
282.444 76.3361 282.444 76.7211 282.466 77.0731 cv
282.488 77.4361 282.543 77.8101 282.631 78.1951 cv
282.719 78.5801 282.851 78.8991 283.049 79.1631 cv
283.236 79.4271 283.489 79.5591 283.808 79.5591 cv
f
287.482 78.9981 mo
287.482 78.8331 287.537 78.6901 287.658 78.5691 cv
287.779 78.4591 287.922 78.3931 288.087 78.3931 cv
288.186 78.3931 288.285 78.4261 288.384 78.4811 cv
288.604 78.7011 li
288.659 78.8001 288.692 78.8991 288.692 78.9981 cv
288.692 79.1631 288.626 79.3061 288.516 79.4271 cv
288.395 79.5481 288.252 79.6031 288.087 79.6031 cv
287.922 79.6031 287.779 79.5481 287.658 79.4271 cv
287.537 79.3061 287.482 79.1631 287.482 78.9981 cv
f
292.443 79.8341 mo
291.541 79.8341 290.925 79.4711 290.606 78.7341 cv
290.276 77.9971 290.122 77.1171 290.122 76.0941 cv
290.122 75.4561 290.177 74.8621 290.298 74.3011 cv
290.408 73.7401 290.639 73.2671 290.991 72.8711 cv
291.332 72.4751 291.816 72.2771 292.443 72.2771 cv
292.927 72.2771 293.323 72.3981 293.631 72.6291 cv
293.939 72.8711 294.17 73.1681 294.335 73.5421 cv
294.489 73.9161 294.599 74.3231 294.665 74.7521 cv
294.72 75.1811 294.753 75.6321 294.753 76.0941 cv
294.753 76.7321 294.687 77.3151 294.577 77.8651 cv
294.456 78.4151 294.225 78.8881 293.884 79.2621 cv
293.543 79.6361 293.059 79.8341 292.443 79.8341 cv
292.443 79.5591 mo
292.85 79.5591 293.158 79.3501 293.356 78.9321 cv
293.554 78.5141 293.675 78.0521 293.719 77.5461 cv
293.763 77.0401 293.796 76.4901 293.796 75.9181 cv
293.796 75.3681 293.763 74.8621 293.719 74.4001 cv
293.675 73.9381 293.554 73.5091 293.356 73.1351 cv
293.158 72.7611 292.85 72.5631 292.443 72.5631 cv
292.025 72.5631 291.717 72.7611 291.519 73.1351 cv
291.321 73.5091 291.189 73.9381 291.145 74.4001 cv
291.101 74.8621 291.079 75.3681 291.079 75.9181 cv
291.079 76.3361 291.079 76.7211 291.101 77.0731 cv
291.123 77.4361 291.178 77.8101 291.266 78.1951 cv
291.354 78.5801 291.486 78.8991 291.684 79.1631 cv
291.871 79.4271 292.124 79.5591 292.443 79.5591 cv
f
296.216 79.6031 mo
296.216 79.2181 li
297.129 79.2181 297.591 79.1081 297.591 78.8661 cv
297.591 73.0911 li
297.206 73.2781 296.722 73.3661 296.15 73.3661 cv
296.15 72.9811 li
297.041 72.9811 297.723 72.7501 298.185 72.2771 cv
298.339 72.2771 li
298.416 72.3101 li
298.449 72.3761 li
298.449 78.8661 li
298.449 79.1081 298.9 79.2181 299.824 79.2181 cv
299.824 79.6031 li
296.216 79.6031 li
f
224.42 92.9875 mo
239.82 92.9875 li
@
252.481 96.2755 mo
252.481 96.1655 252.525 96.0665 252.624 95.9675 cv
255.715 92.9315 li
254.626 89.8735 li
254.538 89.6425 254.439 89.4555 254.351 89.3235 cv
254.252 89.1915 254.12 89.1145 253.944 89.1145 cv
253.856 89.1145 253.823 89.0705 253.823 88.9715 cv
253.878 88.8725 li
253.988 88.8285 li
254.758 88.8285 255.22 89.0595 255.385 89.5105 cv
257.618 95.7475 li
257.706 96.0665 257.805 96.2755 257.915 96.3745 cv
257.97 96.4735 li
257.882 96.5725 li
257.288 96.5725 li
257.101 96.5175 256.958 96.3745 256.848 96.1105 cv
255.847 93.2945 li
253.185 96.4185 li
253.053 96.5285 252.932 96.5945 252.833 96.5945 cv
252.734 96.5945 252.646 96.5615 252.58 96.5065 cv
252.514 96.4515 252.481 96.3745 252.481 96.2755 cv
f
259.065 98.6756 mo
259.188 98.8527 259.349 98.9836 259.55 99.0683 cv
259.75 99.153 259.973 99.1915 260.204 99.1915 cv
260.497 99.1915 260.712 99.0683 260.836 98.8142 cv
260.959 98.5601 261.028 98.2675 261.028 97.9441 cv
261.028 97.8055 261.013 97.6592 260.99 97.5129 cv
260.959 97.3666 260.913 97.228 260.851 97.1048 cv
260.789 96.9816 260.705 96.8815 260.597 96.8045 cv
260.489 96.7275 260.35 96.689 260.196 96.689 cv
259.688 96.689 li
259.619 96.6197 li
259.619 96.5504 li
259.688 96.4888 li
260.112 96.458 li
260.289 96.458 260.435 96.3964 260.558 96.2578 cv
260.682 96.1192 260.766 95.9575 260.82 95.7573 cv
260.874 95.5648 260.905 95.38 260.905 95.2029 cv
260.905 94.9565 260.843 94.7563 260.728 94.6023 cv
260.612 94.4483 260.435 94.3636 260.204 94.3636 cv
260.004 94.3636 259.819 94.4021 259.642 94.4791 cv
259.465 94.5561 259.326 94.6639 259.219 94.8102 cv
259.242 94.8025 li
259.272 94.8025 li
259.388 94.8025 259.488 94.8487 259.565 94.9257 cv
259.642 95.0027 259.681 95.1028 259.681 95.2106 cv
259.681 95.3261 259.642 95.4262 259.565 95.5032 cv
259.488 95.5802 259.388 95.6187 259.272 95.6187 cv
259.157 95.6187 259.057 95.5802 258.98 95.5032 cv
258.903 95.4262 258.864 95.3261 258.864 95.2106 cv
258.864 94.995 258.926 94.8025 259.065 94.6408 cv
259.195 94.4791 259.365 94.3559 259.573 94.2712 cv
259.781 94.1865 259.989 94.1403 260.204 94.1403 cv
260.358 94.1403 260.52 94.1634 260.697 94.2096 cv
260.866 94.2558 261.028 94.3251 261.167 94.4098 cv
261.305 94.5022 261.421 94.61 261.513 94.7409 cv
261.598 94.8795 261.644 95.0335 261.644 95.2029 cv
261.644 95.4185 261.59 95.6187 261.498 95.8035 cv
261.405 95.9883 261.274 96.1423 261.105 96.2732 cv
260.936 96.4118 260.751 96.5119 260.551 96.5735 cv
260.774 96.6197 260.99 96.7044 261.19 96.8276 cv
261.39 96.9508 261.544 97.1125 261.667 97.305 cv
261.79 97.5052 261.852 97.7131 261.852 97.9364 cv
261.852 98.2213 261.767 98.4754 261.613 98.7064 cv
261.459 98.9374 261.251 99.1222 261.005 99.2454 cv
260.751 99.3686 260.481 99.4302 260.204 99.4302 cv
259.958 99.4302 259.719 99.384 259.48 99.2916 cv
259.234 99.2069 259.041 99.076 258.887 98.8912 cv
258.733 98.7064 258.656 98.4908 258.656 98.229 cv
258.656 98.1058 258.695 97.998 258.78 97.9133 cv
258.864 97.8286 258.972 97.7824 259.103 97.7824 cv
259.326 97.844 li
259.488 98.0057 li
259.55 98.229 li
259.55 98.3599 259.503 98.4677 259.419 98.5524 cv
259.326 98.6371 259.226 98.6756 259.103 98.6756 cv
259.065 98.6756 li
f
262.399 97.998 mo
262.399 97.7285 li
264.778 94.1788 li
264.855 94.1403 li
264.97 94.1403 li
265.055 94.225 li
265.055 97.7285 li
265.81 97.7285 li
265.81 97.998 li
265.055 97.998 li
265.055 98.7526 li
265.055 98.8604 265.124 98.9297 265.278 98.9605 cv
265.432 98.9913 265.602 98.999 265.802 98.999 cv
265.802 99.2685 li
263.685 99.2685 li
263.685 98.999 li
263.877 98.999 264.046 98.9913 264.2 98.9605 cv
264.354 98.9297 264.431 98.8604 264.431 98.7526 cv
264.431 97.998 li
262.399 97.998 li
262.653 97.7285 mo
264.478 97.7285 li
264.478 95.0027 li
262.653 97.7285 li
f
266.703 98.3907 mo
266.749 98.5447 266.834 98.6833 266.942 98.8065 cv
267.049 98.9297 267.18 99.0221 267.334 99.0914 cv
267.481 99.1607 267.635 99.1915 267.796 99.1915 cv
268.166 99.1915 268.42 99.0529 268.559 98.7603 cv
268.697 98.4754 268.774 98.1289 268.774 97.7131 cv
268.774 97.536 268.767 97.3897 268.767 97.2665 cv
268.759 97.1433 268.743 97.0278 268.713 96.9123 cv
268.666 96.7352 268.582 96.5812 268.459 96.4426 cv
268.335 96.304 268.197 96.2347 268.027 96.2347 cv
267.85 96.2347 267.704 96.2655 267.581 96.3117 cv
267.458 96.3656 267.35 96.4272 267.273 96.4965 cv
267.065 96.7198 li
266.957 96.843 li
266.872 96.843 li
266.818 96.8199 li
266.795 96.7737 li
266.795 94.2019 li
266.818 94.1634 li
266.872 94.1403 li
266.895 94.1403 li
267.234 94.3097 267.604 94.3867 267.997 94.3867 cv
268.374 94.3867 268.743 94.3097 269.098 94.1403 cv
269.121 94.1403 li
269.167 94.1634 li
269.19 94.2019 li
269.19 94.2712 li
269.175 94.3097 li
268.998 94.5407 268.774 94.7255 268.512 94.8564 cv
268.251 94.9873 267.973 95.0489 267.696 95.0489 cv
267.488 95.0489 267.28 95.0258 267.065 94.9642 cv
267.065 96.4195 li
267.234 96.2809 267.381 96.1885 267.519 96.1269 cv
267.65 96.0653 267.819 96.0345 268.035 96.0345 cv
268.312 96.0345 268.566 96.1192 268.79 96.2809 cv
269.013 96.4503 269.182 96.6582 269.306 96.92 cv
269.429 97.1818 269.49 97.4513 269.49 97.7208 cv
269.49 98.0288 269.413 98.3137 269.259 98.5755 cv
269.105 98.8373 268.905 99.0452 268.643 99.1992 cv
268.382 99.3532 268.104 99.4302 267.796 99.4302 cv
267.542 99.4302 267.311 99.3609 267.096 99.2377 cv
266.88 99.1145 266.718 98.9374 266.595 98.7141 cv
266.472 98.4985 266.418 98.2598 266.418 98.0134 cv
266.418 97.8979 266.449 97.8055 266.526 97.7285 cv
266.603 97.6592 266.695 97.6207 266.811 97.6207 cv
266.919 97.6207 267.019 97.6592 267.096 97.7362 cv
267.173 97.8132 267.211 97.9056 267.211 98.0134 cv
267.211 98.1212 267.173 98.2136 267.096 98.2906 cv
267.019 98.3676 266.919 98.4061 266.811 98.4061 cv
266.749 98.4061 li
266.703 98.3907 li
f
272.64 94.9995 mo
272.486 94.9335 li
272.431 94.7795 li
272.486 94.6255 li
272.64 94.5595 li
279.548 94.5595 li
279.68 94.6255 li
279.746 94.7795 li
279.68 94.9335 li
279.548 94.9995 li
272.64 94.9995 li
272.64 92.8655 mo
272.486 92.7995 li
272.431 92.6455 li
272.486 92.5025 li
272.64 92.4255 li
279.548 92.4255 li
279.68 92.5025 li
279.746 92.6455 li
279.68 92.7995 li
279.548 92.8655 li
272.64 92.8655 li
f
283.808 96.6935 mo
282.906 96.6935 282.29 96.3305 281.971 95.5935 cv
281.641 94.8565 281.487 93.9765 281.487 92.9535 cv
281.487 92.3155 281.542 91.7215 281.663 91.1605 cv
281.773 90.5995 282.004 90.1265 282.356 89.7305 cv
282.697 89.3345 283.181 89.1365 283.808 89.1365 cv
284.292 89.1365 284.688 89.2575 284.996 89.4885 cv
285.304 89.7305 285.535 90.0275 285.7 90.4015 cv
285.854 90.7755 285.964 91.1825 286.03 91.6115 cv
286.085 92.0405 286.118 92.4915 286.118 92.9535 cv
286.118 93.5915 286.052 94.1745 285.942 94.7245 cv
285.821 95.2745 285.59 95.7475 285.249 96.1215 cv
284.908 96.4955 284.424 96.6935 283.808 96.6935 cv
283.808 96.4185 mo
284.215 96.4185 284.523 96.2095 284.721 95.7915 cv
284.919 95.3735 285.04 94.9115 285.084 94.4055 cv
285.128 93.8995 285.161 93.3495 285.161 92.7775 cv
285.161 92.2275 285.128 91.7215 285.084 91.2595 cv
285.04 90.7975 284.919 90.3685 284.721 89.9945 cv
284.523 89.6205 284.215 89.4225 283.808 89.4225 cv
283.39 89.4225 283.082 89.6205 282.884 89.9945 cv
282.686 90.3685 282.554 90.7975 282.51 91.2595 cv
282.466 91.7215 282.444 92.2275 282.444 92.7775 cv
282.444 93.1955 282.444 93.5805 282.466 93.9325 cv
282.488 94.2955 282.543 94.6695 282.631 95.0545 cv
282.719 95.4395 282.851 95.7585 283.049 96.0225 cv
283.236 96.2865 283.489 96.4185 283.808 96.4185 cv
f
287.482 95.8575 mo
287.482 95.6925 287.537 95.5495 287.658 95.4285 cv
287.779 95.3185 287.922 95.2525 288.087 95.2525 cv
288.186 95.2525 288.285 95.2855 288.384 95.3405 cv
288.604 95.5605 li
288.659 95.6595 288.692 95.7585 288.692 95.8575 cv
288.692 96.0225 288.626 96.1655 288.516 96.2865 cv
288.395 96.4075 288.252 96.4625 288.087 96.4625 cv
287.922 96.4625 287.779 96.4075 287.658 96.2865 cv
287.537 96.1655 287.482 96.0225 287.482 95.8575 cv
f
292.443 96.6935 mo
291.541 96.6935 290.925 96.3305 290.606 95.5935 cv
290.276 94.8565 290.122 93.9765 290.122 92.9535 cv
290.122 92.3155 290.177 91.7215 290.298 91.1605 cv
290.408 90.5995 290.639 90.1265 290.991 89.7305 cv
291.332 89.3345 291.816 89.1365 292.443 89.1365 cv
292.927 89.1365 293.323 89.2575 293.631 89.4885 cv
293.939 89.7305 294.17 90.0275 294.335 90.4015 cv
294.489 90.7755 294.599 91.1825 294.665 91.6115 cv
294.72 92.0405 294.753 92.4915 294.753 92.9535 cv
294.753 93.5915 294.687 94.1745 294.577 94.7245 cv
294.456 95.2745 294.225 95.7475 293.884 96.1215 cv
293.543 96.4955 293.059 96.6935 292.443 96.6935 cv
292.443 96.4185 mo
292.85 96.4185 293.158 96.2095 293.356 95.7915 cv
293.554 95.3735 293.675 94.9115 293.719 94.4055 cv
293.763 93.8995 293.796 93.3495 293.796 92.7775 cv
293.796 92.2275 293.763 91.7215 293.719 91.2595 cv
293.675 90.7975 293.554 90.3685 293.356 89.9945 cv
293.158 89.6205 292.85 89.4225 292.443 89.4225 cv
292.025 89.4225 291.717 89.6205 291.519 89.9945 cv
291.321 90.3685 291.189 90.7975 291.145 91.2595 cv
291.101 91.7215 291.079 92.2275 291.079 92.7775 cv
291.079 93.1955 291.079 93.5805 291.101 93.9325 cv
291.123 94.2955 291.178 94.6695 291.266 95.0545 cv
291.354 95.4395 291.486 95.7585 291.684 96.0225 cv
291.871 96.2865 292.124 96.4185 292.443 96.4185 cv
f
297.943 96.6935 mo
297.041 96.6935 296.425 96.3305 296.106 95.5935 cv
295.776 94.8565 295.622 93.9765 295.622 92.9535 cv
295.622 92.3155 295.677 91.7215 295.798 91.1605 cv
295.908 90.5995 296.139 90.1265 296.491 89.7305 cv
296.832 89.3345 297.316 89.1365 297.943 89.1365 cv
298.427 89.1365 298.823 89.2575 299.131 89.4885 cv
299.439 89.7305 299.67 90.0275 299.835 90.4015 cv
299.989 90.7755 300.099 91.1825 300.165 91.6115 cv
300.22 92.0405 300.253 92.4915 300.253 92.9535 cv
300.253 93.5915 300.187 94.1745 300.077 94.7245 cv
299.956 95.2745 299.725 95.7475 299.384 96.1215 cv
299.043 96.4955 298.559 96.6935 297.943 96.6935 cv
297.943 96.4185 mo
298.35 96.4185 298.658 96.2095 298.856 95.7915 cv
299.054 95.3735 299.175 94.9115 299.219 94.4055 cv
299.263 93.8995 299.296 93.3495 299.296 92.7775 cv
299.296 92.2275 299.263 91.7215 299.219 91.2595 cv
299.175 90.7975 299.054 90.3685 298.856 89.9945 cv
298.658 89.6205 298.35 89.4225 297.943 89.4225 cv
297.525 89.4225 297.217 89.6205 297.019 89.9945 cv
296.821 90.3685 296.689 90.7975 296.645 91.2595 cv
296.601 91.7215 296.579 92.2275 296.579 92.7775 cv
296.579 93.1955 296.579 93.5805 296.601 93.9325 cv
296.623 94.2955 296.678 94.6695 296.766 95.0545 cv
296.854 95.4395 296.986 95.7585 297.184 96.0225 cv
297.371 96.2865 297.624 96.4185 297.943 96.4185 cv
f
301.716 96.4625 mo
301.716 96.0775 li
302.629 96.0775 303.091 95.9675 303.091 95.7255 cv
303.091 89.9505 li
302.706 90.1375 302.222 90.2255 301.65 90.2255 cv
301.65 89.8405 li
302.541 89.8405 303.223 89.6095 303.685 89.1365 cv
303.839 89.1365 li
303.916 89.1695 li
303.949 89.2355 li
303.949 95.7255 li
303.949 95.9675 304.4 96.0775 305.324 96.0775 cv
305.324 96.4625 li
301.716 96.4625 li
f
0 lc
[6 6 ] 0 dsh
332.22 42.4094 mo
347.62 42.4094 li
.946258 .780453 0 0 cmyk
@
360.281 45.6974 mo
360.281 45.5874 360.325 45.4884 360.424 45.3894 cv
363.515 42.3534 li
362.426 39.2954 li
362.338 39.0644 362.239 38.8774 362.151 38.7454 cv
362.052 38.6134 361.92 38.5364 361.744 38.5364 cv
361.656 38.5364 361.623 38.4924 361.623 38.3934 cv
361.678 38.2944 li
361.788 38.2504 li
362.558 38.2504 363.02 38.4814 363.185 38.9324 cv
365.418 45.1694 li
365.506 45.4884 365.605 45.6974 365.715 45.7964 cv
365.77 45.8954 li
365.682 45.9944 li
365.088 45.9944 li
364.901 45.9394 364.758 45.7964 364.648 45.5324 cv
363.647 42.7164 li
360.985 45.8404 li
360.853 45.9504 360.732 46.0164 360.633 46.0164 cv
360.534 46.0164 360.446 45.9834 360.38 45.9284 cv
360.314 45.8734 360.281 45.7964 360.281 45.6974 cv
1 /0 /CSD get_res sepcs
1 sep
f
366.865 48.0975 mo
366.988 48.2746 367.149 48.4055 367.35 48.4902 cv
367.55 48.5749 367.773 48.6134 368.004 48.6134 cv
368.297 48.6134 368.512 48.4902 368.636 48.2361 cv
368.759 47.982 368.828 47.6894 368.828 47.366 cv
368.828 47.2274 368.813 47.0811 368.79 46.9348 cv
368.759 46.7885 368.713 46.6499 368.651 46.5267 cv
368.589 46.4035 368.505 46.3034 368.397 46.2264 cv
368.289 46.1494 368.15 46.1109 367.996 46.1109 cv
367.488 46.1109 li
367.419 46.0416 li
367.419 45.9723 li
367.488 45.9107 li
367.912 45.8799 li
368.089 45.8799 368.235 45.8183 368.358 45.6797 cv
368.482 45.5411 368.566 45.3794 368.62 45.1792 cv
368.674 44.9867 368.705 44.8019 368.705 44.6248 cv
368.705 44.3784 368.643 44.1782 368.528 44.0242 cv
368.412 43.8702 368.235 43.7855 368.004 43.7855 cv
367.804 43.7855 367.619 43.824 367.442 43.901 cv
367.265 43.978 367.126 44.0858 367.019 44.2321 cv
367.042 44.2244 li
367.072 44.2244 li
367.188 44.2244 367.288 44.2706 367.365 44.3476 cv
367.442 44.4246 367.481 44.5247 367.481 44.6325 cv
367.481 44.748 367.442 44.8481 367.365 44.9251 cv
367.288 45.0021 367.188 45.0406 367.072 45.0406 cv
366.957 45.0406 366.857 45.0021 366.78 44.9251 cv
366.703 44.8481 366.664 44.748 366.664 44.6325 cv
366.664 44.4169 366.726 44.2244 366.865 44.0627 cv
366.995 43.901 367.165 43.7778 367.373 43.6931 cv
367.581 43.6084 367.789 43.5622 368.004 43.5622 cv
368.158 43.5622 368.32 43.5853 368.497 43.6315 cv
368.666 43.6777 368.828 43.747 368.967 43.8317 cv
369.105 43.9241 369.221 44.0319 369.313 44.1628 cv
369.398 44.3014 369.444 44.4554 369.444 44.6248 cv
369.444 44.8404 369.39 45.0406 369.298 45.2254 cv
369.205 45.4102 369.074 45.5642 368.905 45.6951 cv
368.736 45.8337 368.551 45.9338 368.351 45.9954 cv
368.574 46.0416 368.79 46.1263 368.99 46.2495 cv
369.19 46.3727 369.344 46.5344 369.467 46.7269 cv
369.59 46.9271 369.652 47.135 369.652 47.3583 cv
369.652 47.6432 369.567 47.8973 369.413 48.1283 cv
369.259 48.3593 369.051 48.5441 368.805 48.6673 cv
368.551 48.7905 368.281 48.8521 368.004 48.8521 cv
367.758 48.8521 367.519 48.8059 367.28 48.7135 cv
367.034 48.6288 366.841 48.4979 366.688 48.3131 cv
366.533 48.1283 366.456 47.9127 366.456 47.6509 cv
366.456 47.5277 366.495 47.4199 366.58 47.3352 cv
366.664 47.2505 366.772 47.2043 366.903 47.2043 cv
367.126 47.2659 li
367.288 47.4276 li
367.35 47.6509 li
367.35 47.7818 367.303 47.8896 367.219 47.9743 cv
367.126 48.059 367.026 48.0975 366.903 48.0975 cv
366.865 48.0975 li
f
370.199 47.4199 mo
370.199 47.1504 li
372.578 43.6007 li
372.655 43.5622 li
372.771 43.5622 li
372.855 43.6469 li
372.855 47.1504 li
373.61 47.1504 li
373.61 47.4199 li
372.855 47.4199 li
372.855 48.1745 li
372.855 48.2823 372.924 48.3516 373.078 48.3824 cv
373.232 48.4132 373.402 48.4209 373.602 48.4209 cv
373.602 48.6904 li
371.485 48.6904 li
371.485 48.4209 li
371.677 48.4209 371.846 48.4132 372 48.3824 cv
372.154 48.3516 372.232 48.2823 372.232 48.1745 cv
372.232 47.4199 li
370.199 47.4199 li
370.453 47.1504 mo
372.278 47.1504 li
372.278 44.4246 li
370.453 47.1504 li
f
374.503 47.8126 mo
374.549 47.9666 374.634 48.1052 374.742 48.2284 cv
374.849 48.3516 374.98 48.444 375.134 48.5133 cv
375.281 48.5826 375.435 48.6134 375.596 48.6134 cv
375.966 48.6134 376.22 48.4748 376.359 48.1822 cv
376.497 47.8973 376.574 47.5508 376.574 47.135 cv
376.574 46.9579 376.567 46.8116 376.567 46.6884 cv
376.559 46.5652 376.543 46.4497 376.513 46.3342 cv
376.466 46.1571 376.382 46.0031 376.259 45.8645 cv
376.135 45.7259 375.997 45.6566 375.827 45.6566 cv
375.65 45.6566 375.504 45.6874 375.381 45.7336 cv
375.258 45.7875 375.15 45.8491 375.073 45.9184 cv
374.865 46.1417 li
374.757 46.2649 li
374.672 46.2649 li
374.618 46.2418 li
374.595 46.1956 li
374.595 43.6238 li
374.618 43.5853 li
374.672 43.5622 li
374.695 43.5622 li
375.034 43.7316 375.404 43.8086 375.797 43.8086 cv
376.174 43.8086 376.543 43.7316 376.898 43.5622 cv
376.921 43.5622 li
376.967 43.5853 li
376.99 43.6238 li
376.99 43.6931 li
376.975 43.7316 li
376.798 43.9626 376.574 44.1474 376.313 44.2783 cv
376.051 44.4092 375.773 44.4708 375.496 44.4708 cv
375.288 44.4708 375.081 44.4477 374.865 44.3861 cv
374.865 45.8414 li
375.034 45.7028 375.181 45.6104 375.319 45.5488 cv
375.45 45.4872 375.62 45.4564 375.835 45.4564 cv
376.112 45.4564 376.366 45.5411 376.59 45.7028 cv
376.813 45.8722 376.982 46.0801 377.106 46.3419 cv
377.229 46.6037 377.29 46.8732 377.29 47.1427 cv
377.29 47.4507 377.213 47.7356 377.059 47.9974 cv
376.905 48.2592 376.705 48.4671 376.443 48.6211 cv
376.182 48.7751 375.904 48.8521 375.596 48.8521 cv
375.342 48.8521 375.111 48.7828 374.896 48.6596 cv
374.68 48.5364 374.518 48.3593 374.395 48.136 cv
374.272 47.9204 374.218 47.6817 374.218 47.4353 cv
374.218 47.3198 374.249 47.2274 374.326 47.1504 cv
374.403 47.0811 374.495 47.0426 374.611 47.0426 cv
374.719 47.0426 374.819 47.0811 374.896 47.1581 cv
374.973 47.2351 375.011 47.3275 375.011 47.4353 cv
375.011 47.5431 374.973 47.6355 374.896 47.7125 cv
374.819 47.7895 374.719 47.828 374.611 47.828 cv
374.549 47.828 li
374.503 47.8126 li
f
380.44 44.4214 mo
380.286 44.3554 li
380.231 44.2014 li
380.286 44.0474 li
380.44 43.9814 li
387.348 43.9814 li
387.48 44.0474 li
387.546 44.2014 li
387.48 44.3554 li
387.348 44.4214 li
380.44 44.4214 li
380.44 42.2874 mo
380.286 42.2214 li
380.231 42.0674 li
380.286 41.9244 li
380.44 41.8474 li
387.348 41.8474 li
387.48 41.9244 li
387.546 42.0674 li
387.48 42.2214 li
387.348 42.2874 li
380.44 42.2874 li
f
389.98 43.3544 mo
389.826 43.2884 li
389.771 43.1344 li
389.826 42.9914 li
389.98 42.9144 li
396.294 42.9144 li
396.438 42.9914 li
396.492 43.1344 li
396.438 43.2884 li
396.294 43.3544 li
389.98 43.3544 li
f
398.427 45.8844 mo
398.427 45.4994 li
399.34 45.4994 399.802 45.3894 399.802 45.1474 cv
399.802 39.3724 li
399.417 39.5594 398.933 39.6474 398.361 39.6474 cv
398.361 39.2624 li
399.252 39.2624 399.934 39.0314 400.396 38.5584 cv
400.55 38.5584 li
400.627 38.5914 li
400.66 38.6574 li
400.66 45.1474 li
400.66 45.3894 401.111 45.4994 402.035 45.4994 cv
402.035 45.8844 li
398.427 45.8844 li
f
403.828 45.2794 mo
403.828 45.1144 403.883 44.9714 404.004 44.8504 cv
404.125 44.7404 404.268 44.6744 404.433 44.6744 cv
404.532 44.6744 404.631 44.7074 404.73 44.7624 cv
404.95 44.9824 li
405.005 45.0814 405.038 45.1804 405.038 45.2794 cv
405.038 45.4444 404.972 45.5874 404.862 45.7084 cv
404.741 45.8294 404.598 45.8844 404.433 45.8844 cv
404.268 45.8844 404.125 45.8294 404.004 45.7084 cv
403.883 45.5874 403.828 45.4444 403.828 45.2794 cv
f
408.788 46.1154 mo
407.886 46.1154 407.27 45.7524 406.951 45.0154 cv
406.621 44.2784 406.467 43.3984 406.467 42.3754 cv
406.467 41.7374 406.522 41.1434 406.643 40.5824 cv
406.753 40.0214 406.984 39.5484 407.336 39.1524 cv
407.677 38.7564 408.161 38.5584 408.788 38.5584 cv
409.272 38.5584 409.668 38.6794 409.976 38.9104 cv
410.284 39.1524 410.515 39.4494 410.68 39.8234 cv
410.834 40.1974 410.944 40.6044 411.01 41.0334 cv
411.065 41.4624 411.098 41.9134 411.098 42.3754 cv
411.098 43.0134 411.032 43.5964 410.922 44.1464 cv
410.801 44.6964 410.57 45.1694 410.229 45.5434 cv
409.888 45.9174 409.404 46.1154 408.788 46.1154 cv
408.788 45.8404 mo
409.195 45.8404 409.503 45.6314 409.701 45.2134 cv
409.899 44.7954 410.02 44.3334 410.064 43.8274 cv
410.108 43.3214 410.141 42.7714 410.141 42.1994 cv
410.141 41.6494 410.108 41.1434 410.064 40.6814 cv
410.02 40.2194 409.899 39.7904 409.701 39.4164 cv
409.503 39.0424 409.195 38.8444 408.788 38.8444 cv
408.37 38.8444 408.062 39.0424 407.864 39.4164 cv
407.666 39.7904 407.534 40.2194 407.49 40.6814 cv
407.446 41.1434 407.424 41.6494 407.424 42.1994 cv
407.424 42.6174 407.424 43.0024 407.446 43.3544 cv
407.468 43.7174 407.523 44.0914 407.611 44.4764 cv
407.699 44.8614 407.831 45.1804 408.029 45.4444 cv
408.216 45.7084 408.469 45.8404 408.788 45.8404 cv
f
332.22 59.2687 mo
347.62 59.2687 li
.402655 .941466 0 0 cmyk
@
360.281 62.5567 mo
360.281 62.4467 360.325 62.3477 360.424 62.2487 cv
363.515 59.2127 li
362.426 56.1547 li
362.338 55.9237 362.239 55.7367 362.151 55.6047 cv
362.052 55.4727 361.92 55.3957 361.744 55.3957 cv
361.656 55.3957 361.623 55.3517 361.623 55.2527 cv
361.678 55.1537 li
361.788 55.1097 li
362.558 55.1097 363.02 55.3407 363.185 55.7917 cv
365.418 62.0287 li
365.506 62.3477 365.605 62.5567 365.715 62.6557 cv
365.77 62.7547 li
365.682 62.8537 li
365.088 62.8537 li
364.901 62.7987 364.758 62.6557 364.648 62.3917 cv
363.647 59.5757 li
360.985 62.6997 li
360.853 62.8097 360.732 62.8757 360.633 62.8757 cv
360.534 62.8757 360.446 62.8427 360.38 62.7877 cv
360.314 62.7327 360.281 62.6557 360.281 62.5567 cv
1 /0 /CSD get_res sepcs
1 sep
f
366.865 64.9569 mo
366.988 65.134 367.149 65.2649 367.35 65.3496 cv
367.55 65.4343 367.773 65.4728 368.004 65.4728 cv
368.297 65.4728 368.512 65.3496 368.636 65.0955 cv
368.759 64.8414 368.828 64.5488 368.828 64.2254 cv
368.828 64.0868 368.813 63.9405 368.79 63.7942 cv
368.759 63.6479 368.713 63.5093 368.651 63.3861 cv
368.589 63.2629 368.505 63.1628 368.397 63.0858 cv
368.289 63.0088 368.15 62.9703 367.996 62.9703 cv
367.488 62.9703 li
367.419 62.901 li
367.419 62.8317 li
367.488 62.7701 li
367.912 62.7393 li
368.089 62.7393 368.235 62.6777 368.358 62.5391 cv
368.482 62.4005 368.566 62.2388 368.62 62.0386 cv
368.674 61.8461 368.705 61.6613 368.705 61.4842 cv
368.705 61.2378 368.643 61.0376 368.528 60.8836 cv
368.412 60.7296 368.235 60.6449 368.004 60.6449 cv
367.804 60.6449 367.619 60.6834 367.442 60.7604 cv
367.265 60.8374 367.126 60.9452 367.019 61.0915 cv
367.042 61.0838 li
367.072 61.0838 li
367.188 61.0838 367.288 61.13 367.365 61.207 cv
367.442 61.284 367.481 61.3841 367.481 61.4919 cv
367.481 61.6074 367.442 61.7075 367.365 61.7845 cv
367.288 61.8615 367.188 61.9 367.072 61.9 cv
366.957 61.9 366.857 61.8615 366.78 61.7845 cv
366.703 61.7075 366.664 61.6074 366.664 61.4919 cv
366.664 61.2763 366.726 61.0838 366.865 60.9221 cv
366.995 60.7604 367.165 60.6372 367.373 60.5525 cv
367.581 60.4678 367.789 60.4216 368.004 60.4216 cv
368.158 60.4216 368.32 60.4447 368.497 60.4909 cv
368.666 60.5371 368.828 60.6064 368.967 60.6911 cv
369.105 60.7835 369.221 60.8913 369.313 61.0222 cv
369.398 61.1608 369.444 61.3148 369.444 61.4842 cv
369.444 61.6998 369.39 61.9 369.298 62.0848 cv
369.205 62.2696 369.074 62.4236 368.905 62.5545 cv
368.736 62.6931 368.551 62.7932 368.351 62.8548 cv
368.574 62.901 368.79 62.9857 368.99 63.1089 cv
369.19 63.2321 369.344 63.3938 369.467 63.5863 cv
369.59 63.7865 369.652 63.9944 369.652 64.2177 cv
369.652 64.5026 369.567 64.7567 369.413 64.9877 cv
369.259 65.2187 369.051 65.4035 368.805 65.5267 cv
368.551 65.6499 368.281 65.7115 368.004 65.7115 cv
367.758 65.7115 367.519 65.6653 367.28 65.5729 cv
367.034 65.4882 366.841 65.3573 366.688 65.1725 cv
366.533 64.9877 366.456 64.7721 366.456 64.5103 cv
366.456 64.3871 366.495 64.2793 366.58 64.1946 cv
366.664 64.1099 366.772 64.0637 366.903 64.0637 cv
367.126 64.1253 li
367.288 64.287 li
367.35 64.5103 li
367.35 64.6412 367.303 64.749 367.219 64.8337 cv
367.126 64.9184 367.026 64.9569 366.903 64.9569 cv
366.865 64.9569 li
f
370.199 64.2793 mo
370.199 64.0098 li
372.578 60.4601 li
372.655 60.4216 li
372.771 60.4216 li
372.855 60.5063 li
372.855 64.0098 li
373.61 64.0098 li
373.61 64.2793 li
372.855 64.2793 li
372.855 65.0339 li
372.855 65.1417 372.924 65.211 373.078 65.2418 cv
373.232 65.2726 373.402 65.2803 373.602 65.2803 cv
373.602 65.5498 li
371.485 65.5498 li
371.485 65.2803 li
371.677 65.2803 371.846 65.2726 372 65.2418 cv
372.154 65.211 372.232 65.1417 372.232 65.0339 cv
372.232 64.2793 li
370.199 64.2793 li
370.453 64.0098 mo
372.278 64.0098 li
372.278 61.284 li
370.453 64.0098 li
f
374.503 64.672 mo
374.549 64.826 374.634 64.9646 374.742 65.0878 cv
374.849 65.211 374.98 65.3034 375.134 65.3727 cv
375.281 65.442 375.435 65.4728 375.596 65.4728 cv
375.966 65.4728 376.22 65.3342 376.359 65.0416 cv
376.497 64.7567 376.574 64.4102 376.574 63.9944 cv
376.574 63.8173 376.567 63.671 376.567 63.5478 cv
376.559 63.4246 376.543 63.3091 376.513 63.1936 cv
376.466 63.0165 376.382 62.8625 376.259 62.7239 cv
376.135 62.5853 375.997 62.516 375.827 62.516 cv
375.65 62.516 375.504 62.5468 375.381 62.593 cv
375.258 62.6469 375.15 62.7085 375.073 62.7778 cv
374.865 63.0011 li
374.757 63.1243 li
374.672 63.1243 li
374.618 63.1012 li
374.595 63.055 li
374.595 60.4832 li
374.618 60.4447 li
374.672 60.4216 li
374.695 60.4216 li
375.034 60.591 375.404 60.668 375.797 60.668 cv
376.174 60.668 376.543 60.591 376.898 60.4216 cv
376.921 60.4216 li
376.967 60.4447 li
376.99 60.4832 li
376.99 60.5525 li
376.975 60.591 li
376.798 60.822 376.574 61.0068 376.313 61.1377 cv
376.051 61.2686 375.773 61.3302 375.496 61.3302 cv
375.288 61.3302 375.081 61.3071 374.865 61.2455 cv
374.865 62.7008 li
375.034 62.5622 375.181 62.4698 375.319 62.4082 cv
375.45 62.3466 375.62 62.3158 375.835 62.3158 cv
376.112 62.3158 376.366 62.4005 376.59 62.5622 cv
376.813 62.7316 376.982 62.9395 377.106 63.2013 cv
377.229 63.4631 377.29 63.7326 377.29 64.0021 cv
377.29 64.3101 377.213 64.595 377.059 64.8568 cv
376.905 65.1186 376.705 65.3265 376.443 65.4805 cv
376.182 65.6345 375.904 65.7115 375.596 65.7115 cv
375.342 65.7115 375.111 65.6422 374.896 65.519 cv
374.68 65.3958 374.518 65.2187 374.395 64.9954 cv
374.272 64.7798 374.218 64.5411 374.218 64.2947 cv
374.218 64.1792 374.249 64.0868 374.326 64.0098 cv
374.403 63.9405 374.495 63.902 374.611 63.902 cv
374.719 63.902 374.819 63.9405 374.896 64.0175 cv
374.973 64.0945 375.011 64.1869 375.011 64.2947 cv
375.011 64.4025 374.973 64.4949 374.896 64.5719 cv
374.819 64.6489 374.719 64.6874 374.611 64.6874 cv
374.549 64.6874 li
374.503 64.672 li
f
380.44 61.2807 mo
380.286 61.2147 li
380.231 61.0607 li
380.286 60.9067 li
380.44 60.8407 li
387.348 60.8407 li
387.48 60.9067 li
387.546 61.0607 li
387.48 61.2147 li
387.348 61.2807 li
380.44 61.2807 li
380.44 59.1467 mo
380.286 59.0807 li
380.231 58.9267 li
380.286 58.7837 li
380.44 58.7067 li
387.348 58.7067 li
387.48 58.7837 li
387.546 58.9267 li
387.48 59.0807 li
387.348 59.1467 li
380.44 59.1467 li
f
389.98 60.2137 mo
389.826 60.1477 li
389.771 59.9937 li
389.826 59.8507 li
389.98 59.7737 li
396.294 59.7737 li
396.438 59.8507 li
396.492 59.9937 li
396.438 60.1477 li
396.294 60.2137 li
389.98 60.2137 li
f
400.154 62.9747 mo
399.252 62.9747 398.636 62.6117 398.317 61.8747 cv
397.987 61.1377 397.833 60.2577 397.833 59.2347 cv
397.833 58.5967 397.888 58.0027 398.009 57.4417 cv
398.119 56.8807 398.35 56.4077 398.702 56.0117 cv
399.043 55.6157 399.527 55.4177 400.154 55.4177 cv
400.638 55.4177 401.034 55.5387 401.342 55.7697 cv
401.65 56.0117 401.881 56.3087 402.046 56.6827 cv
402.2 57.0567 402.31 57.4637 402.376 57.8927 cv
402.431 58.3217 402.464 58.7727 402.464 59.2347 cv
402.464 59.8727 402.398 60.4557 402.288 61.0057 cv
402.167 61.5557 401.936 62.0287 401.595 62.4027 cv
401.254 62.7767 400.77 62.9747 400.154 62.9747 cv
400.154 62.6997 mo
400.561 62.6997 400.869 62.4907 401.067 62.0727 cv
401.265 61.6547 401.386 61.1927 401.43 60.6867 cv
401.474 60.1807 401.507 59.6307 401.507 59.0587 cv
401.507 58.5087 401.474 58.0027 401.43 57.5407 cv
401.386 57.0787 401.265 56.6497 401.067 56.2757 cv
400.869 55.9017 400.561 55.7037 400.154 55.7037 cv
399.736 55.7037 399.428 55.9017 399.23 56.2757 cv
399.032 56.6497 398.9 57.0787 398.856 57.5407 cv
398.812 58.0027 398.79 58.5087 398.79 59.0587 cv
398.79 59.4767 398.79 59.8617 398.812 60.2137 cv
398.834 60.5767 398.889 60.9507 398.977 61.3357 cv
399.065 61.7207 399.197 62.0397 399.395 62.3037 cv
399.582 62.5677 399.835 62.6997 400.154 62.6997 cv
f
403.828 62.1387 mo
403.828 61.9737 403.883 61.8307 404.004 61.7097 cv
404.125 61.5997 404.268 61.5337 404.433 61.5337 cv
404.532 61.5337 404.631 61.5667 404.73 61.6217 cv
404.95 61.8417 li
405.005 61.9407 405.038 62.0397 405.038 62.1387 cv
405.038 62.3037 404.972 62.4467 404.862 62.5677 cv
404.741 62.6887 404.598 62.7437 404.433 62.7437 cv
404.268 62.7437 404.125 62.6887 404.004 62.5677 cv
403.883 62.4467 403.828 62.3037 403.828 62.1387 cv
f
407.061 62.7437 mo
407.061 62.3587 li
407.974 62.3587 408.436 62.2487 408.436 62.0067 cv
408.436 56.2317 li
408.051 56.4187 407.567 56.5067 406.995 56.5067 cv
406.995 56.1217 li
407.886 56.1217 408.568 55.8907 409.03 55.4177 cv
409.184 55.4177 li
409.261 55.4507 li
409.294 55.5167 li
409.294 62.0067 li
409.294 62.2487 409.745 62.3587 410.669 62.3587 cv
410.669 62.7437 li
407.061 62.7437 li
f
332.22 76.1281 mo
347.62 76.1281 li
.306462 .137331 1 .00201419 cmyk
@
360.281 79.4161 mo
360.281 79.3061 360.325 79.2071 360.424 79.1081 cv
363.515 76.0721 li
362.426 73.0141 li
362.338 72.7831 362.239 72.5961 362.151 72.4641 cv
362.052 72.3321 361.92 72.2551 361.744 72.2551 cv
361.656 72.2551 361.623 72.2111 361.623 72.1121 cv
361.678 72.0131 li
361.788 71.9691 li
362.558 71.9691 363.02 72.2001 363.185 72.6511 cv
365.418 78.8881 li
365.506 79.2071 365.605 79.4161 365.715 79.5151 cv
365.77 79.6141 li
365.682 79.7131 li
365.088 79.7131 li
364.901 79.6581 364.758 79.5151 364.648 79.2511 cv
363.647 76.4351 li
360.985 79.5591 li
360.853 79.6691 360.732 79.7351 360.633 79.7351 cv
360.534 79.7351 360.446 79.7021 360.38 79.6471 cv
360.314 79.5921 360.281 79.5151 360.281 79.4161 cv
1 /0 /CSD get_res sepcs
1 sep
f
366.865 81.8162 mo
366.988 81.9933 367.149 82.1243 367.35 82.2089 cv
367.55 82.2936 367.773 82.3321 368.004 82.3321 cv
368.297 82.3321 368.512 82.2089 368.636 81.9548 cv
368.759 81.7008 368.828 81.4081 368.828 81.0847 cv
368.828 80.9462 368.813 80.7999 368.79 80.6535 cv
368.759 80.5072 368.713 80.3687 368.651 80.2455 cv
368.589 80.1222 368.505 80.0221 368.397 79.9452 cv
368.289 79.8681 368.15 79.8297 367.996 79.8297 cv
367.488 79.8297 li
367.419 79.7603 li
367.419 79.691 li
367.488 79.6294 li
367.912 79.5986 li
368.089 79.5986 368.235 79.537 368.358 79.3985 cv
368.482 79.2598 368.566 79.0982 368.62 78.8979 cv
368.674 78.7055 368.705 78.5207 368.705 78.3436 cv
368.705 78.0972 368.643 77.8969 368.528 77.743 cv
368.412 77.589 368.235 77.5042 368.004 77.5042 cv
367.804 77.5042 367.619 77.5427 367.442 77.6198 cv
367.265 77.6967 367.126 77.8046 367.019 77.9509 cv
367.042 77.9431 li
367.072 77.9431 li
367.188 77.9431 367.288 77.9893 367.365 78.0663 cv
367.442 78.1433 367.481 78.2434 367.481 78.3512 cv
367.481 78.4668 367.442 78.5668 367.365 78.6439 cv
367.288 78.7208 367.188 78.7593 367.072 78.7593 cv
366.957 78.7593 366.857 78.7208 366.78 78.6439 cv
366.703 78.5668 366.664 78.4668 366.664 78.3512 cv
366.664 78.1357 366.726 77.9431 366.865 77.7814 cv
366.995 77.6198 367.165 77.4966 367.373 77.4118 cv
367.581 77.3271 367.789 77.281 368.004 77.281 cv
368.158 77.281 368.32 77.304 368.497 77.3503 cv
368.666 77.3964 368.828 77.4658 368.967 77.5504 cv
369.105 77.6429 369.221 77.7506 369.313 77.8815 cv
369.398 78.0201 369.444 78.1741 369.444 78.3436 cv
369.444 78.5592 369.39 78.7593 369.298 78.9442 cv
369.205 79.129 369.074 79.283 368.905 79.4138 cv
368.736 79.5525 368.551 79.6525 368.351 79.7141 cv
368.574 79.7603 368.79 79.845 368.99 79.9682 cv
369.19 80.0914 369.344 80.2532 369.467 80.4456 cv
369.59 80.6459 369.652 80.8538 369.652 81.077 cv
369.652 81.3619 369.567 81.6161 369.413 81.847 cv
369.259 82.078 369.051 82.2628 368.805 82.386 cv
368.551 82.5092 368.281 82.5708 368.004 82.5708 cv
367.758 82.5708 367.519 82.5247 367.28 82.4323 cv
367.034 82.3475 366.841 82.2167 366.688 82.0319 cv
366.533 81.847 366.456 81.6314 366.456 81.3697 cv
366.456 81.2465 366.495 81.1386 366.58 81.0539 cv
366.664 80.9692 366.772 80.923 366.903 80.923 cv
367.126 80.9846 li
367.288 81.1463 li
367.35 81.3697 li
367.35 81.5005 367.303 81.6084 367.219 81.693 cv
367.126 81.7777 367.026 81.8162 366.903 81.8162 cv
366.865 81.8162 li
f
370.199 81.1386 mo
370.199 80.8691 li
372.578 77.3195 li
372.655 77.281 li
372.771 77.281 li
372.855 77.3656 li
372.855 80.8691 li
373.61 80.8691 li
373.61 81.1386 li
372.855 81.1386 li
372.855 81.8932 li
372.855 82.0011 372.924 82.0704 373.078 82.1012 cv
373.232 82.132 373.402 82.1396 373.602 82.1396 cv
373.602 82.4091 li
371.485 82.4091 li
371.485 82.1396 li
371.677 82.1396 371.846 82.132 372 82.1012 cv
372.154 82.0704 372.232 82.0011 372.232 81.8932 cv
372.232 81.1386 li
370.199 81.1386 li
370.453 80.8691 mo
372.278 80.8691 li
372.278 78.1433 li
370.453 80.8691 li
f
374.503 81.5313 mo
374.549 81.6853 374.634 81.824 374.742 81.9472 cv
374.849 82.0704 374.98 82.1628 375.134 82.232 cv
375.281 82.3013 375.435 82.3321 375.596 82.3321 cv
375.966 82.3321 376.22 82.1936 376.359 81.9009 cv
376.497 81.6161 376.574 81.2695 376.574 80.8538 cv
376.574 80.6767 376.567 80.5303 376.567 80.4072 cv
376.559 80.284 376.543 80.1684 376.513 80.0529 cv
376.466 79.8758 376.382 79.7218 376.259 79.5833 cv
376.135 79.4446 375.997 79.3754 375.827 79.3754 cv
375.65 79.3754 375.504 79.4062 375.381 79.4523 cv
375.258 79.5062 375.15 79.5678 375.073 79.6371 cv
374.865 79.8605 li
374.757 79.9837 li
374.672 79.9837 li
374.618 79.9605 li
374.595 79.9144 li
374.595 77.3426 li
374.618 77.304 li
374.672 77.281 li
374.695 77.281 li
375.034 77.4503 375.404 77.5274 375.797 77.5274 cv
376.174 77.5274 376.543 77.4503 376.898 77.281 cv
376.921 77.281 li
376.967 77.304 li
376.99 77.3426 li
376.99 77.4118 li
376.975 77.4503 li
376.798 77.6814 376.574 77.8661 376.313 77.997 cv
376.051 78.128 375.773 78.1896 375.496 78.1896 cv
375.288 78.1896 375.081 78.1665 374.865 78.1049 cv
374.865 79.5602 li
375.034 79.4215 375.181 79.3291 375.319 79.2675 cv
375.45 79.2059 375.62 79.1751 375.835 79.1751 cv
376.112 79.1751 376.366 79.2598 376.59 79.4215 cv
376.813 79.591 376.982 79.7989 377.106 80.0606 cv
377.229 80.3224 377.29 80.5919 377.29 80.8615 cv
377.29 81.1694 377.213 81.4543 377.059 81.7161 cv
376.905 81.978 376.705 82.1859 376.443 82.3399 cv
376.182 82.4939 375.904 82.5708 375.596 82.5708 cv
375.342 82.5708 375.111 82.5015 374.896 82.3783 cv
374.68 82.2551 374.518 82.078 374.395 81.8548 cv
374.272 81.6392 374.218 81.4005 374.218 81.1541 cv
374.218 81.0386 374.249 80.9462 374.326 80.8691 cv
374.403 80.7999 374.495 80.7614 374.611 80.7614 cv
374.719 80.7614 374.819 80.7999 374.896 80.8768 cv
374.973 80.9538 375.011 81.0462 375.011 81.1541 cv
375.011 81.2618 374.973 81.3542 374.896 81.4313 cv
374.819 81.5082 374.719 81.5468 374.611 81.5468 cv
374.549 81.5468 li
374.503 81.5313 li
f
380.44 78.1401 mo
380.286 78.0741 li
380.231 77.9201 li
380.286 77.7661 li
380.44 77.7001 li
387.348 77.7001 li
387.48 77.7661 li
387.546 77.9201 li
387.48 78.0741 li
387.348 78.1401 li
380.44 78.1401 li
380.44 76.0061 mo
380.286 75.9401 li
380.231 75.7861 li
380.286 75.6431 li
380.44 75.5661 li
387.348 75.5661 li
387.48 75.6431 li
387.546 75.7861 li
387.48 75.9401 li
387.348 76.0061 li
380.44 76.0061 li
f
389.98 77.0731 mo
389.826 77.0071 li
389.771 76.8531 li
389.826 76.7101 li
389.98 76.6331 li
396.294 76.6331 li
396.438 76.7101 li
396.492 76.8531 li
396.438 77.0071 li
396.294 77.0731 li
389.98 77.0731 li
f
400.154 79.8341 mo
399.252 79.8341 398.636 79.4711 398.317 78.7341 cv
397.987 77.9971 397.833 77.1171 397.833 76.0941 cv
397.833 75.4561 397.888 74.8621 398.009 74.3011 cv
398.119 73.7401 398.35 73.2671 398.702 72.8711 cv
399.043 72.4751 399.527 72.2771 400.154 72.2771 cv
400.638 72.2771 401.034 72.3981 401.342 72.6291 cv
401.65 72.8711 401.881 73.1681 402.046 73.5421 cv
402.2 73.9161 402.31 74.3231 402.376 74.7521 cv
402.431 75.1811 402.464 75.6321 402.464 76.0941 cv
402.464 76.7321 402.398 77.3151 402.288 77.8651 cv
402.167 78.4151 401.936 78.8881 401.595 79.2621 cv
401.254 79.6361 400.77 79.8341 400.154 79.8341 cv
400.154 79.5591 mo
400.561 79.5591 400.869 79.3501 401.067 78.9321 cv
401.265 78.5141 401.386 78.0521 401.43 77.5461 cv
401.474 77.0401 401.507 76.4901 401.507 75.9181 cv
401.507 75.3681 401.474 74.8621 401.43 74.4001 cv
401.386 73.9381 401.265 73.5091 401.067 73.1351 cv
400.869 72.7611 400.561 72.5631 400.154 72.5631 cv
399.736 72.5631 399.428 72.7611 399.23 73.1351 cv
399.032 73.5091 398.9 73.9381 398.856 74.4001 cv
398.812 74.8621 398.79 75.3681 398.79 75.9181 cv
398.79 76.3361 398.79 76.7211 398.812 77.0731 cv
398.834 77.4361 398.889 77.8101 398.977 78.1951 cv
399.065 78.5801 399.197 78.8991 399.395 79.1631 cv
399.582 79.4271 399.835 79.5591 400.154 79.5591 cv
f
403.828 78.9981 mo
403.828 78.8331 403.883 78.6901 404.004 78.5691 cv
404.125 78.4591 404.268 78.3931 404.433 78.3931 cv
404.532 78.3931 404.631 78.4261 404.73 78.4811 cv
404.95 78.7011 li
405.005 78.8001 405.038 78.8991 405.038 78.9981 cv
405.038 79.1631 404.972 79.3061 404.862 79.4271 cv
404.741 79.5481 404.598 79.6031 404.433 79.6031 cv
404.268 79.6031 404.125 79.5481 404.004 79.4271 cv
403.883 79.3061 403.828 79.1631 403.828 78.9981 cv
f
408.788 79.8341 mo
407.886 79.8341 407.27 79.4711 406.951 78.7341 cv
406.621 77.9971 406.467 77.1171 406.467 76.0941 cv
406.467 75.4561 406.522 74.8621 406.643 74.3011 cv
406.753 73.7401 406.984 73.2671 407.336 72.8711 cv
407.677 72.4751 408.161 72.2771 408.788 72.2771 cv
409.272 72.2771 409.668 72.3981 409.976 72.6291 cv
410.284 72.8711 410.515 73.1681 410.68 73.5421 cv
410.834 73.9161 410.944 74.3231 411.01 74.7521 cv
411.065 75.1811 411.098 75.6321 411.098 76.0941 cv
411.098 76.7321 411.032 77.3151 410.922 77.8651 cv
410.801 78.4151 410.57 78.8881 410.229 79.2621 cv
409.888 79.6361 409.404 79.8341 408.788 79.8341 cv
408.788 79.5591 mo
409.195 79.5591 409.503 79.3501 409.701 78.9321 cv
409.899 78.5141 410.02 78.0521 410.064 77.5461 cv
410.108 77.0401 410.141 76.4901 410.141 75.9181 cv
410.141 75.3681 410.108 74.8621 410.064 74.4001 cv
410.02 73.9381 409.899 73.5091 409.701 73.1351 cv
409.503 72.7611 409.195 72.5631 408.788 72.5631 cv
408.37 72.5631 408.062 72.7611 407.864 73.1351 cv
407.666 73.5091 407.534 73.9381 407.49 74.4001 cv
407.446 74.8621 407.424 75.3681 407.424 75.9181 cv
407.424 76.3361 407.424 76.7211 407.446 77.0731 cv
407.468 77.4361 407.523 77.8101 407.611 78.1951 cv
407.699 78.5801 407.831 78.8991 408.029 79.1631 cv
408.216 79.4271 408.469 79.5591 408.788 79.5591 cv
f
412.561 79.6031 mo
412.561 79.2181 li
413.474 79.2181 413.936 79.1081 413.936 78.8661 cv
413.936 73.0911 li
413.551 73.2781 413.067 73.3661 412.495 73.3661 cv
412.495 72.9811 li
413.386 72.9811 414.068 72.7501 414.53 72.2771 cv
414.684 72.2771 li
414.761 72.3101 li
414.794 72.3761 li
414.794 78.8661 li
414.794 79.1081 415.245 79.2181 416.169 79.2181 cv
416.169 79.6031 li
412.561 79.6031 li
f
332.22 92.9875 mo
347.62 92.9875 li
@
360.281 96.2755 mo
360.281 96.1655 360.325 96.0665 360.424 95.9675 cv
363.515 92.9315 li
362.426 89.8735 li
362.338 89.6425 362.239 89.4555 362.151 89.3235 cv
362.052 89.1915 361.92 89.1145 361.744 89.1145 cv
361.656 89.1145 361.623 89.0705 361.623 88.9715 cv
361.678 88.8725 li
361.788 88.8285 li
362.558 88.8285 363.02 89.0595 363.185 89.5105 cv
365.418 95.7475 li
365.506 96.0665 365.605 96.2755 365.715 96.3745 cv
365.77 96.4735 li
365.682 96.5725 li
365.088 96.5725 li
364.901 96.5175 364.758 96.3745 364.648 96.1105 cv
363.647 93.2945 li
360.985 96.4185 li
360.853 96.5285 360.732 96.5945 360.633 96.5945 cv
360.534 96.5945 360.446 96.5615 360.38 96.5065 cv
360.314 96.4515 360.281 96.3745 360.281 96.2755 cv
f
366.865 98.6756 mo
366.988 98.8527 367.149 98.9836 367.35 99.0683 cv
367.55 99.153 367.773 99.1915 368.004 99.1915 cv
368.297 99.1915 368.512 99.0683 368.636 98.8142 cv
368.759 98.5601 368.828 98.2675 368.828 97.9441 cv
368.828 97.8055 368.813 97.6592 368.79 97.5129 cv
368.759 97.3666 368.713 97.228 368.651 97.1048 cv
368.589 96.9816 368.505 96.8815 368.397 96.8045 cv
368.289 96.7275 368.15 96.689 367.996 96.689 cv
367.488 96.689 li
367.419 96.6197 li
367.419 96.5504 li
367.488 96.4888 li
367.912 96.458 li
368.089 96.458 368.235 96.3964 368.358 96.2578 cv
368.482 96.1192 368.566 95.9575 368.62 95.7573 cv
368.674 95.5648 368.705 95.38 368.705 95.2029 cv
368.705 94.9565 368.643 94.7563 368.528 94.6023 cv
368.412 94.4483 368.235 94.3636 368.004 94.3636 cv
367.804 94.3636 367.619 94.4021 367.442 94.4791 cv
367.265 94.5561 367.126 94.6639 367.019 94.8102 cv
367.042 94.8025 li
367.072 94.8025 li
367.188 94.8025 367.288 94.8487 367.365 94.9257 cv
367.442 95.0027 367.481 95.1028 367.481 95.2106 cv
367.481 95.3261 367.442 95.4262 367.365 95.5032 cv
367.288 95.5802 367.188 95.6187 367.072 95.6187 cv
366.957 95.6187 366.857 95.5802 366.78 95.5032 cv
366.703 95.4262 366.664 95.3261 366.664 95.2106 cv
366.664 94.995 366.726 94.8025 366.865 94.6408 cv
366.995 94.4791 367.165 94.3559 367.373 94.2712 cv
367.581 94.1865 367.789 94.1403 368.004 94.1403 cv
368.158 94.1403 368.32 94.1634 368.497 94.2096 cv
368.666 94.2558 368.828 94.3251 368.967 94.4098 cv
369.105 94.5022 369.221 94.61 369.313 94.7409 cv
369.398 94.8795 369.444 95.0335 369.444 95.2029 cv
369.444 95.4185 369.39 95.6187 369.298 95.8035 cv
369.205 95.9883 369.074 96.1423 368.905 96.2732 cv
368.736 96.4118 368.551 96.5119 368.351 96.5735 cv
368.574 96.6197 368.79 96.7044 368.99 96.8276 cv
369.19 96.9508 369.344 97.1125 369.467 97.305 cv
369.59 97.5052 369.652 97.7131 369.652 97.9364 cv
369.652 98.2213 369.567 98.4754 369.413 98.7064 cv
369.259 98.9374 369.051 99.1222 368.805 99.2454 cv
368.551 99.3686 368.281 99.4302 368.004 99.4302 cv
367.758 99.4302 367.519 99.384 367.28 99.2916 cv
367.034 99.2069 366.841 99.076 366.688 98.8912 cv
366.533 98.7064 366.456 98.4908 366.456 98.229 cv
366.456 98.1058 366.495 97.998 366.58 97.9133 cv
366.664 97.8286 366.772 97.7824 366.903 97.7824 cv
367.126 97.844 li
367.288 98.0057 li
367.35 98.229 li
367.35 98.3599 367.303 98.4677 367.219 98.5524 cv
367.126 98.6371 367.026 98.6756 366.903 98.6756 cv
366.865 98.6756 li
f
370.199 97.998 mo
370.199 97.7285 li
372.578 94.1788 li
372.655 94.1403 li
372.771 94.1403 li
372.855 94.225 li
372.855 97.7285 li
373.61 97.7285 li
373.61 97.998 li
372.855 97.998 li
372.855 98.7526 li
372.855 98.8604 372.924 98.9297 373.078 98.9605 cv
373.232 98.9913 373.402 98.999 373.602 98.999 cv
373.602 99.2685 li
371.485 99.2685 li
371.485 98.999 li
371.677 98.999 371.846 98.9913 372 98.9605 cv
372.154 98.9297 372.232 98.8604 372.232 98.7526 cv
372.232 97.998 li
370.199 97.998 li
370.453 97.7285 mo
372.278 97.7285 li
372.278 95.0027 li
370.453 97.7285 li
f
374.503 98.3907 mo
374.549 98.5447 374.634 98.6833 374.742 98.8065 cv
374.849 98.9297 374.98 99.0221 375.134 99.0914 cv
375.281 99.1607 375.435 99.1915 375.596 99.1915 cv
375.966 99.1915 376.22 99.0529 376.359 98.7603 cv
376.497 98.4754 376.574 98.1289 376.574 97.7131 cv
376.574 97.536 376.567 97.3897 376.567 97.2665 cv
376.559 97.1433 376.543 97.0278 376.513 96.9123 cv
376.466 96.7352 376.382 96.5812 376.259 96.4426 cv
376.135 96.304 375.997 96.2347 375.827 96.2347 cv
375.65 96.2347 375.504 96.2655 375.381 96.3117 cv
375.258 96.3656 375.15 96.4272 375.073 96.4965 cv
374.865 96.7198 li
374.757 96.843 li
374.672 96.843 li
374.618 96.8199 li
374.595 96.7737 li
374.595 94.2019 li
374.618 94.1634 li
374.672 94.1403 li
374.695 94.1403 li
375.034 94.3097 375.404 94.3867 375.797 94.3867 cv
376.174 94.3867 376.543 94.3097 376.898 94.1403 cv
376.921 94.1403 li
376.967 94.1634 li
376.99 94.2019 li
376.99 94.2712 li
376.975 94.3097 li
376.798 94.5407 376.574 94.7255 376.313 94.8564 cv
376.051 94.9873 375.773 95.0489 375.496 95.0489 cv
375.288 95.0489 375.081 95.0258 374.865 94.9642 cv
374.865 96.4195 li
375.034 96.2809 375.181 96.1885 375.319 96.1269 cv
375.45 96.0653 375.62 96.0345 375.835 96.0345 cv
376.112 96.0345 376.366 96.1192 376.59 96.2809 cv
376.813 96.4503 376.982 96.6582 377.106 96.92 cv
377.229 97.1818 377.29 97.4513 377.29 97.7208 cv
377.29 98.0288 377.213 98.3137 377.059 98.5755 cv
376.905 98.8373 376.705 99.0452 376.443 99.1992 cv
376.182 99.3532 375.904 99.4302 375.596 99.4302 cv
375.342 99.4302 375.111 99.3609 374.896 99.2377 cv
374.68 99.1145 374.518 98.9374 374.395 98.7141 cv
374.272 98.4985 374.218 98.2598 374.218 98.0134 cv
374.218 97.8979 374.249 97.8055 374.326 97.7285 cv
374.403 97.6592 374.495 97.6207 374.611 97.6207 cv
374.719 97.6207 374.819 97.6592 374.896 97.7362 cv
374.973 97.8132 375.011 97.9056 375.011 98.0134 cv
375.011 98.1212 374.973 98.2136 374.896 98.2906 cv
374.819 98.3676 374.719 98.4061 374.611 98.4061 cv
374.549 98.4061 li
374.503 98.3907 li
f
380.44 94.9995 mo
380.286 94.9335 li
380.231 94.7795 li
380.286 94.6255 li
380.44 94.5595 li
387.348 94.5595 li
387.48 94.6255 li
387.546 94.7795 li
387.48 94.9335 li
387.348 94.9995 li
380.44 94.9995 li
380.44 92.8655 mo
380.286 92.7995 li
380.231 92.6455 li
380.286 92.5025 li
380.44 92.4255 li
387.348 92.4255 li
387.48 92.5025 li
387.546 92.6455 li
387.48 92.7995 li
387.348 92.8655 li
380.44 92.8655 li
f
389.98 93.9325 mo
389.826 93.8665 li
389.771 93.7125 li
389.826 93.5695 li
389.98 93.4925 li
396.294 93.4925 li
396.438 93.5695 li
396.492 93.7125 li
396.438 93.8665 li
396.294 93.9325 li
389.98 93.9325 li
f
400.154 96.6935 mo
399.252 96.6935 398.636 96.3305 398.317 95.5935 cv
397.987 94.8565 397.833 93.9765 397.833 92.9535 cv
397.833 92.3155 397.888 91.7215 398.009 91.1605 cv
398.119 90.5995 398.35 90.1265 398.702 89.7305 cv
399.043 89.3345 399.527 89.1365 400.154 89.1365 cv
400.638 89.1365 401.034 89.2575 401.342 89.4885 cv
401.65 89.7305 401.881 90.0275 402.046 90.4015 cv
402.2 90.7755 402.31 91.1825 402.376 91.6115 cv
402.431 92.0405 402.464 92.4915 402.464 92.9535 cv
402.464 93.5915 402.398 94.1745 402.288 94.7245 cv
402.167 95.2745 401.936 95.7475 401.595 96.1215 cv
401.254 96.4955 400.77 96.6935 400.154 96.6935 cv
400.154 96.4185 mo
400.561 96.4185 400.869 96.2095 401.067 95.7915 cv
401.265 95.3735 401.386 94.9115 401.43 94.4055 cv
401.474 93.8995 401.507 93.3495 401.507 92.7775 cv
401.507 92.2275 401.474 91.7215 401.43 91.2595 cv
401.386 90.7975 401.265 90.3685 401.067 89.9945 cv
400.869 89.6205 400.561 89.4225 400.154 89.4225 cv
399.736 89.4225 399.428 89.6205 399.23 89.9945 cv
399.032 90.3685 398.9 90.7975 398.856 91.2595 cv
398.812 91.7215 398.79 92.2275 398.79 92.7775 cv
398.79 93.1955 398.79 93.5805 398.812 93.9325 cv
398.834 94.2955 398.889 94.6695 398.977 95.0545 cv
399.065 95.4395 399.197 95.7585 399.395 96.0225 cv
399.582 96.2865 399.835 96.4185 400.154 96.4185 cv
f
403.828 95.8575 mo
403.828 95.6925 403.883 95.5495 404.004 95.4285 cv
404.125 95.3185 404.268 95.2525 404.433 95.2525 cv
404.532 95.2525 404.631 95.2855 404.73 95.3405 cv
404.95 95.5605 li
405.005 95.6595 405.038 95.7585 405.038 95.8575 cv
405.038 96.0225 404.972 96.1655 404.862 96.2865 cv
404.741 96.4075 404.598 96.4625 404.433 96.4625 cv
404.268 96.4625 404.125 96.4075 404.004 96.2865 cv
403.883 96.1655 403.828 96.0225 403.828 95.8575 cv
f
408.788 96.6935 mo
407.886 96.6935 407.27 96.3305 406.951 95.5935 cv
406.621 94.8565 406.467 93.9765 406.467 92.9535 cv
406.467 92.3155 406.522 91.7215 406.643 91.1605 cv
406.753 90.5995 406.984 90.1265 407.336 89.7305 cv
407.677 89.3345 408.161 89.1365 408.788 89.1365 cv
409.272 89.1365 409.668 89.2575 409.976 89.4885 cv
410.284 89.7305 410.515 90.0275 410.68 90.4015 cv
410.834 90.7755 410.944 91.1825 411.01 91.6115 cv
411.065 92.0405 411.098 92.4915 411.098 92.9535 cv
411.098 93.5915 411.032 94.1745 410.922 94.7245 cv
410.801 95.2745 410.57 95.7475 410.229 96.1215 cv
409.888 96.4955 409.404 96.6935 408.788 96.6935 cv
408.788 96.4185 mo
409.195 96.4185 409.503 96.2095 409.701 95.7915 cv
409.899 95.3735 410.02 94.9115 410.064 94.4055 cv
410.108 93.8995 410.141 93.3495 410.141 92.7775 cv
410.141 92.2275 410.108 91.7215 410.064 91.2595 cv
410.02 90.7975 409.899 90.3685 409.701 89.9945 cv
409.503 89.6205 409.195 89.4225 408.788 89.4225 cv
408.37 89.4225 408.062 89.6205 407.864 89.9945 cv
407.666 90.3685 407.534 90.7975 407.49 91.2595 cv
407.446 91.7215 407.424 92.2275 407.424 92.7775 cv
407.424 93.1955 407.424 93.5805 407.446 93.9325 cv
407.468 94.2955 407.523 94.6695 407.611 95.0545 cv
407.699 95.4395 407.831 95.7585 408.029 96.0225 cv
408.216 96.2865 408.469 96.4185 408.788 96.4185 cv
f
414.288 96.6935 mo
413.386 96.6935 412.77 96.3305 412.451 95.5935 cv
412.121 94.8565 411.967 93.9765 411.967 92.9535 cv
411.967 92.3155 412.022 91.7215 412.143 91.1605 cv
412.253 90.5995 412.484 90.1265 412.836 89.7305 cv
413.177 89.3345 413.661 89.1365 414.288 89.1365 cv
414.772 89.1365 415.168 89.2575 415.476 89.4885 cv
415.784 89.7305 416.015 90.0275 416.18 90.4015 cv
416.334 90.7755 416.444 91.1825 416.51 91.6115 cv
416.565 92.0405 416.598 92.4915 416.598 92.9535 cv
416.598 93.5915 416.532 94.1745 416.422 94.7245 cv
416.301 95.2745 416.07 95.7475 415.729 96.1215 cv
415.388 96.4955 414.904 96.6935 414.288 96.6935 cv
414.288 96.4185 mo
414.695 96.4185 415.003 96.2095 415.201 95.7915 cv
415.399 95.3735 415.52 94.9115 415.564 94.4055 cv
415.608 93.8995 415.641 93.3495 415.641 92.7775 cv
415.641 92.2275 415.608 91.7215 415.564 91.2595 cv
415.52 90.7975 415.399 90.3685 415.201 89.9945 cv
415.003 89.6205 414.695 89.4225 414.288 89.4225 cv
413.87 89.4225 413.562 89.6205 413.364 89.9945 cv
413.166 90.3685 413.034 90.7975 412.99 91.2595 cv
412.946 91.7215 412.924 92.2275 412.924 92.7775 cv
412.924 93.1955 412.924 93.5805 412.946 93.9325 cv
412.968 94.2955 413.023 94.6695 413.111 95.0545 cv
413.199 95.4395 413.331 95.7585 413.529 96.0225 cv
413.716 96.2865 413.969 96.4185 414.288 96.4185 cv
f
418.061 96.4625 mo
418.061 96.0775 li
418.974 96.0775 419.436 95.9675 419.436 95.7255 cv
419.436 89.9505 li
419.051 90.1375 418.567 90.2255 417.995 90.2255 cv
417.995 89.8405 li
418.886 89.8405 419.568 89.6095 420.03 89.1365 cv
420.184 89.1365 li
420.261 89.1695 li
420.294 89.2355 li
420.294 95.7255 li
420.294 95.9675 420.745 96.0775 421.669 96.0775 cv
421.669 96.4625 li
418.061 96.4625 li
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
showpage
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
